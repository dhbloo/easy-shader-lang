interface Geometry {
    func getPosition1(self, i, a) -> i32;
    func getPosition2(self, i, a) -> u32;
    func getPosition3(self, i, a) -> f32;
};

interface Geometry_1 <U, T> {
    func f32(self, i, a) -> Geometry;
    func i32(self, i, a) -> Geometry;
    func u32(self, i, a) -> Geometry;
};


type vec3 = f32[3];
struct Sphere : Geometry {
    center : vec3;
    radius : f32;
    func Sphere(self, c, r) {
        self.center = c;
        self.radius = r;
    }
    func Sphere(self, s) {
    }
    func intersect(self, s : Sphere ref) -> bool {
        return self.center - s.center;
    }
    func f32(self) {
        return self.radius;
    }
};

let s = Sphere(vec3(1.0f, 2.0f, 3.0f), 1.0f);
let s2 = (Sphere)s;