type vec4 = f32[4];
type vec2 = f32[2];

let outColor = vec4();

let coord = vec2();
let resolution = vec2();
let time = f32();

func min(a, b) {
    if (a <= b) return a; else return b;
}

struct Sphere {
    x : f32;
    y : f32;
    r : f32;
    func Sphere(self : Sphere ref) {
        self.x = 0.0f;
        self.y = 0.0f;
        self.r = 0.0f;
    }
    func intersect(self : Sphere ref, x : f32, y : f32) -> bool {
        x = x - self.x;
        y = y - self.y;
        return x * x + y * y < self.r * self.r;
    }
    func distance(self : Sphere ref, x : f32, y : f32) {
        x = x - self.x;
        y = y - self.y;
        return sqrt(x * x + y * y) - self.r;
    }
};

func main() {
    outColor = vec4(0.0f, 0.0f, 0.0f, 1.0f);
    let minRes = min(resolution[0], resolution[1]);

    let sx = resolution[0] / 2 / minRes + 0.75f * sin(time);
    let s = Sphere();
    s.x = sx;
    s.y = 0.5f;
    s.r = 0.25f;

    let x = coord[0] / minRes;
    let y = coord[1] / minRes;
    if (s.intersect(x, y)) {
        outColor[0] = abs(sin(x + time * 0.2f));
        outColor[1] = abs(cos(y + time * 0.2f));
    } else {
        outColor[0] = outColor[1] = outColor[2] = 1.0f / (1.0f + s.distance(x, y));
    }
}