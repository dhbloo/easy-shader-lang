type vec4 = f32[4];
type vec2 = f32[2];

let outColor = vec4();

let info = vec2();
let time = f32();

func floor(d : f32) -> i32 {
    let di = (i32)d;
    if (d < (f32)di)
        return di - 1;
    else
        return di;
}

func ceil(d : f32) -> i32 {
    let di = (i32)d;
    if (d < (f32)di)
        return di;
    else
        return di + 1;
}

func trunc(d : f32) -> f32 {
    if (d > 0.0f) return (f32)floor(d); else return (f32)ceil(d);
}

func abs(x : f32) {
    if (x < 0.0f) return -x; else return x;
}

func sin(x : f32) {  # x in [-PI, PI]
    const PI = 3.14159265358f;
    const B = 4.0f / PI;
    const C = -4.0f / (PI * PI);
    const P = 0.225f;

    let y = B * x + C * x * abs(x);
    return P * (y * abs(y) - y) + y;
}

#func sin(x : f32) -> f32 {
#    x = fmod(x, 3.14159265)
#    let x2 = x * x;
#    let x3 = x2 * x;
#    let x5 = x3 * x2;
#    let x7 = x5 * x2;
#    return x - x3 / 6.0f + x5 / 120.0f - x7 / 5040.0f;
#}

func main() {
    outColor = vec4(0.4f, 0.4f, 0.8f, 1.0f);
    outColor[0] = info[0];
    outColor[1] = info[1];
    outColor[2] = sin(time);
}