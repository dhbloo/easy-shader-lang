# 单位类型：米
struct M <T> {  
    length : T;
    func M(self, l : T) { self.length = l; }
};
# 单位类型：厘米
struct CM <T> {  
    length : T;
    func CM (self, l : T) { self.length = l; }
};
# 坐标系类型：直角坐标系
struct Cartesian<T> {  
    x : T;
    y : T;
    z : T;
    func Cartesian(self, x : T, y : T, z : T) { self.x = x; self.y = y; self.z = z; }
};
# 坐标系类型：球坐标系
struct Spherical<T> {  
    r : T;
    theta : f32;
    phi : f32;
    func Spherical(self, r : T, theta : f32, phi : f32) { self.r = r; self.theta = theta; self.phi = phi; }
};
# 定义从M到CM的转换函数
convert<T>(m : M<T>) -> CM<T> {  
    return CM<T>(m.length * (T)100);
}
# 定义从CM到M的转换函数
convert<T>(m : CM<T>) -> M<T> {  
    return M<T>(m.length / (T)100);
}
# 定义直角坐标系到球坐标系的转换函数
convert<T>(c : Cartesian<T>) -> Spherical<T> {
    let x = c.x.length, y = c.y.length, z = c.z.length;
    let r = T(sqrt(x * x + y * y + z * z));
    let theta : f32 = arccos(z / r);
    let phi : f32 = arctan(y / x);
    return Spherical<T>(r, theta, phi);
}
# 定义球坐标系到直角坐标系的转换函数
convert<T>(c : Spherical<T>) -> Cartesian<T> {  
    let x = T(c.r.length * sin(c.theta) * cos(c.phi));
    let y = T(c.r.length * sin(c.theta) * sin(c.phi));
    let z = T(c.r.length * cos(c.phi));
    return Cartesian<T>(x, y, z);
}

# 定义类型别称简化书写
type CartCM = Cartesian< CM<f32> >;
type SpherM = Spherical< M<f32> >;

# 求以厘米为单位的直角坐标系中两个坐标的距离
func distance(c1 : CartCM, c2 : CartCM) -> f32 {
    let dx = c1.x.length - c2.x.length;
    let dy = c1.y.length - c2.y.length;
    let dz = c1.z.length - c2.z.length;
    return sqrt(dx * dx + dy * dy + dz * dz);
}

func main() {
    let a = SpherM(4.0f, 1.0f, 2.0f);
    let b = CartCM(300.0f, 250.0f, 400.0f);
    # 此处发生自动类型转换SpherM -> CartCM，实现坐标系与单位的语义转换
    let d = distance(a, b);  
}