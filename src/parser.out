Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    EQUAL
    GENERICS
    GREATER
    GREATER_EQUAL
    HEXADECIMAL
    IN
    LESS
    LESS_EQUAL
    LOGICAL_AND
    LOGICAL_NOT
    LOGICAL_OR
    LSHIFT
    MOD
    NOT_EQUAL
    OR
    OUT
    RSHIFT
    SAMPLER
    STRING
    XOR

Grammar

Rule 0     S' -> start
Rule 1     start -> translation_unit
Rule 2     translation_unit -> block_decl translation_unit
Rule 3     translation_unit -> function_def translation_unit
Rule 4     translation_unit -> empty
Rule 5     block_decl -> type_decl SEMICOLON
Rule 6     block_decl -> variable_decl SEMICOLON
Rule 7     block_decl -> constant_decl SEMICOLON
Rule 8     block_decl -> function_decl SEMICOLON
Rule 9     type_decl -> type_alias_decl
Rule 10    type_decl -> struct_decl
Rule 11    type_decl -> interface_decl
Rule 12    type_alias_decl -> TYPE ID ASSIGN type_spec
Rule 13    variable_decl -> LET declarator declarator_nest
Rule 14    declarator_nest -> COMMA declarator declarator_nest
Rule 15    declarator_nest -> empty
Rule 16    constant_decl -> CONST declarator declarator_nest
Rule 17    declarator -> ID type_spec_colon_opt ASSIGN expression
Rule 18    type_spec_colon_opt -> COLON type_spec
Rule 19    type_spec_colon_opt -> empty
Rule 20    function_decl -> FUNC ID function_sign
Rule 21    function_def -> function_decl block_statement
Rule 22    type_spec -> simple_type
Rule 23    type_spec -> complex_type
Rule 24    type_spec -> array_type
Rule 25    type_spec -> reference_type
Rule 26    type_spec -> function_type
Rule 27    simple_type -> VOID
Rule 28    simple_type -> BOOL
Rule 29    simple_type -> I8
Rule 30    simple_type -> U8
Rule 31    simple_type -> I16
Rule 32    simple_type -> U16
Rule 33    simple_type -> I32
Rule 34    simple_type -> U32
Rule 35    simple_type -> I64
Rule 36    simple_type -> U64
Rule 37    simple_type -> F16
Rule 38    simple_type -> F32
Rule 39    simple_type -> F64
Rule 40    complex_type -> ID
Rule 41    array_type -> type_spec LBRACKET int_literal_opt RBRACKET
Rule 42    int_literal_opt -> INT
Rule 43    int_literal_opt -> empty
Rule 44    reference_type -> type_spec REF
Rule 45    function_type -> function_sign
Rule 46    struct_decl -> STRUCT generics_type_list_opt LBRACE member_decl_nest RBRACE
Rule 47    interface_decl -> INTERFACE generics_type_list_opt LBRACE interface_member_decl_nest RBRACE
Rule 48    generics_type_list_opt -> generics_type_list
Rule 49    generics_type_list_opt -> empty
Rule 50    member_decl_nest -> member_decl member_decl_nest
Rule 51    member_decl_nest -> empty
Rule 52    interface_member_decl_nest -> interface_member_decl interface_member_decl_nest
Rule 53    interface_member_decl_nest -> empty
Rule 54    member_decl -> declarator
Rule 55    member_decl -> function_def
Rule 56    interface_member_decl -> declarator
Rule 57    interface_member_decl -> function_decl
Rule 58    function_sign -> generics_type_list_opt LPAREN parameter_decl_list_opt RPAREN type_spec_assigntype_opt
Rule 59    parameter_decl_list_opt -> parameter_dcel_list
Rule 60    parameter_decl_list_opt -> empty
Rule 61    type_spec_assigntype_opt -> ASSIGNTYPE type_spec
Rule 62    type_spec_assigntype_opt -> empty
Rule 63    parameter_dcel_list -> parameter_decl parameter_decl_comma_nest
Rule 64    parameter_decl_comma_nest -> COMMA parameter_decl parameter_decl_comma_nest
Rule 65    parameter_decl_comma_nest -> empty
Rule 66    parameter_decl -> ID type_spec_colon_opt
Rule 67    generics_type_list -> LANGRBRACKET generics_type generics_type_comma_nest RANGRBRACKET
Rule 68    generics_type_comma_nest -> COMMA generics_type generics_type_comma_nest
Rule 69    generics_type_comma_nest -> empty
Rule 70    generics_type -> ID generics_type_range_colon_opt
Rule 71    generics_type_range_colon_opt -> COLON generics_type_range
Rule 72    generics_type_range_colon_opt -> empty
Rule 73    generics_type_range -> complex_type
Rule 74    statement -> decl_statement
Rule 75    statement -> block_statement
Rule 76    statement -> expression_statement
Rule 77    statement -> if_statement
Rule 78    statement -> iteration_statement
Rule 79    statement -> jump_statement
Rule 80    decl_statement -> variable_decl SEMICOLON
Rule 81    decl_statement -> constant_decl SEMICOLON
Rule 82    block_statement -> LBRACE statement_nest RBRACE
Rule 83    statement_nest -> statement statement_nest
Rule 84    statement_nest -> empty
Rule 85    expression_statement -> expression_opt SEMICOLON
Rule 86    expression_opt -> expression
Rule 87    expression_opt -> empty
Rule 88    if_statement -> IF LPAREN expression RPAREN statement statement_else_opt
Rule 89    statement_else_opt -> ELSE statement
Rule 90    statement_else_opt -> empty
Rule 91    iteration_statement -> while_clause
Rule 92    iteration_statement -> for_clause
Rule 93    while_clause -> WHILE LPAREN expression RPAREN statement
Rule 94    for_clause -> FOR LPAREN for_init_statement expression_opt SEMICOLON expression RPAREN statement
Rule 95    for_init_statement -> expression_statement
Rule 96    for_init_statement -> decl_statement
Rule 97    jump_statement -> BREAK SEMICOLON
Rule 98    jump_statement -> CONTINUE SEMICOLON
Rule 99    jump_statement -> RETURN expression_opt SEMICOLON
Rule 100   expression -> assign_expr
Rule 101   expression -> binary_expr
Rule 102   expression -> unary_expr
Rule 103   assign_expr -> expression ASSIGN expression
Rule 104   binary_expr -> expression PLUS expression
Rule 105   binary_expr -> expression MINUS expression
Rule 106   binary_expr -> expression MUL expression
Rule 107   binary_expr -> expression DIV expression
Rule 108   unary_expr -> unary_operation_opt primary_expr
Rule 109   unary_operation_opt -> NOT
Rule 110   unary_operation_opt -> empty
Rule 111   primary_expr -> operand
Rule 112   primary_expr -> member_expr
Rule 113   primary_expr -> index_expr
Rule 114   primary_expr -> cast_expr
Rule 115   primary_expr -> new_expr
Rule 116   primary_expr -> call_expr
Rule 117   operand -> INT
Rule 118   operand -> FLOAT
Rule 119   operand -> DOUBLE
Rule 120   operand -> ID
Rule 121   operand -> LPAREN expression RPAREN
Rule 122   member_expr -> ID DOT ID
Rule 123   index_expr -> primary_expr LBRACKET expression RBRACKET
Rule 124   cast_expr -> LPAREN type_spec RPAREN expression
Rule 125   new_expr -> type_spec LPAREN parameter_list_opt RPAREN
Rule 126   parameter_list_opt -> parameter_list
Rule 127   parameter_list_opt -> empty
Rule 128   call_expr -> primary_expr generics_specialization_list_opt LPAREN parameter_list_opt RPAREN
Rule 129   generics_specialization_list_opt -> generics_specialization_list
Rule 130   generics_specialization_list_opt -> empty
Rule 131   generics_specialization_list -> LANGRBRACKET type_spec type_spec_comma_nest RANGRBRACKET
Rule 132   type_spec_comma_nest -> COMMA type_spec type_spec_comma_nest
Rule 133   type_spec_comma_nest -> empty
Rule 134   parameter_list -> expression expression_comma_nest
Rule 135   expression_comma_nest -> COMMA expression expression_comma_nest
Rule 136   expression_comma_nest -> empty
Rule 137   empty -> <empty>

Terminals, with rules where they appear

AND                  : 
ASSIGN               : 12 17 103
ASSIGNTYPE           : 61
BOOL                 : 28
BREAK                : 97
COLON                : 18 71
COMMA                : 14 64 68 132 135
CONST                : 16
CONTINUE             : 98
DIV                  : 107
DOT                  : 122
DOUBLE               : 119
ELSE                 : 89
EQUAL                : 
F16                  : 37
F32                  : 38
F64                  : 39
FLOAT                : 118
FOR                  : 94
FUNC                 : 20
GENERICS             : 
GREATER              : 
GREATER_EQUAL        : 
HEXADECIMAL          : 
I16                  : 31
I32                  : 33
I64                  : 35
I8                   : 29
ID                   : 12 17 20 40 66 70 120 122 122
IF                   : 88
IN                   : 
INT                  : 42 117
INTERFACE            : 47
LANGRBRACKET         : 67 131
LBRACE               : 46 47 82
LBRACKET             : 41 123
LESS                 : 
LESS_EQUAL           : 
LET                  : 13
LOGICAL_AND          : 
LOGICAL_NOT          : 
LOGICAL_OR           : 
LPAREN               : 58 88 93 94 121 124 125 128
LSHIFT               : 
MINUS                : 105
MOD                  : 
MUL                  : 106
NOT                  : 109
NOT_EQUAL            : 
OR                   : 
OUT                  : 
PLUS                 : 104
RANGRBRACKET         : 67 131
RBRACE               : 46 47 82
RBRACKET             : 41 123
REF                  : 44
RETURN               : 99
RPAREN               : 58 88 93 94 121 124 125 128
RSHIFT               : 
SAMPLER              : 
SEMICOLON            : 5 6 7 8 80 81 85 94 97 98 99
STRING               : 
STRUCT               : 46
TYPE                 : 12
U16                  : 32
U32                  : 34
U64                  : 36
U8                   : 30
VOID                 : 27
WHILE                : 93
XOR                  : 
error                : 

Nonterminals, with rules where they appear

array_type           : 24
assign_expr          : 100
binary_expr          : 101
block_decl           : 2
block_statement      : 21 75
call_expr            : 116
cast_expr            : 114
complex_type         : 23 73
constant_decl        : 7 81
decl_statement       : 74 96
declarator           : 13 14 16 54 56
declarator_nest      : 13 14 16
empty                : 4 15 19 43 49 51 53 60 62 65 69 72 84 87 90 110 127 130 133 136
expression           : 17 86 88 93 94 103 103 104 104 105 105 106 106 107 107 121 123 124 134 135
expression_comma_nest : 134 135
expression_opt       : 85 94 99
expression_statement : 76 95
for_clause           : 92
for_init_statement   : 94
function_decl        : 8 21 57
function_def         : 3 55
function_sign        : 20 45
function_type        : 26
generics_specialization_list : 129
generics_specialization_list_opt : 128
generics_type        : 67 68
generics_type_comma_nest : 67 68
generics_type_list   : 48
generics_type_list_opt : 46 47 58
generics_type_range  : 71
generics_type_range_colon_opt : 70
if_statement         : 77
index_expr           : 113
int_literal_opt      : 41
interface_decl       : 11
interface_member_decl : 52
interface_member_decl_nest : 47 52
iteration_statement  : 78
jump_statement       : 79
member_decl          : 50
member_decl_nest     : 46 50
member_expr          : 112
new_expr             : 115
operand              : 111
parameter_dcel_list  : 59
parameter_decl       : 63 64
parameter_decl_comma_nest : 63 64
parameter_decl_list_opt : 58
parameter_list       : 126
parameter_list_opt   : 125 128
primary_expr         : 108 123 128
reference_type       : 25
simple_type          : 22
start                : 0
statement            : 83 88 89 93 94
statement_else_opt   : 88
statement_nest       : 82 83
struct_decl          : 10
translation_unit     : 1 2 3
type_alias_decl      : 9
type_decl            : 5
type_spec            : 12 18 41 44 61 124 125 131 132
type_spec_assigntype_opt : 58
type_spec_colon_opt  : 17 66
type_spec_comma_nest : 131 132
unary_expr           : 102
unary_operation_opt  : 108
variable_decl        : 6 80
while_clause         : 91

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . translation_unit
    (2) translation_unit -> . block_decl translation_unit
    (3) translation_unit -> . function_def translation_unit
    (4) translation_unit -> . empty
    (5) block_decl -> . type_decl SEMICOLON
    (6) block_decl -> . variable_decl SEMICOLON
    (7) block_decl -> . constant_decl SEMICOLON
    (8) block_decl -> . function_decl SEMICOLON
    (21) function_def -> . function_decl block_statement
    (137) empty -> .
    (9) type_decl -> . type_alias_decl
    (10) type_decl -> . struct_decl
    (11) type_decl -> . interface_decl
    (13) variable_decl -> . LET declarator declarator_nest
    (16) constant_decl -> . CONST declarator declarator_nest
    (20) function_decl -> . FUNC ID function_sign
    (12) type_alias_decl -> . TYPE ID ASSIGN type_spec
    (46) struct_decl -> . STRUCT generics_type_list_opt LBRACE member_decl_nest RBRACE
    (47) interface_decl -> . INTERFACE generics_type_list_opt LBRACE interface_member_decl_nest RBRACE

    $end            reduce using rule 137 (empty -> .)
    LET             shift and go to state 13
    CONST           shift and go to state 14
    FUNC            shift and go to state 15
    TYPE            shift and go to state 16
    STRUCT          shift and go to state 17
    INTERFACE       shift and go to state 18

    start                          shift and go to state 1
    translation_unit               shift and go to state 2
    block_decl                     shift and go to state 3
    function_def                   shift and go to state 4
    empty                          shift and go to state 5
    type_decl                      shift and go to state 6
    variable_decl                  shift and go to state 7
    constant_decl                  shift and go to state 8
    function_decl                  shift and go to state 9
    type_alias_decl                shift and go to state 10
    struct_decl                    shift and go to state 11
    interface_decl                 shift and go to state 12

state 1

    (0) S' -> start .



state 2

    (1) start -> translation_unit .

    $end            reduce using rule 1 (start -> translation_unit .)


state 3

    (2) translation_unit -> block_decl . translation_unit
    (2) translation_unit -> . block_decl translation_unit
    (3) translation_unit -> . function_def translation_unit
    (4) translation_unit -> . empty
    (5) block_decl -> . type_decl SEMICOLON
    (6) block_decl -> . variable_decl SEMICOLON
    (7) block_decl -> . constant_decl SEMICOLON
    (8) block_decl -> . function_decl SEMICOLON
    (21) function_def -> . function_decl block_statement
    (137) empty -> .
    (9) type_decl -> . type_alias_decl
    (10) type_decl -> . struct_decl
    (11) type_decl -> . interface_decl
    (13) variable_decl -> . LET declarator declarator_nest
    (16) constant_decl -> . CONST declarator declarator_nest
    (20) function_decl -> . FUNC ID function_sign
    (12) type_alias_decl -> . TYPE ID ASSIGN type_spec
    (46) struct_decl -> . STRUCT generics_type_list_opt LBRACE member_decl_nest RBRACE
    (47) interface_decl -> . INTERFACE generics_type_list_opt LBRACE interface_member_decl_nest RBRACE

    $end            reduce using rule 137 (empty -> .)
    LET             shift and go to state 13
    CONST           shift and go to state 14
    FUNC            shift and go to state 15
    TYPE            shift and go to state 16
    STRUCT          shift and go to state 17
    INTERFACE       shift and go to state 18

    block_decl                     shift and go to state 3
    translation_unit               shift and go to state 19
    function_def                   shift and go to state 4
    empty                          shift and go to state 5
    type_decl                      shift and go to state 6
    variable_decl                  shift and go to state 7
    constant_decl                  shift and go to state 8
    function_decl                  shift and go to state 9
    type_alias_decl                shift and go to state 10
    struct_decl                    shift and go to state 11
    interface_decl                 shift and go to state 12

state 4

    (3) translation_unit -> function_def . translation_unit
    (2) translation_unit -> . block_decl translation_unit
    (3) translation_unit -> . function_def translation_unit
    (4) translation_unit -> . empty
    (5) block_decl -> . type_decl SEMICOLON
    (6) block_decl -> . variable_decl SEMICOLON
    (7) block_decl -> . constant_decl SEMICOLON
    (8) block_decl -> . function_decl SEMICOLON
    (21) function_def -> . function_decl block_statement
    (137) empty -> .
    (9) type_decl -> . type_alias_decl
    (10) type_decl -> . struct_decl
    (11) type_decl -> . interface_decl
    (13) variable_decl -> . LET declarator declarator_nest
    (16) constant_decl -> . CONST declarator declarator_nest
    (20) function_decl -> . FUNC ID function_sign
    (12) type_alias_decl -> . TYPE ID ASSIGN type_spec
    (46) struct_decl -> . STRUCT generics_type_list_opt LBRACE member_decl_nest RBRACE
    (47) interface_decl -> . INTERFACE generics_type_list_opt LBRACE interface_member_decl_nest RBRACE

    $end            reduce using rule 137 (empty -> .)
    LET             shift and go to state 13
    CONST           shift and go to state 14
    FUNC            shift and go to state 15
    TYPE            shift and go to state 16
    STRUCT          shift and go to state 17
    INTERFACE       shift and go to state 18

    function_def                   shift and go to state 4
    translation_unit               shift and go to state 20
    block_decl                     shift and go to state 3
    empty                          shift and go to state 5
    type_decl                      shift and go to state 6
    variable_decl                  shift and go to state 7
    constant_decl                  shift and go to state 8
    function_decl                  shift and go to state 9
    type_alias_decl                shift and go to state 10
    struct_decl                    shift and go to state 11
    interface_decl                 shift and go to state 12

state 5

    (4) translation_unit -> empty .

    $end            reduce using rule 4 (translation_unit -> empty .)


state 6

    (5) block_decl -> type_decl . SEMICOLON

    SEMICOLON       shift and go to state 21


state 7

    (6) block_decl -> variable_decl . SEMICOLON

    SEMICOLON       shift and go to state 22


state 8

    (7) block_decl -> constant_decl . SEMICOLON

    SEMICOLON       shift and go to state 23


state 9

    (8) block_decl -> function_decl . SEMICOLON
    (21) function_def -> function_decl . block_statement
    (82) block_statement -> . LBRACE statement_nest RBRACE

    SEMICOLON       shift and go to state 24
    LBRACE          shift and go to state 26

    block_statement                shift and go to state 25

state 10

    (9) type_decl -> type_alias_decl .

    SEMICOLON       reduce using rule 9 (type_decl -> type_alias_decl .)


state 11

    (10) type_decl -> struct_decl .

    SEMICOLON       reduce using rule 10 (type_decl -> struct_decl .)


state 12

    (11) type_decl -> interface_decl .

    SEMICOLON       reduce using rule 11 (type_decl -> interface_decl .)


state 13

    (13) variable_decl -> LET . declarator declarator_nest
    (17) declarator -> . ID type_spec_colon_opt ASSIGN expression

    ID              shift and go to state 28

    declarator                     shift and go to state 27

state 14

    (16) constant_decl -> CONST . declarator declarator_nest
    (17) declarator -> . ID type_spec_colon_opt ASSIGN expression

    ID              shift and go to state 28

    declarator                     shift and go to state 29

state 15

    (20) function_decl -> FUNC . ID function_sign

    ID              shift and go to state 30


state 16

    (12) type_alias_decl -> TYPE . ID ASSIGN type_spec

    ID              shift and go to state 31


state 17

    (46) struct_decl -> STRUCT . generics_type_list_opt LBRACE member_decl_nest RBRACE
    (48) generics_type_list_opt -> . generics_type_list
    (49) generics_type_list_opt -> . empty
    (67) generics_type_list -> . LANGRBRACKET generics_type generics_type_comma_nest RANGRBRACKET
    (137) empty -> .

    LANGRBRACKET    shift and go to state 35
    LBRACE          reduce using rule 137 (empty -> .)

    generics_type_list_opt         shift and go to state 32
    generics_type_list             shift and go to state 33
    empty                          shift and go to state 34

state 18

    (47) interface_decl -> INTERFACE . generics_type_list_opt LBRACE interface_member_decl_nest RBRACE
    (48) generics_type_list_opt -> . generics_type_list
    (49) generics_type_list_opt -> . empty
    (67) generics_type_list -> . LANGRBRACKET generics_type generics_type_comma_nest RANGRBRACKET
    (137) empty -> .

    LANGRBRACKET    shift and go to state 35
    LBRACE          reduce using rule 137 (empty -> .)

    generics_type_list_opt         shift and go to state 36
    generics_type_list             shift and go to state 33
    empty                          shift and go to state 34

state 19

    (2) translation_unit -> block_decl translation_unit .

    $end            reduce using rule 2 (translation_unit -> block_decl translation_unit .)


state 20

    (3) translation_unit -> function_def translation_unit .

    $end            reduce using rule 3 (translation_unit -> function_def translation_unit .)


state 21

    (5) block_decl -> type_decl SEMICOLON .

    LET             reduce using rule 5 (block_decl -> type_decl SEMICOLON .)
    CONST           reduce using rule 5 (block_decl -> type_decl SEMICOLON .)
    FUNC            reduce using rule 5 (block_decl -> type_decl SEMICOLON .)
    TYPE            reduce using rule 5 (block_decl -> type_decl SEMICOLON .)
    STRUCT          reduce using rule 5 (block_decl -> type_decl SEMICOLON .)
    INTERFACE       reduce using rule 5 (block_decl -> type_decl SEMICOLON .)
    $end            reduce using rule 5 (block_decl -> type_decl SEMICOLON .)


state 22

    (6) block_decl -> variable_decl SEMICOLON .

    LET             reduce using rule 6 (block_decl -> variable_decl SEMICOLON .)
    CONST           reduce using rule 6 (block_decl -> variable_decl SEMICOLON .)
    FUNC            reduce using rule 6 (block_decl -> variable_decl SEMICOLON .)
    TYPE            reduce using rule 6 (block_decl -> variable_decl SEMICOLON .)
    STRUCT          reduce using rule 6 (block_decl -> variable_decl SEMICOLON .)
    INTERFACE       reduce using rule 6 (block_decl -> variable_decl SEMICOLON .)
    $end            reduce using rule 6 (block_decl -> variable_decl SEMICOLON .)


state 23

    (7) block_decl -> constant_decl SEMICOLON .

    LET             reduce using rule 7 (block_decl -> constant_decl SEMICOLON .)
    CONST           reduce using rule 7 (block_decl -> constant_decl SEMICOLON .)
    FUNC            reduce using rule 7 (block_decl -> constant_decl SEMICOLON .)
    TYPE            reduce using rule 7 (block_decl -> constant_decl SEMICOLON .)
    STRUCT          reduce using rule 7 (block_decl -> constant_decl SEMICOLON .)
    INTERFACE       reduce using rule 7 (block_decl -> constant_decl SEMICOLON .)
    $end            reduce using rule 7 (block_decl -> constant_decl SEMICOLON .)


state 24

    (8) block_decl -> function_decl SEMICOLON .

    LET             reduce using rule 8 (block_decl -> function_decl SEMICOLON .)
    CONST           reduce using rule 8 (block_decl -> function_decl SEMICOLON .)
    FUNC            reduce using rule 8 (block_decl -> function_decl SEMICOLON .)
    TYPE            reduce using rule 8 (block_decl -> function_decl SEMICOLON .)
    STRUCT          reduce using rule 8 (block_decl -> function_decl SEMICOLON .)
    INTERFACE       reduce using rule 8 (block_decl -> function_decl SEMICOLON .)
    $end            reduce using rule 8 (block_decl -> function_decl SEMICOLON .)


state 25

    (21) function_def -> function_decl block_statement .

    LET             reduce using rule 21 (function_def -> function_decl block_statement .)
    CONST           reduce using rule 21 (function_def -> function_decl block_statement .)
    FUNC            reduce using rule 21 (function_def -> function_decl block_statement .)
    TYPE            reduce using rule 21 (function_def -> function_decl block_statement .)
    STRUCT          reduce using rule 21 (function_def -> function_decl block_statement .)
    INTERFACE       reduce using rule 21 (function_def -> function_decl block_statement .)
    $end            reduce using rule 21 (function_def -> function_decl block_statement .)
    ID              reduce using rule 21 (function_def -> function_decl block_statement .)
    RBRACE          reduce using rule 21 (function_def -> function_decl block_statement .)


state 26

    (82) block_statement -> LBRACE . statement_nest RBRACE
    (83) statement_nest -> . statement statement_nest
    (84) statement_nest -> . empty
    (74) statement -> . decl_statement
    (75) statement -> . block_statement
    (76) statement -> . expression_statement
    (77) statement -> . if_statement
    (78) statement -> . iteration_statement
    (79) statement -> . jump_statement
    (137) empty -> .
    (80) decl_statement -> . variable_decl SEMICOLON
    (81) decl_statement -> . constant_decl SEMICOLON
    (82) block_statement -> . LBRACE statement_nest RBRACE
    (85) expression_statement -> . expression_opt SEMICOLON
    (88) if_statement -> . IF LPAREN expression RPAREN statement statement_else_opt
    (91) iteration_statement -> . while_clause
    (92) iteration_statement -> . for_clause
    (97) jump_statement -> . BREAK SEMICOLON
    (98) jump_statement -> . CONTINUE SEMICOLON
    (99) jump_statement -> . RETURN expression_opt SEMICOLON
    (13) variable_decl -> . LET declarator declarator_nest
    (16) constant_decl -> . CONST declarator declarator_nest
    (86) expression_opt -> . expression
    (87) expression_opt -> . empty
    (93) while_clause -> . WHILE LPAREN expression RPAREN statement
    (94) for_clause -> . FOR LPAREN for_init_statement expression_opt SEMICOLON expression RPAREN statement
    (100) expression -> . assign_expr
    (101) expression -> . binary_expr
    (102) expression -> . unary_expr
    (103) assign_expr -> . expression ASSIGN expression
    (104) binary_expr -> . expression PLUS expression
    (105) binary_expr -> . expression MINUS expression
    (106) binary_expr -> . expression MUL expression
    (107) binary_expr -> . expression DIV expression
    (108) unary_expr -> . unary_operation_opt primary_expr
    (109) unary_operation_opt -> . NOT
    (110) unary_operation_opt -> . empty

    RBRACE          reduce using rule 137 (empty -> .)
    SEMICOLON       reduce using rule 137 (empty -> .)
    INT             reduce using rule 137 (empty -> .)
    FLOAT           reduce using rule 137 (empty -> .)
    DOUBLE          reduce using rule 137 (empty -> .)
    ID              reduce using rule 137 (empty -> .)
    LPAREN          reduce using rule 137 (empty -> .)
    VOID            reduce using rule 137 (empty -> .)
    BOOL            reduce using rule 137 (empty -> .)
    I8              reduce using rule 137 (empty -> .)
    U8              reduce using rule 137 (empty -> .)
    I16             reduce using rule 137 (empty -> .)
    U16             reduce using rule 137 (empty -> .)
    I32             reduce using rule 137 (empty -> .)
    U32             reduce using rule 137 (empty -> .)
    I64             reduce using rule 137 (empty -> .)
    U64             reduce using rule 137 (empty -> .)
    F16             reduce using rule 137 (empty -> .)
    F32             reduce using rule 137 (empty -> .)
    F64             reduce using rule 137 (empty -> .)
    LANGRBRACKET    reduce using rule 137 (empty -> .)
    LBRACE          shift and go to state 26
    IF              shift and go to state 49
    BREAK           shift and go to state 53
    CONTINUE        shift and go to state 54
    RETURN          shift and go to state 55
    LET             shift and go to state 13
    CONST           shift and go to state 14
    WHILE           shift and go to state 56
    FOR             shift and go to state 57
    NOT             shift and go to state 62

    statement_nest                 shift and go to state 37
    statement                      shift and go to state 38
    empty                          shift and go to state 39
    decl_statement                 shift and go to state 40
    block_statement                shift and go to state 41
    expression_statement           shift and go to state 42
    if_statement                   shift and go to state 43
    iteration_statement            shift and go to state 44
    jump_statement                 shift and go to state 45
    variable_decl                  shift and go to state 46
    constant_decl                  shift and go to state 47
    expression_opt                 shift and go to state 48
    expression                     shift and go to state 50
    while_clause                   shift and go to state 51
    for_clause                     shift and go to state 52
    assign_expr                    shift and go to state 58
    binary_expr                    shift and go to state 59
    unary_expr                     shift and go to state 60
    unary_operation_opt            shift and go to state 61

state 27

    (13) variable_decl -> LET declarator . declarator_nest
    (14) declarator_nest -> . COMMA declarator declarator_nest
    (15) declarator_nest -> . empty
    (137) empty -> .

    COMMA           shift and go to state 64
    SEMICOLON       reduce using rule 137 (empty -> .)

    declarator_nest                shift and go to state 63
    empty                          shift and go to state 65

state 28

    (17) declarator -> ID . type_spec_colon_opt ASSIGN expression
    (18) type_spec_colon_opt -> . COLON type_spec
    (19) type_spec_colon_opt -> . empty
    (137) empty -> .

    COLON           shift and go to state 67
    ASSIGN          reduce using rule 137 (empty -> .)

    type_spec_colon_opt            shift and go to state 66
    empty                          shift and go to state 68

state 29

    (16) constant_decl -> CONST declarator . declarator_nest
    (14) declarator_nest -> . COMMA declarator declarator_nest
    (15) declarator_nest -> . empty
    (137) empty -> .

    COMMA           shift and go to state 64
    SEMICOLON       reduce using rule 137 (empty -> .)

    declarator_nest                shift and go to state 69
    empty                          shift and go to state 65

state 30

    (20) function_decl -> FUNC ID . function_sign
    (58) function_sign -> . generics_type_list_opt LPAREN parameter_decl_list_opt RPAREN type_spec_assigntype_opt
    (48) generics_type_list_opt -> . generics_type_list
    (49) generics_type_list_opt -> . empty
    (67) generics_type_list -> . LANGRBRACKET generics_type generics_type_comma_nest RANGRBRACKET
    (137) empty -> .

    LANGRBRACKET    shift and go to state 35
    LPAREN          reduce using rule 137 (empty -> .)

    function_sign                  shift and go to state 70
    generics_type_list_opt         shift and go to state 71
    generics_type_list             shift and go to state 33
    empty                          shift and go to state 34

state 31

    (12) type_alias_decl -> TYPE ID . ASSIGN type_spec

    ASSIGN          shift and go to state 72


state 32

    (46) struct_decl -> STRUCT generics_type_list_opt . LBRACE member_decl_nest RBRACE

    LBRACE          shift and go to state 73


state 33

    (48) generics_type_list_opt -> generics_type_list .

    LBRACE          reduce using rule 48 (generics_type_list_opt -> generics_type_list .)
    LPAREN          reduce using rule 48 (generics_type_list_opt -> generics_type_list .)


state 34

    (49) generics_type_list_opt -> empty .

    LBRACE          reduce using rule 49 (generics_type_list_opt -> empty .)
    LPAREN          reduce using rule 49 (generics_type_list_opt -> empty .)


state 35

    (67) generics_type_list -> LANGRBRACKET . generics_type generics_type_comma_nest RANGRBRACKET
    (70) generics_type -> . ID generics_type_range_colon_opt

    ID              shift and go to state 75

    generics_type                  shift and go to state 74

state 36

    (47) interface_decl -> INTERFACE generics_type_list_opt . LBRACE interface_member_decl_nest RBRACE

    LBRACE          shift and go to state 76


state 37

    (82) block_statement -> LBRACE statement_nest . RBRACE

    RBRACE          shift and go to state 77


state 38

    (83) statement_nest -> statement . statement_nest
    (83) statement_nest -> . statement statement_nest
    (84) statement_nest -> . empty
    (74) statement -> . decl_statement
    (75) statement -> . block_statement
    (76) statement -> . expression_statement
    (77) statement -> . if_statement
    (78) statement -> . iteration_statement
    (79) statement -> . jump_statement
    (137) empty -> .
    (80) decl_statement -> . variable_decl SEMICOLON
    (81) decl_statement -> . constant_decl SEMICOLON
    (82) block_statement -> . LBRACE statement_nest RBRACE
    (85) expression_statement -> . expression_opt SEMICOLON
    (88) if_statement -> . IF LPAREN expression RPAREN statement statement_else_opt
    (91) iteration_statement -> . while_clause
    (92) iteration_statement -> . for_clause
    (97) jump_statement -> . BREAK SEMICOLON
    (98) jump_statement -> . CONTINUE SEMICOLON
    (99) jump_statement -> . RETURN expression_opt SEMICOLON
    (13) variable_decl -> . LET declarator declarator_nest
    (16) constant_decl -> . CONST declarator declarator_nest
    (86) expression_opt -> . expression
    (87) expression_opt -> . empty
    (93) while_clause -> . WHILE LPAREN expression RPAREN statement
    (94) for_clause -> . FOR LPAREN for_init_statement expression_opt SEMICOLON expression RPAREN statement
    (100) expression -> . assign_expr
    (101) expression -> . binary_expr
    (102) expression -> . unary_expr
    (103) assign_expr -> . expression ASSIGN expression
    (104) binary_expr -> . expression PLUS expression
    (105) binary_expr -> . expression MINUS expression
    (106) binary_expr -> . expression MUL expression
    (107) binary_expr -> . expression DIV expression
    (108) unary_expr -> . unary_operation_opt primary_expr
    (109) unary_operation_opt -> . NOT
    (110) unary_operation_opt -> . empty

    RBRACE          reduce using rule 137 (empty -> .)
    SEMICOLON       reduce using rule 137 (empty -> .)
    INT             reduce using rule 137 (empty -> .)
    FLOAT           reduce using rule 137 (empty -> .)
    DOUBLE          reduce using rule 137 (empty -> .)
    ID              reduce using rule 137 (empty -> .)
    LPAREN          reduce using rule 137 (empty -> .)
    VOID            reduce using rule 137 (empty -> .)
    BOOL            reduce using rule 137 (empty -> .)
    I8              reduce using rule 137 (empty -> .)
    U8              reduce using rule 137 (empty -> .)
    I16             reduce using rule 137 (empty -> .)
    U16             reduce using rule 137 (empty -> .)
    I32             reduce using rule 137 (empty -> .)
    U32             reduce using rule 137 (empty -> .)
    I64             reduce using rule 137 (empty -> .)
    U64             reduce using rule 137 (empty -> .)
    F16             reduce using rule 137 (empty -> .)
    F32             reduce using rule 137 (empty -> .)
    F64             reduce using rule 137 (empty -> .)
    LANGRBRACKET    reduce using rule 137 (empty -> .)
    LBRACE          shift and go to state 26
    IF              shift and go to state 49
    BREAK           shift and go to state 53
    CONTINUE        shift and go to state 54
    RETURN          shift and go to state 55
    LET             shift and go to state 13
    CONST           shift and go to state 14
    WHILE           shift and go to state 56
    FOR             shift and go to state 57
    NOT             shift and go to state 62

    statement                      shift and go to state 38
    statement_nest                 shift and go to state 78
    empty                          shift and go to state 39
    decl_statement                 shift and go to state 40
    block_statement                shift and go to state 41
    expression_statement           shift and go to state 42
    if_statement                   shift and go to state 43
    iteration_statement            shift and go to state 44
    jump_statement                 shift and go to state 45
    variable_decl                  shift and go to state 46
    constant_decl                  shift and go to state 47
    expression_opt                 shift and go to state 48
    expression                     shift and go to state 50
    while_clause                   shift and go to state 51
    for_clause                     shift and go to state 52
    assign_expr                    shift and go to state 58
    binary_expr                    shift and go to state 59
    unary_expr                     shift and go to state 60
    unary_operation_opt            shift and go to state 61

state 39

    (84) statement_nest -> empty .
    (87) expression_opt -> empty .
    (110) unary_operation_opt -> empty .

    RBRACE          reduce using rule 84 (statement_nest -> empty .)
    SEMICOLON       reduce using rule 87 (expression_opt -> empty .)
    INT             reduce using rule 110 (unary_operation_opt -> empty .)
    FLOAT           reduce using rule 110 (unary_operation_opt -> empty .)
    DOUBLE          reduce using rule 110 (unary_operation_opt -> empty .)
    ID              reduce using rule 110 (unary_operation_opt -> empty .)
    LPAREN          reduce using rule 110 (unary_operation_opt -> empty .)
    VOID            reduce using rule 110 (unary_operation_opt -> empty .)
    BOOL            reduce using rule 110 (unary_operation_opt -> empty .)
    I8              reduce using rule 110 (unary_operation_opt -> empty .)
    U8              reduce using rule 110 (unary_operation_opt -> empty .)
    I16             reduce using rule 110 (unary_operation_opt -> empty .)
    U16             reduce using rule 110 (unary_operation_opt -> empty .)
    I32             reduce using rule 110 (unary_operation_opt -> empty .)
    U32             reduce using rule 110 (unary_operation_opt -> empty .)
    I64             reduce using rule 110 (unary_operation_opt -> empty .)
    U64             reduce using rule 110 (unary_operation_opt -> empty .)
    F16             reduce using rule 110 (unary_operation_opt -> empty .)
    F32             reduce using rule 110 (unary_operation_opt -> empty .)
    F64             reduce using rule 110 (unary_operation_opt -> empty .)
    LANGRBRACKET    reduce using rule 110 (unary_operation_opt -> empty .)


state 40

    (74) statement -> decl_statement .

    LBRACE          reduce using rule 74 (statement -> decl_statement .)
    IF              reduce using rule 74 (statement -> decl_statement .)
    BREAK           reduce using rule 74 (statement -> decl_statement .)
    CONTINUE        reduce using rule 74 (statement -> decl_statement .)
    RETURN          reduce using rule 74 (statement -> decl_statement .)
    LET             reduce using rule 74 (statement -> decl_statement .)
    CONST           reduce using rule 74 (statement -> decl_statement .)
    WHILE           reduce using rule 74 (statement -> decl_statement .)
    FOR             reduce using rule 74 (statement -> decl_statement .)
    NOT             reduce using rule 74 (statement -> decl_statement .)
    SEMICOLON       reduce using rule 74 (statement -> decl_statement .)
    INT             reduce using rule 74 (statement -> decl_statement .)
    FLOAT           reduce using rule 74 (statement -> decl_statement .)
    DOUBLE          reduce using rule 74 (statement -> decl_statement .)
    ID              reduce using rule 74 (statement -> decl_statement .)
    LPAREN          reduce using rule 74 (statement -> decl_statement .)
    VOID            reduce using rule 74 (statement -> decl_statement .)
    BOOL            reduce using rule 74 (statement -> decl_statement .)
    I8              reduce using rule 74 (statement -> decl_statement .)
    U8              reduce using rule 74 (statement -> decl_statement .)
    I16             reduce using rule 74 (statement -> decl_statement .)
    U16             reduce using rule 74 (statement -> decl_statement .)
    I32             reduce using rule 74 (statement -> decl_statement .)
    U32             reduce using rule 74 (statement -> decl_statement .)
    I64             reduce using rule 74 (statement -> decl_statement .)
    U64             reduce using rule 74 (statement -> decl_statement .)
    F16             reduce using rule 74 (statement -> decl_statement .)
    F32             reduce using rule 74 (statement -> decl_statement .)
    F64             reduce using rule 74 (statement -> decl_statement .)
    LANGRBRACKET    reduce using rule 74 (statement -> decl_statement .)
    RBRACE          reduce using rule 74 (statement -> decl_statement .)
    ELSE            reduce using rule 74 (statement -> decl_statement .)


state 41

    (75) statement -> block_statement .

    LBRACE          reduce using rule 75 (statement -> block_statement .)
    IF              reduce using rule 75 (statement -> block_statement .)
    BREAK           reduce using rule 75 (statement -> block_statement .)
    CONTINUE        reduce using rule 75 (statement -> block_statement .)
    RETURN          reduce using rule 75 (statement -> block_statement .)
    LET             reduce using rule 75 (statement -> block_statement .)
    CONST           reduce using rule 75 (statement -> block_statement .)
    WHILE           reduce using rule 75 (statement -> block_statement .)
    FOR             reduce using rule 75 (statement -> block_statement .)
    NOT             reduce using rule 75 (statement -> block_statement .)
    SEMICOLON       reduce using rule 75 (statement -> block_statement .)
    INT             reduce using rule 75 (statement -> block_statement .)
    FLOAT           reduce using rule 75 (statement -> block_statement .)
    DOUBLE          reduce using rule 75 (statement -> block_statement .)
    ID              reduce using rule 75 (statement -> block_statement .)
    LPAREN          reduce using rule 75 (statement -> block_statement .)
    VOID            reduce using rule 75 (statement -> block_statement .)
    BOOL            reduce using rule 75 (statement -> block_statement .)
    I8              reduce using rule 75 (statement -> block_statement .)
    U8              reduce using rule 75 (statement -> block_statement .)
    I16             reduce using rule 75 (statement -> block_statement .)
    U16             reduce using rule 75 (statement -> block_statement .)
    I32             reduce using rule 75 (statement -> block_statement .)
    U32             reduce using rule 75 (statement -> block_statement .)
    I64             reduce using rule 75 (statement -> block_statement .)
    U64             reduce using rule 75 (statement -> block_statement .)
    F16             reduce using rule 75 (statement -> block_statement .)
    F32             reduce using rule 75 (statement -> block_statement .)
    F64             reduce using rule 75 (statement -> block_statement .)
    LANGRBRACKET    reduce using rule 75 (statement -> block_statement .)
    RBRACE          reduce using rule 75 (statement -> block_statement .)
    ELSE            reduce using rule 75 (statement -> block_statement .)


state 42

    (76) statement -> expression_statement .

    LBRACE          reduce using rule 76 (statement -> expression_statement .)
    IF              reduce using rule 76 (statement -> expression_statement .)
    BREAK           reduce using rule 76 (statement -> expression_statement .)
    CONTINUE        reduce using rule 76 (statement -> expression_statement .)
    RETURN          reduce using rule 76 (statement -> expression_statement .)
    LET             reduce using rule 76 (statement -> expression_statement .)
    CONST           reduce using rule 76 (statement -> expression_statement .)
    WHILE           reduce using rule 76 (statement -> expression_statement .)
    FOR             reduce using rule 76 (statement -> expression_statement .)
    NOT             reduce using rule 76 (statement -> expression_statement .)
    SEMICOLON       reduce using rule 76 (statement -> expression_statement .)
    INT             reduce using rule 76 (statement -> expression_statement .)
    FLOAT           reduce using rule 76 (statement -> expression_statement .)
    DOUBLE          reduce using rule 76 (statement -> expression_statement .)
    ID              reduce using rule 76 (statement -> expression_statement .)
    LPAREN          reduce using rule 76 (statement -> expression_statement .)
    VOID            reduce using rule 76 (statement -> expression_statement .)
    BOOL            reduce using rule 76 (statement -> expression_statement .)
    I8              reduce using rule 76 (statement -> expression_statement .)
    U8              reduce using rule 76 (statement -> expression_statement .)
    I16             reduce using rule 76 (statement -> expression_statement .)
    U16             reduce using rule 76 (statement -> expression_statement .)
    I32             reduce using rule 76 (statement -> expression_statement .)
    U32             reduce using rule 76 (statement -> expression_statement .)
    I64             reduce using rule 76 (statement -> expression_statement .)
    U64             reduce using rule 76 (statement -> expression_statement .)
    F16             reduce using rule 76 (statement -> expression_statement .)
    F32             reduce using rule 76 (statement -> expression_statement .)
    F64             reduce using rule 76 (statement -> expression_statement .)
    LANGRBRACKET    reduce using rule 76 (statement -> expression_statement .)
    RBRACE          reduce using rule 76 (statement -> expression_statement .)
    ELSE            reduce using rule 76 (statement -> expression_statement .)


state 43

    (77) statement -> if_statement .

    LBRACE          reduce using rule 77 (statement -> if_statement .)
    IF              reduce using rule 77 (statement -> if_statement .)
    BREAK           reduce using rule 77 (statement -> if_statement .)
    CONTINUE        reduce using rule 77 (statement -> if_statement .)
    RETURN          reduce using rule 77 (statement -> if_statement .)
    LET             reduce using rule 77 (statement -> if_statement .)
    CONST           reduce using rule 77 (statement -> if_statement .)
    WHILE           reduce using rule 77 (statement -> if_statement .)
    FOR             reduce using rule 77 (statement -> if_statement .)
    NOT             reduce using rule 77 (statement -> if_statement .)
    SEMICOLON       reduce using rule 77 (statement -> if_statement .)
    INT             reduce using rule 77 (statement -> if_statement .)
    FLOAT           reduce using rule 77 (statement -> if_statement .)
    DOUBLE          reduce using rule 77 (statement -> if_statement .)
    ID              reduce using rule 77 (statement -> if_statement .)
    LPAREN          reduce using rule 77 (statement -> if_statement .)
    VOID            reduce using rule 77 (statement -> if_statement .)
    BOOL            reduce using rule 77 (statement -> if_statement .)
    I8              reduce using rule 77 (statement -> if_statement .)
    U8              reduce using rule 77 (statement -> if_statement .)
    I16             reduce using rule 77 (statement -> if_statement .)
    U16             reduce using rule 77 (statement -> if_statement .)
    I32             reduce using rule 77 (statement -> if_statement .)
    U32             reduce using rule 77 (statement -> if_statement .)
    I64             reduce using rule 77 (statement -> if_statement .)
    U64             reduce using rule 77 (statement -> if_statement .)
    F16             reduce using rule 77 (statement -> if_statement .)
    F32             reduce using rule 77 (statement -> if_statement .)
    F64             reduce using rule 77 (statement -> if_statement .)
    LANGRBRACKET    reduce using rule 77 (statement -> if_statement .)
    RBRACE          reduce using rule 77 (statement -> if_statement .)
    ELSE            reduce using rule 77 (statement -> if_statement .)


state 44

    (78) statement -> iteration_statement .

    LBRACE          reduce using rule 78 (statement -> iteration_statement .)
    IF              reduce using rule 78 (statement -> iteration_statement .)
    BREAK           reduce using rule 78 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 78 (statement -> iteration_statement .)
    RETURN          reduce using rule 78 (statement -> iteration_statement .)
    LET             reduce using rule 78 (statement -> iteration_statement .)
    CONST           reduce using rule 78 (statement -> iteration_statement .)
    WHILE           reduce using rule 78 (statement -> iteration_statement .)
    FOR             reduce using rule 78 (statement -> iteration_statement .)
    NOT             reduce using rule 78 (statement -> iteration_statement .)
    SEMICOLON       reduce using rule 78 (statement -> iteration_statement .)
    INT             reduce using rule 78 (statement -> iteration_statement .)
    FLOAT           reduce using rule 78 (statement -> iteration_statement .)
    DOUBLE          reduce using rule 78 (statement -> iteration_statement .)
    ID              reduce using rule 78 (statement -> iteration_statement .)
    LPAREN          reduce using rule 78 (statement -> iteration_statement .)
    VOID            reduce using rule 78 (statement -> iteration_statement .)
    BOOL            reduce using rule 78 (statement -> iteration_statement .)
    I8              reduce using rule 78 (statement -> iteration_statement .)
    U8              reduce using rule 78 (statement -> iteration_statement .)
    I16             reduce using rule 78 (statement -> iteration_statement .)
    U16             reduce using rule 78 (statement -> iteration_statement .)
    I32             reduce using rule 78 (statement -> iteration_statement .)
    U32             reduce using rule 78 (statement -> iteration_statement .)
    I64             reduce using rule 78 (statement -> iteration_statement .)
    U64             reduce using rule 78 (statement -> iteration_statement .)
    F16             reduce using rule 78 (statement -> iteration_statement .)
    F32             reduce using rule 78 (statement -> iteration_statement .)
    F64             reduce using rule 78 (statement -> iteration_statement .)
    LANGRBRACKET    reduce using rule 78 (statement -> iteration_statement .)
    RBRACE          reduce using rule 78 (statement -> iteration_statement .)
    ELSE            reduce using rule 78 (statement -> iteration_statement .)


state 45

    (79) statement -> jump_statement .

    LBRACE          reduce using rule 79 (statement -> jump_statement .)
    IF              reduce using rule 79 (statement -> jump_statement .)
    BREAK           reduce using rule 79 (statement -> jump_statement .)
    CONTINUE        reduce using rule 79 (statement -> jump_statement .)
    RETURN          reduce using rule 79 (statement -> jump_statement .)
    LET             reduce using rule 79 (statement -> jump_statement .)
    CONST           reduce using rule 79 (statement -> jump_statement .)
    WHILE           reduce using rule 79 (statement -> jump_statement .)
    FOR             reduce using rule 79 (statement -> jump_statement .)
    NOT             reduce using rule 79 (statement -> jump_statement .)
    SEMICOLON       reduce using rule 79 (statement -> jump_statement .)
    INT             reduce using rule 79 (statement -> jump_statement .)
    FLOAT           reduce using rule 79 (statement -> jump_statement .)
    DOUBLE          reduce using rule 79 (statement -> jump_statement .)
    ID              reduce using rule 79 (statement -> jump_statement .)
    LPAREN          reduce using rule 79 (statement -> jump_statement .)
    VOID            reduce using rule 79 (statement -> jump_statement .)
    BOOL            reduce using rule 79 (statement -> jump_statement .)
    I8              reduce using rule 79 (statement -> jump_statement .)
    U8              reduce using rule 79 (statement -> jump_statement .)
    I16             reduce using rule 79 (statement -> jump_statement .)
    U16             reduce using rule 79 (statement -> jump_statement .)
    I32             reduce using rule 79 (statement -> jump_statement .)
    U32             reduce using rule 79 (statement -> jump_statement .)
    I64             reduce using rule 79 (statement -> jump_statement .)
    U64             reduce using rule 79 (statement -> jump_statement .)
    F16             reduce using rule 79 (statement -> jump_statement .)
    F32             reduce using rule 79 (statement -> jump_statement .)
    F64             reduce using rule 79 (statement -> jump_statement .)
    LANGRBRACKET    reduce using rule 79 (statement -> jump_statement .)
    RBRACE          reduce using rule 79 (statement -> jump_statement .)
    ELSE            reduce using rule 79 (statement -> jump_statement .)


state 46

    (80) decl_statement -> variable_decl . SEMICOLON

    SEMICOLON       shift and go to state 79


state 47

    (81) decl_statement -> constant_decl . SEMICOLON

    SEMICOLON       shift and go to state 80


state 48

    (85) expression_statement -> expression_opt . SEMICOLON

    SEMICOLON       shift and go to state 81


state 49

    (88) if_statement -> IF . LPAREN expression RPAREN statement statement_else_opt

    LPAREN          shift and go to state 82


state 50

    (86) expression_opt -> expression .
    (103) assign_expr -> expression . ASSIGN expression
    (104) binary_expr -> expression . PLUS expression
    (105) binary_expr -> expression . MINUS expression
    (106) binary_expr -> expression . MUL expression
    (107) binary_expr -> expression . DIV expression

    SEMICOLON       reduce using rule 86 (expression_opt -> expression .)
    ASSIGN          shift and go to state 83
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MUL             shift and go to state 86
    DIV             shift and go to state 87


state 51

    (91) iteration_statement -> while_clause .

    LBRACE          reduce using rule 91 (iteration_statement -> while_clause .)
    IF              reduce using rule 91 (iteration_statement -> while_clause .)
    BREAK           reduce using rule 91 (iteration_statement -> while_clause .)
    CONTINUE        reduce using rule 91 (iteration_statement -> while_clause .)
    RETURN          reduce using rule 91 (iteration_statement -> while_clause .)
    LET             reduce using rule 91 (iteration_statement -> while_clause .)
    CONST           reduce using rule 91 (iteration_statement -> while_clause .)
    WHILE           reduce using rule 91 (iteration_statement -> while_clause .)
    FOR             reduce using rule 91 (iteration_statement -> while_clause .)
    NOT             reduce using rule 91 (iteration_statement -> while_clause .)
    SEMICOLON       reduce using rule 91 (iteration_statement -> while_clause .)
    INT             reduce using rule 91 (iteration_statement -> while_clause .)
    FLOAT           reduce using rule 91 (iteration_statement -> while_clause .)
    DOUBLE          reduce using rule 91 (iteration_statement -> while_clause .)
    ID              reduce using rule 91 (iteration_statement -> while_clause .)
    LPAREN          reduce using rule 91 (iteration_statement -> while_clause .)
    VOID            reduce using rule 91 (iteration_statement -> while_clause .)
    BOOL            reduce using rule 91 (iteration_statement -> while_clause .)
    I8              reduce using rule 91 (iteration_statement -> while_clause .)
    U8              reduce using rule 91 (iteration_statement -> while_clause .)
    I16             reduce using rule 91 (iteration_statement -> while_clause .)
    U16             reduce using rule 91 (iteration_statement -> while_clause .)
    I32             reduce using rule 91 (iteration_statement -> while_clause .)
    U32             reduce using rule 91 (iteration_statement -> while_clause .)
    I64             reduce using rule 91 (iteration_statement -> while_clause .)
    U64             reduce using rule 91 (iteration_statement -> while_clause .)
    F16             reduce using rule 91 (iteration_statement -> while_clause .)
    F32             reduce using rule 91 (iteration_statement -> while_clause .)
    F64             reduce using rule 91 (iteration_statement -> while_clause .)
    LANGRBRACKET    reduce using rule 91 (iteration_statement -> while_clause .)
    RBRACE          reduce using rule 91 (iteration_statement -> while_clause .)
    ELSE            reduce using rule 91 (iteration_statement -> while_clause .)


state 52

    (92) iteration_statement -> for_clause .

    LBRACE          reduce using rule 92 (iteration_statement -> for_clause .)
    IF              reduce using rule 92 (iteration_statement -> for_clause .)
    BREAK           reduce using rule 92 (iteration_statement -> for_clause .)
    CONTINUE        reduce using rule 92 (iteration_statement -> for_clause .)
    RETURN          reduce using rule 92 (iteration_statement -> for_clause .)
    LET             reduce using rule 92 (iteration_statement -> for_clause .)
    CONST           reduce using rule 92 (iteration_statement -> for_clause .)
    WHILE           reduce using rule 92 (iteration_statement -> for_clause .)
    FOR             reduce using rule 92 (iteration_statement -> for_clause .)
    NOT             reduce using rule 92 (iteration_statement -> for_clause .)
    SEMICOLON       reduce using rule 92 (iteration_statement -> for_clause .)
    INT             reduce using rule 92 (iteration_statement -> for_clause .)
    FLOAT           reduce using rule 92 (iteration_statement -> for_clause .)
    DOUBLE          reduce using rule 92 (iteration_statement -> for_clause .)
    ID              reduce using rule 92 (iteration_statement -> for_clause .)
    LPAREN          reduce using rule 92 (iteration_statement -> for_clause .)
    VOID            reduce using rule 92 (iteration_statement -> for_clause .)
    BOOL            reduce using rule 92 (iteration_statement -> for_clause .)
    I8              reduce using rule 92 (iteration_statement -> for_clause .)
    U8              reduce using rule 92 (iteration_statement -> for_clause .)
    I16             reduce using rule 92 (iteration_statement -> for_clause .)
    U16             reduce using rule 92 (iteration_statement -> for_clause .)
    I32             reduce using rule 92 (iteration_statement -> for_clause .)
    U32             reduce using rule 92 (iteration_statement -> for_clause .)
    I64             reduce using rule 92 (iteration_statement -> for_clause .)
    U64             reduce using rule 92 (iteration_statement -> for_clause .)
    F16             reduce using rule 92 (iteration_statement -> for_clause .)
    F32             reduce using rule 92 (iteration_statement -> for_clause .)
    F64             reduce using rule 92 (iteration_statement -> for_clause .)
    LANGRBRACKET    reduce using rule 92 (iteration_statement -> for_clause .)
    RBRACE          reduce using rule 92 (iteration_statement -> for_clause .)
    ELSE            reduce using rule 92 (iteration_statement -> for_clause .)


state 53

    (97) jump_statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 88


state 54

    (98) jump_statement -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 89


state 55

    (99) jump_statement -> RETURN . expression_opt SEMICOLON
    (86) expression_opt -> . expression
    (87) expression_opt -> . empty
    (100) expression -> . assign_expr
    (101) expression -> . binary_expr
    (102) expression -> . unary_expr
    (137) empty -> .
    (103) assign_expr -> . expression ASSIGN expression
    (104) binary_expr -> . expression PLUS expression
    (105) binary_expr -> . expression MINUS expression
    (106) binary_expr -> . expression MUL expression
    (107) binary_expr -> . expression DIV expression
    (108) unary_expr -> . unary_operation_opt primary_expr
    (109) unary_operation_opt -> . NOT
    (110) unary_operation_opt -> . empty

    SEMICOLON       reduce using rule 137 (empty -> .)
    INT             reduce using rule 137 (empty -> .)
    FLOAT           reduce using rule 137 (empty -> .)
    DOUBLE          reduce using rule 137 (empty -> .)
    ID              reduce using rule 137 (empty -> .)
    LPAREN          reduce using rule 137 (empty -> .)
    VOID            reduce using rule 137 (empty -> .)
    BOOL            reduce using rule 137 (empty -> .)
    I8              reduce using rule 137 (empty -> .)
    U8              reduce using rule 137 (empty -> .)
    I16             reduce using rule 137 (empty -> .)
    U16             reduce using rule 137 (empty -> .)
    I32             reduce using rule 137 (empty -> .)
    U32             reduce using rule 137 (empty -> .)
    I64             reduce using rule 137 (empty -> .)
    U64             reduce using rule 137 (empty -> .)
    F16             reduce using rule 137 (empty -> .)
    F32             reduce using rule 137 (empty -> .)
    F64             reduce using rule 137 (empty -> .)
    LANGRBRACKET    reduce using rule 137 (empty -> .)
    NOT             shift and go to state 62

    expression_opt                 shift and go to state 90
    expression                     shift and go to state 50
    empty                          shift and go to state 91
    assign_expr                    shift and go to state 58
    binary_expr                    shift and go to state 59
    unary_expr                     shift and go to state 60
    unary_operation_opt            shift and go to state 61

state 56

    (93) while_clause -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 92


state 57

    (94) for_clause -> FOR . LPAREN for_init_statement expression_opt SEMICOLON expression RPAREN statement

    LPAREN          shift and go to state 93


state 58

    (100) expression -> assign_expr .

    ASSIGN          reduce using rule 100 (expression -> assign_expr .)
    PLUS            reduce using rule 100 (expression -> assign_expr .)
    MINUS           reduce using rule 100 (expression -> assign_expr .)
    MUL             reduce using rule 100 (expression -> assign_expr .)
    DIV             reduce using rule 100 (expression -> assign_expr .)
    SEMICOLON       reduce using rule 100 (expression -> assign_expr .)
    RPAREN          reduce using rule 100 (expression -> assign_expr .)
    LBRACKET        reduce using rule 100 (expression -> assign_expr .)
    LANGRBRACKET    reduce using rule 100 (expression -> assign_expr .)
    LPAREN          reduce using rule 100 (expression -> assign_expr .)
    COMMA           reduce using rule 100 (expression -> assign_expr .)
    ID              reduce using rule 100 (expression -> assign_expr .)
    FUNC            reduce using rule 100 (expression -> assign_expr .)
    RBRACE          reduce using rule 100 (expression -> assign_expr .)
    RBRACKET        reduce using rule 100 (expression -> assign_expr .)


state 59

    (101) expression -> binary_expr .

    ASSIGN          reduce using rule 101 (expression -> binary_expr .)
    PLUS            reduce using rule 101 (expression -> binary_expr .)
    MINUS           reduce using rule 101 (expression -> binary_expr .)
    MUL             reduce using rule 101 (expression -> binary_expr .)
    DIV             reduce using rule 101 (expression -> binary_expr .)
    SEMICOLON       reduce using rule 101 (expression -> binary_expr .)
    RPAREN          reduce using rule 101 (expression -> binary_expr .)
    LBRACKET        reduce using rule 101 (expression -> binary_expr .)
    LANGRBRACKET    reduce using rule 101 (expression -> binary_expr .)
    LPAREN          reduce using rule 101 (expression -> binary_expr .)
    COMMA           reduce using rule 101 (expression -> binary_expr .)
    ID              reduce using rule 101 (expression -> binary_expr .)
    FUNC            reduce using rule 101 (expression -> binary_expr .)
    RBRACE          reduce using rule 101 (expression -> binary_expr .)
    RBRACKET        reduce using rule 101 (expression -> binary_expr .)


state 60

    (102) expression -> unary_expr .

    ASSIGN          reduce using rule 102 (expression -> unary_expr .)
    PLUS            reduce using rule 102 (expression -> unary_expr .)
    MINUS           reduce using rule 102 (expression -> unary_expr .)
    MUL             reduce using rule 102 (expression -> unary_expr .)
    DIV             reduce using rule 102 (expression -> unary_expr .)
    SEMICOLON       reduce using rule 102 (expression -> unary_expr .)
    RPAREN          reduce using rule 102 (expression -> unary_expr .)
    LBRACKET        reduce using rule 102 (expression -> unary_expr .)
    LANGRBRACKET    reduce using rule 102 (expression -> unary_expr .)
    LPAREN          reduce using rule 102 (expression -> unary_expr .)
    COMMA           reduce using rule 102 (expression -> unary_expr .)
    ID              reduce using rule 102 (expression -> unary_expr .)
    FUNC            reduce using rule 102 (expression -> unary_expr .)
    RBRACE          reduce using rule 102 (expression -> unary_expr .)
    RBRACKET        reduce using rule 102 (expression -> unary_expr .)


state 61

    (108) unary_expr -> unary_operation_opt . primary_expr
    (111) primary_expr -> . operand
    (112) primary_expr -> . member_expr
    (113) primary_expr -> . index_expr
    (114) primary_expr -> . cast_expr
    (115) primary_expr -> . new_expr
    (116) primary_expr -> . call_expr
    (117) operand -> . INT
    (118) operand -> . FLOAT
    (119) operand -> . DOUBLE
    (120) operand -> . ID
    (121) operand -> . LPAREN expression RPAREN
    (122) member_expr -> . ID DOT ID
    (123) index_expr -> . primary_expr LBRACKET expression RBRACKET
    (124) cast_expr -> . LPAREN type_spec RPAREN expression
    (125) new_expr -> . type_spec LPAREN parameter_list_opt RPAREN
    (128) call_expr -> . primary_expr generics_specialization_list_opt LPAREN parameter_list_opt RPAREN
    (22) type_spec -> . simple_type
    (23) type_spec -> . complex_type
    (24) type_spec -> . array_type
    (25) type_spec -> . reference_type
    (26) type_spec -> . function_type
    (27) simple_type -> . VOID
    (28) simple_type -> . BOOL
    (29) simple_type -> . I8
    (30) simple_type -> . U8
    (31) simple_type -> . I16
    (32) simple_type -> . U16
    (33) simple_type -> . I32
    (34) simple_type -> . U32
    (35) simple_type -> . I64
    (36) simple_type -> . U64
    (37) simple_type -> . F16
    (38) simple_type -> . F32
    (39) simple_type -> . F64
    (40) complex_type -> . ID
    (41) array_type -> . type_spec LBRACKET int_literal_opt RBRACKET
    (44) reference_type -> . type_spec REF
    (45) function_type -> . function_sign
    (58) function_sign -> . generics_type_list_opt LPAREN parameter_decl_list_opt RPAREN type_spec_assigntype_opt
    (48) generics_type_list_opt -> . generics_type_list
    (49) generics_type_list_opt -> . empty
    (67) generics_type_list -> . LANGRBRACKET generics_type generics_type_comma_nest RANGRBRACKET
    (137) empty -> .

  ! shift/reduce conflict for LPAREN resolved as shift
    INT             shift and go to state 101
    FLOAT           shift and go to state 102
    DOUBLE          shift and go to state 103
    ID              shift and go to state 104
    LPAREN          shift and go to state 105
    VOID            shift and go to state 112
    BOOL            shift and go to state 113
    I8              shift and go to state 114
    U8              shift and go to state 115
    I16             shift and go to state 116
    U16             shift and go to state 117
    I32             shift and go to state 118
    U32             shift and go to state 119
    I64             shift and go to state 120
    U64             shift and go to state 121
    F16             shift and go to state 122
    F32             shift and go to state 123
    F64             shift and go to state 124
    LANGRBRACKET    shift and go to state 35

  ! LPAREN          [ reduce using rule 137 (empty -> .) ]

    primary_expr                   shift and go to state 94
    operand                        shift and go to state 95
    member_expr                    shift and go to state 96
    index_expr                     shift and go to state 97
    cast_expr                      shift and go to state 98
    new_expr                       shift and go to state 99
    call_expr                      shift and go to state 100
    type_spec                      shift and go to state 106
    simple_type                    shift and go to state 107
    complex_type                   shift and go to state 108
    array_type                     shift and go to state 109
    reference_type                 shift and go to state 110
    function_type                  shift and go to state 111
    function_sign                  shift and go to state 125
    generics_type_list_opt         shift and go to state 71
    generics_type_list             shift and go to state 33
    empty                          shift and go to state 34

state 62

    (109) unary_operation_opt -> NOT .

    INT             reduce using rule 109 (unary_operation_opt -> NOT .)
    FLOAT           reduce using rule 109 (unary_operation_opt -> NOT .)
    DOUBLE          reduce using rule 109 (unary_operation_opt -> NOT .)
    ID              reduce using rule 109 (unary_operation_opt -> NOT .)
    LPAREN          reduce using rule 109 (unary_operation_opt -> NOT .)
    VOID            reduce using rule 109 (unary_operation_opt -> NOT .)
    BOOL            reduce using rule 109 (unary_operation_opt -> NOT .)
    I8              reduce using rule 109 (unary_operation_opt -> NOT .)
    U8              reduce using rule 109 (unary_operation_opt -> NOT .)
    I16             reduce using rule 109 (unary_operation_opt -> NOT .)
    U16             reduce using rule 109 (unary_operation_opt -> NOT .)
    I32             reduce using rule 109 (unary_operation_opt -> NOT .)
    U32             reduce using rule 109 (unary_operation_opt -> NOT .)
    I64             reduce using rule 109 (unary_operation_opt -> NOT .)
    U64             reduce using rule 109 (unary_operation_opt -> NOT .)
    F16             reduce using rule 109 (unary_operation_opt -> NOT .)
    F32             reduce using rule 109 (unary_operation_opt -> NOT .)
    F64             reduce using rule 109 (unary_operation_opt -> NOT .)
    LANGRBRACKET    reduce using rule 109 (unary_operation_opt -> NOT .)


state 63

    (13) variable_decl -> LET declarator declarator_nest .

    SEMICOLON       reduce using rule 13 (variable_decl -> LET declarator declarator_nest .)


state 64

    (14) declarator_nest -> COMMA . declarator declarator_nest
    (17) declarator -> . ID type_spec_colon_opt ASSIGN expression

    ID              shift and go to state 28

    declarator                     shift and go to state 126

state 65

    (15) declarator_nest -> empty .

    SEMICOLON       reduce using rule 15 (declarator_nest -> empty .)


state 66

    (17) declarator -> ID type_spec_colon_opt . ASSIGN expression

    ASSIGN          shift and go to state 127


state 67

    (18) type_spec_colon_opt -> COLON . type_spec
    (22) type_spec -> . simple_type
    (23) type_spec -> . complex_type
    (24) type_spec -> . array_type
    (25) type_spec -> . reference_type
    (26) type_spec -> . function_type
    (27) simple_type -> . VOID
    (28) simple_type -> . BOOL
    (29) simple_type -> . I8
    (30) simple_type -> . U8
    (31) simple_type -> . I16
    (32) simple_type -> . U16
    (33) simple_type -> . I32
    (34) simple_type -> . U32
    (35) simple_type -> . I64
    (36) simple_type -> . U64
    (37) simple_type -> . F16
    (38) simple_type -> . F32
    (39) simple_type -> . F64
    (40) complex_type -> . ID
    (41) array_type -> . type_spec LBRACKET int_literal_opt RBRACKET
    (44) reference_type -> . type_spec REF
    (45) function_type -> . function_sign
    (58) function_sign -> . generics_type_list_opt LPAREN parameter_decl_list_opt RPAREN type_spec_assigntype_opt
    (48) generics_type_list_opt -> . generics_type_list
    (49) generics_type_list_opt -> . empty
    (67) generics_type_list -> . LANGRBRACKET generics_type generics_type_comma_nest RANGRBRACKET
    (137) empty -> .

    VOID            shift and go to state 112
    BOOL            shift and go to state 113
    I8              shift and go to state 114
    U8              shift and go to state 115
    I16             shift and go to state 116
    U16             shift and go to state 117
    I32             shift and go to state 118
    U32             shift and go to state 119
    I64             shift and go to state 120
    U64             shift and go to state 121
    F16             shift and go to state 122
    F32             shift and go to state 123
    F64             shift and go to state 124
    ID              shift and go to state 129
    LANGRBRACKET    shift and go to state 35
    LPAREN          reduce using rule 137 (empty -> .)

    type_spec                      shift and go to state 128
    simple_type                    shift and go to state 107
    complex_type                   shift and go to state 108
    array_type                     shift and go to state 109
    reference_type                 shift and go to state 110
    function_type                  shift and go to state 111
    function_sign                  shift and go to state 125
    generics_type_list_opt         shift and go to state 71
    generics_type_list             shift and go to state 33
    empty                          shift and go to state 34

state 68

    (19) type_spec_colon_opt -> empty .

    ASSIGN          reduce using rule 19 (type_spec_colon_opt -> empty .)
    COMMA           reduce using rule 19 (type_spec_colon_opt -> empty .)
    RPAREN          reduce using rule 19 (type_spec_colon_opt -> empty .)


state 69

    (16) constant_decl -> CONST declarator declarator_nest .

    SEMICOLON       reduce using rule 16 (constant_decl -> CONST declarator declarator_nest .)


state 70

    (20) function_decl -> FUNC ID function_sign .

    SEMICOLON       reduce using rule 20 (function_decl -> FUNC ID function_sign .)
    LBRACE          reduce using rule 20 (function_decl -> FUNC ID function_sign .)
    ID              reduce using rule 20 (function_decl -> FUNC ID function_sign .)
    FUNC            reduce using rule 20 (function_decl -> FUNC ID function_sign .)
    RBRACE          reduce using rule 20 (function_decl -> FUNC ID function_sign .)


state 71

    (58) function_sign -> generics_type_list_opt . LPAREN parameter_decl_list_opt RPAREN type_spec_assigntype_opt

    LPAREN          shift and go to state 130


state 72

    (12) type_alias_decl -> TYPE ID ASSIGN . type_spec
    (22) type_spec -> . simple_type
    (23) type_spec -> . complex_type
    (24) type_spec -> . array_type
    (25) type_spec -> . reference_type
    (26) type_spec -> . function_type
    (27) simple_type -> . VOID
    (28) simple_type -> . BOOL
    (29) simple_type -> . I8
    (30) simple_type -> . U8
    (31) simple_type -> . I16
    (32) simple_type -> . U16
    (33) simple_type -> . I32
    (34) simple_type -> . U32
    (35) simple_type -> . I64
    (36) simple_type -> . U64
    (37) simple_type -> . F16
    (38) simple_type -> . F32
    (39) simple_type -> . F64
    (40) complex_type -> . ID
    (41) array_type -> . type_spec LBRACKET int_literal_opt RBRACKET
    (44) reference_type -> . type_spec REF
    (45) function_type -> . function_sign
    (58) function_sign -> . generics_type_list_opt LPAREN parameter_decl_list_opt RPAREN type_spec_assigntype_opt
    (48) generics_type_list_opt -> . generics_type_list
    (49) generics_type_list_opt -> . empty
    (67) generics_type_list -> . LANGRBRACKET generics_type generics_type_comma_nest RANGRBRACKET
    (137) empty -> .

    VOID            shift and go to state 112
    BOOL            shift and go to state 113
    I8              shift and go to state 114
    U8              shift and go to state 115
    I16             shift and go to state 116
    U16             shift and go to state 117
    I32             shift and go to state 118
    U32             shift and go to state 119
    I64             shift and go to state 120
    U64             shift and go to state 121
    F16             shift and go to state 122
    F32             shift and go to state 123
    F64             shift and go to state 124
    ID              shift and go to state 129
    LANGRBRACKET    shift and go to state 35
    LPAREN          reduce using rule 137 (empty -> .)

    type_spec                      shift and go to state 131
    simple_type                    shift and go to state 107
    complex_type                   shift and go to state 108
    array_type                     shift and go to state 109
    reference_type                 shift and go to state 110
    function_type                  shift and go to state 111
    function_sign                  shift and go to state 125
    generics_type_list_opt         shift and go to state 71
    generics_type_list             shift and go to state 33
    empty                          shift and go to state 34

state 73

    (46) struct_decl -> STRUCT generics_type_list_opt LBRACE . member_decl_nest RBRACE
    (50) member_decl_nest -> . member_decl member_decl_nest
    (51) member_decl_nest -> . empty
    (54) member_decl -> . declarator
    (55) member_decl -> . function_def
    (137) empty -> .
    (17) declarator -> . ID type_spec_colon_opt ASSIGN expression
    (21) function_def -> . function_decl block_statement
    (20) function_decl -> . FUNC ID function_sign

    RBRACE          reduce using rule 137 (empty -> .)
    ID              shift and go to state 28
    FUNC            shift and go to state 15

    member_decl_nest               shift and go to state 132
    member_decl                    shift and go to state 133
    empty                          shift and go to state 134
    declarator                     shift and go to state 135
    function_def                   shift and go to state 136
    function_decl                  shift and go to state 137

state 74

    (67) generics_type_list -> LANGRBRACKET generics_type . generics_type_comma_nest RANGRBRACKET
    (68) generics_type_comma_nest -> . COMMA generics_type generics_type_comma_nest
    (69) generics_type_comma_nest -> . empty
    (137) empty -> .

    COMMA           shift and go to state 139
    RANGRBRACKET    reduce using rule 137 (empty -> .)

    generics_type_comma_nest       shift and go to state 138
    empty                          shift and go to state 140

state 75

    (70) generics_type -> ID . generics_type_range_colon_opt
    (71) generics_type_range_colon_opt -> . COLON generics_type_range
    (72) generics_type_range_colon_opt -> . empty
    (137) empty -> .

    COLON           shift and go to state 142
    COMMA           reduce using rule 137 (empty -> .)
    RANGRBRACKET    reduce using rule 137 (empty -> .)

    generics_type_range_colon_opt  shift and go to state 141
    empty                          shift and go to state 143

state 76

    (47) interface_decl -> INTERFACE generics_type_list_opt LBRACE . interface_member_decl_nest RBRACE
    (52) interface_member_decl_nest -> . interface_member_decl interface_member_decl_nest
    (53) interface_member_decl_nest -> . empty
    (56) interface_member_decl -> . declarator
    (57) interface_member_decl -> . function_decl
    (137) empty -> .
    (17) declarator -> . ID type_spec_colon_opt ASSIGN expression
    (20) function_decl -> . FUNC ID function_sign

    RBRACE          reduce using rule 137 (empty -> .)
    ID              shift and go to state 28
    FUNC            shift and go to state 15

    interface_member_decl_nest     shift and go to state 144
    interface_member_decl          shift and go to state 145
    empty                          shift and go to state 146
    declarator                     shift and go to state 147
    function_decl                  shift and go to state 148

state 77

    (82) block_statement -> LBRACE statement_nest RBRACE .

    LET             reduce using rule 82 (block_statement -> LBRACE statement_nest RBRACE .)
    CONST           reduce using rule 82 (block_statement -> LBRACE statement_nest RBRACE .)
    FUNC            reduce using rule 82 (block_statement -> LBRACE statement_nest RBRACE .)
    TYPE            reduce using rule 82 (block_statement -> LBRACE statement_nest RBRACE .)
    STRUCT          reduce using rule 82 (block_statement -> LBRACE statement_nest RBRACE .)
    INTERFACE       reduce using rule 82 (block_statement -> LBRACE statement_nest RBRACE .)
    $end            reduce using rule 82 (block_statement -> LBRACE statement_nest RBRACE .)
    LBRACE          reduce using rule 82 (block_statement -> LBRACE statement_nest RBRACE .)
    IF              reduce using rule 82 (block_statement -> LBRACE statement_nest RBRACE .)
    BREAK           reduce using rule 82 (block_statement -> LBRACE statement_nest RBRACE .)
    CONTINUE        reduce using rule 82 (block_statement -> LBRACE statement_nest RBRACE .)
    RETURN          reduce using rule 82 (block_statement -> LBRACE statement_nest RBRACE .)
    WHILE           reduce using rule 82 (block_statement -> LBRACE statement_nest RBRACE .)
    FOR             reduce using rule 82 (block_statement -> LBRACE statement_nest RBRACE .)
    NOT             reduce using rule 82 (block_statement -> LBRACE statement_nest RBRACE .)
    SEMICOLON       reduce using rule 82 (block_statement -> LBRACE statement_nest RBRACE .)
    INT             reduce using rule 82 (block_statement -> LBRACE statement_nest RBRACE .)
    FLOAT           reduce using rule 82 (block_statement -> LBRACE statement_nest RBRACE .)
    DOUBLE          reduce using rule 82 (block_statement -> LBRACE statement_nest RBRACE .)
    ID              reduce using rule 82 (block_statement -> LBRACE statement_nest RBRACE .)
    LPAREN          reduce using rule 82 (block_statement -> LBRACE statement_nest RBRACE .)
    VOID            reduce using rule 82 (block_statement -> LBRACE statement_nest RBRACE .)
    BOOL            reduce using rule 82 (block_statement -> LBRACE statement_nest RBRACE .)
    I8              reduce using rule 82 (block_statement -> LBRACE statement_nest RBRACE .)
    U8              reduce using rule 82 (block_statement -> LBRACE statement_nest RBRACE .)
    I16             reduce using rule 82 (block_statement -> LBRACE statement_nest RBRACE .)
    U16             reduce using rule 82 (block_statement -> LBRACE statement_nest RBRACE .)
    I32             reduce using rule 82 (block_statement -> LBRACE statement_nest RBRACE .)
    U32             reduce using rule 82 (block_statement -> LBRACE statement_nest RBRACE .)
    I64             reduce using rule 82 (block_statement -> LBRACE statement_nest RBRACE .)
    U64             reduce using rule 82 (block_statement -> LBRACE statement_nest RBRACE .)
    F16             reduce using rule 82 (block_statement -> LBRACE statement_nest RBRACE .)
    F32             reduce using rule 82 (block_statement -> LBRACE statement_nest RBRACE .)
    F64             reduce using rule 82 (block_statement -> LBRACE statement_nest RBRACE .)
    LANGRBRACKET    reduce using rule 82 (block_statement -> LBRACE statement_nest RBRACE .)
    RBRACE          reduce using rule 82 (block_statement -> LBRACE statement_nest RBRACE .)
    ELSE            reduce using rule 82 (block_statement -> LBRACE statement_nest RBRACE .)


state 78

    (83) statement_nest -> statement statement_nest .

    RBRACE          reduce using rule 83 (statement_nest -> statement statement_nest .)


state 79

    (80) decl_statement -> variable_decl SEMICOLON .

    LBRACE          reduce using rule 80 (decl_statement -> variable_decl SEMICOLON .)
    IF              reduce using rule 80 (decl_statement -> variable_decl SEMICOLON .)
    BREAK           reduce using rule 80 (decl_statement -> variable_decl SEMICOLON .)
    CONTINUE        reduce using rule 80 (decl_statement -> variable_decl SEMICOLON .)
    RETURN          reduce using rule 80 (decl_statement -> variable_decl SEMICOLON .)
    LET             reduce using rule 80 (decl_statement -> variable_decl SEMICOLON .)
    CONST           reduce using rule 80 (decl_statement -> variable_decl SEMICOLON .)
    WHILE           reduce using rule 80 (decl_statement -> variable_decl SEMICOLON .)
    FOR             reduce using rule 80 (decl_statement -> variable_decl SEMICOLON .)
    NOT             reduce using rule 80 (decl_statement -> variable_decl SEMICOLON .)
    SEMICOLON       reduce using rule 80 (decl_statement -> variable_decl SEMICOLON .)
    INT             reduce using rule 80 (decl_statement -> variable_decl SEMICOLON .)
    FLOAT           reduce using rule 80 (decl_statement -> variable_decl SEMICOLON .)
    DOUBLE          reduce using rule 80 (decl_statement -> variable_decl SEMICOLON .)
    ID              reduce using rule 80 (decl_statement -> variable_decl SEMICOLON .)
    LPAREN          reduce using rule 80 (decl_statement -> variable_decl SEMICOLON .)
    VOID            reduce using rule 80 (decl_statement -> variable_decl SEMICOLON .)
    BOOL            reduce using rule 80 (decl_statement -> variable_decl SEMICOLON .)
    I8              reduce using rule 80 (decl_statement -> variable_decl SEMICOLON .)
    U8              reduce using rule 80 (decl_statement -> variable_decl SEMICOLON .)
    I16             reduce using rule 80 (decl_statement -> variable_decl SEMICOLON .)
    U16             reduce using rule 80 (decl_statement -> variable_decl SEMICOLON .)
    I32             reduce using rule 80 (decl_statement -> variable_decl SEMICOLON .)
    U32             reduce using rule 80 (decl_statement -> variable_decl SEMICOLON .)
    I64             reduce using rule 80 (decl_statement -> variable_decl SEMICOLON .)
    U64             reduce using rule 80 (decl_statement -> variable_decl SEMICOLON .)
    F16             reduce using rule 80 (decl_statement -> variable_decl SEMICOLON .)
    F32             reduce using rule 80 (decl_statement -> variable_decl SEMICOLON .)
    F64             reduce using rule 80 (decl_statement -> variable_decl SEMICOLON .)
    LANGRBRACKET    reduce using rule 80 (decl_statement -> variable_decl SEMICOLON .)
    RBRACE          reduce using rule 80 (decl_statement -> variable_decl SEMICOLON .)
    ELSE            reduce using rule 80 (decl_statement -> variable_decl SEMICOLON .)


state 80

    (81) decl_statement -> constant_decl SEMICOLON .

    LBRACE          reduce using rule 81 (decl_statement -> constant_decl SEMICOLON .)
    IF              reduce using rule 81 (decl_statement -> constant_decl SEMICOLON .)
    BREAK           reduce using rule 81 (decl_statement -> constant_decl SEMICOLON .)
    CONTINUE        reduce using rule 81 (decl_statement -> constant_decl SEMICOLON .)
    RETURN          reduce using rule 81 (decl_statement -> constant_decl SEMICOLON .)
    LET             reduce using rule 81 (decl_statement -> constant_decl SEMICOLON .)
    CONST           reduce using rule 81 (decl_statement -> constant_decl SEMICOLON .)
    WHILE           reduce using rule 81 (decl_statement -> constant_decl SEMICOLON .)
    FOR             reduce using rule 81 (decl_statement -> constant_decl SEMICOLON .)
    NOT             reduce using rule 81 (decl_statement -> constant_decl SEMICOLON .)
    SEMICOLON       reduce using rule 81 (decl_statement -> constant_decl SEMICOLON .)
    INT             reduce using rule 81 (decl_statement -> constant_decl SEMICOLON .)
    FLOAT           reduce using rule 81 (decl_statement -> constant_decl SEMICOLON .)
    DOUBLE          reduce using rule 81 (decl_statement -> constant_decl SEMICOLON .)
    ID              reduce using rule 81 (decl_statement -> constant_decl SEMICOLON .)
    LPAREN          reduce using rule 81 (decl_statement -> constant_decl SEMICOLON .)
    VOID            reduce using rule 81 (decl_statement -> constant_decl SEMICOLON .)
    BOOL            reduce using rule 81 (decl_statement -> constant_decl SEMICOLON .)
    I8              reduce using rule 81 (decl_statement -> constant_decl SEMICOLON .)
    U8              reduce using rule 81 (decl_statement -> constant_decl SEMICOLON .)
    I16             reduce using rule 81 (decl_statement -> constant_decl SEMICOLON .)
    U16             reduce using rule 81 (decl_statement -> constant_decl SEMICOLON .)
    I32             reduce using rule 81 (decl_statement -> constant_decl SEMICOLON .)
    U32             reduce using rule 81 (decl_statement -> constant_decl SEMICOLON .)
    I64             reduce using rule 81 (decl_statement -> constant_decl SEMICOLON .)
    U64             reduce using rule 81 (decl_statement -> constant_decl SEMICOLON .)
    F16             reduce using rule 81 (decl_statement -> constant_decl SEMICOLON .)
    F32             reduce using rule 81 (decl_statement -> constant_decl SEMICOLON .)
    F64             reduce using rule 81 (decl_statement -> constant_decl SEMICOLON .)
    LANGRBRACKET    reduce using rule 81 (decl_statement -> constant_decl SEMICOLON .)
    RBRACE          reduce using rule 81 (decl_statement -> constant_decl SEMICOLON .)
    ELSE            reduce using rule 81 (decl_statement -> constant_decl SEMICOLON .)


state 81

    (85) expression_statement -> expression_opt SEMICOLON .

    LBRACE          reduce using rule 85 (expression_statement -> expression_opt SEMICOLON .)
    IF              reduce using rule 85 (expression_statement -> expression_opt SEMICOLON .)
    BREAK           reduce using rule 85 (expression_statement -> expression_opt SEMICOLON .)
    CONTINUE        reduce using rule 85 (expression_statement -> expression_opt SEMICOLON .)
    RETURN          reduce using rule 85 (expression_statement -> expression_opt SEMICOLON .)
    LET             reduce using rule 85 (expression_statement -> expression_opt SEMICOLON .)
    CONST           reduce using rule 85 (expression_statement -> expression_opt SEMICOLON .)
    WHILE           reduce using rule 85 (expression_statement -> expression_opt SEMICOLON .)
    FOR             reduce using rule 85 (expression_statement -> expression_opt SEMICOLON .)
    NOT             reduce using rule 85 (expression_statement -> expression_opt SEMICOLON .)
    SEMICOLON       reduce using rule 85 (expression_statement -> expression_opt SEMICOLON .)
    INT             reduce using rule 85 (expression_statement -> expression_opt SEMICOLON .)
    FLOAT           reduce using rule 85 (expression_statement -> expression_opt SEMICOLON .)
    DOUBLE          reduce using rule 85 (expression_statement -> expression_opt SEMICOLON .)
    ID              reduce using rule 85 (expression_statement -> expression_opt SEMICOLON .)
    LPAREN          reduce using rule 85 (expression_statement -> expression_opt SEMICOLON .)
    VOID            reduce using rule 85 (expression_statement -> expression_opt SEMICOLON .)
    BOOL            reduce using rule 85 (expression_statement -> expression_opt SEMICOLON .)
    I8              reduce using rule 85 (expression_statement -> expression_opt SEMICOLON .)
    U8              reduce using rule 85 (expression_statement -> expression_opt SEMICOLON .)
    I16             reduce using rule 85 (expression_statement -> expression_opt SEMICOLON .)
    U16             reduce using rule 85 (expression_statement -> expression_opt SEMICOLON .)
    I32             reduce using rule 85 (expression_statement -> expression_opt SEMICOLON .)
    U32             reduce using rule 85 (expression_statement -> expression_opt SEMICOLON .)
    I64             reduce using rule 85 (expression_statement -> expression_opt SEMICOLON .)
    U64             reduce using rule 85 (expression_statement -> expression_opt SEMICOLON .)
    F16             reduce using rule 85 (expression_statement -> expression_opt SEMICOLON .)
    F32             reduce using rule 85 (expression_statement -> expression_opt SEMICOLON .)
    F64             reduce using rule 85 (expression_statement -> expression_opt SEMICOLON .)
    LANGRBRACKET    reduce using rule 85 (expression_statement -> expression_opt SEMICOLON .)
    RBRACE          reduce using rule 85 (expression_statement -> expression_opt SEMICOLON .)
    ELSE            reduce using rule 85 (expression_statement -> expression_opt SEMICOLON .)


state 82

    (88) if_statement -> IF LPAREN . expression RPAREN statement statement_else_opt
    (100) expression -> . assign_expr
    (101) expression -> . binary_expr
    (102) expression -> . unary_expr
    (103) assign_expr -> . expression ASSIGN expression
    (104) binary_expr -> . expression PLUS expression
    (105) binary_expr -> . expression MINUS expression
    (106) binary_expr -> . expression MUL expression
    (107) binary_expr -> . expression DIV expression
    (108) unary_expr -> . unary_operation_opt primary_expr
    (109) unary_operation_opt -> . NOT
    (110) unary_operation_opt -> . empty
    (137) empty -> .

    NOT             shift and go to state 62
    INT             reduce using rule 137 (empty -> .)
    FLOAT           reduce using rule 137 (empty -> .)
    DOUBLE          reduce using rule 137 (empty -> .)
    ID              reduce using rule 137 (empty -> .)
    LPAREN          reduce using rule 137 (empty -> .)
    VOID            reduce using rule 137 (empty -> .)
    BOOL            reduce using rule 137 (empty -> .)
    I8              reduce using rule 137 (empty -> .)
    U8              reduce using rule 137 (empty -> .)
    I16             reduce using rule 137 (empty -> .)
    U16             reduce using rule 137 (empty -> .)
    I32             reduce using rule 137 (empty -> .)
    U32             reduce using rule 137 (empty -> .)
    I64             reduce using rule 137 (empty -> .)
    U64             reduce using rule 137 (empty -> .)
    F16             reduce using rule 137 (empty -> .)
    F32             reduce using rule 137 (empty -> .)
    F64             reduce using rule 137 (empty -> .)
    LANGRBRACKET    reduce using rule 137 (empty -> .)

    expression                     shift and go to state 149
    assign_expr                    shift and go to state 58
    binary_expr                    shift and go to state 59
    unary_expr                     shift and go to state 60
    unary_operation_opt            shift and go to state 61
    empty                          shift and go to state 150

state 83

    (103) assign_expr -> expression ASSIGN . expression
    (100) expression -> . assign_expr
    (101) expression -> . binary_expr
    (102) expression -> . unary_expr
    (103) assign_expr -> . expression ASSIGN expression
    (104) binary_expr -> . expression PLUS expression
    (105) binary_expr -> . expression MINUS expression
    (106) binary_expr -> . expression MUL expression
    (107) binary_expr -> . expression DIV expression
    (108) unary_expr -> . unary_operation_opt primary_expr
    (109) unary_operation_opt -> . NOT
    (110) unary_operation_opt -> . empty
    (137) empty -> .

    NOT             shift and go to state 62
    INT             reduce using rule 137 (empty -> .)
    FLOAT           reduce using rule 137 (empty -> .)
    DOUBLE          reduce using rule 137 (empty -> .)
    ID              reduce using rule 137 (empty -> .)
    LPAREN          reduce using rule 137 (empty -> .)
    VOID            reduce using rule 137 (empty -> .)
    BOOL            reduce using rule 137 (empty -> .)
    I8              reduce using rule 137 (empty -> .)
    U8              reduce using rule 137 (empty -> .)
    I16             reduce using rule 137 (empty -> .)
    U16             reduce using rule 137 (empty -> .)
    I32             reduce using rule 137 (empty -> .)
    U32             reduce using rule 137 (empty -> .)
    I64             reduce using rule 137 (empty -> .)
    U64             reduce using rule 137 (empty -> .)
    F16             reduce using rule 137 (empty -> .)
    F32             reduce using rule 137 (empty -> .)
    F64             reduce using rule 137 (empty -> .)
    LANGRBRACKET    reduce using rule 137 (empty -> .)

    expression                     shift and go to state 151
    assign_expr                    shift and go to state 58
    binary_expr                    shift and go to state 59
    unary_expr                     shift and go to state 60
    unary_operation_opt            shift and go to state 61
    empty                          shift and go to state 150

state 84

    (104) binary_expr -> expression PLUS . expression
    (100) expression -> . assign_expr
    (101) expression -> . binary_expr
    (102) expression -> . unary_expr
    (103) assign_expr -> . expression ASSIGN expression
    (104) binary_expr -> . expression PLUS expression
    (105) binary_expr -> . expression MINUS expression
    (106) binary_expr -> . expression MUL expression
    (107) binary_expr -> . expression DIV expression
    (108) unary_expr -> . unary_operation_opt primary_expr
    (109) unary_operation_opt -> . NOT
    (110) unary_operation_opt -> . empty
    (137) empty -> .

    NOT             shift and go to state 62
    INT             reduce using rule 137 (empty -> .)
    FLOAT           reduce using rule 137 (empty -> .)
    DOUBLE          reduce using rule 137 (empty -> .)
    ID              reduce using rule 137 (empty -> .)
    LPAREN          reduce using rule 137 (empty -> .)
    VOID            reduce using rule 137 (empty -> .)
    BOOL            reduce using rule 137 (empty -> .)
    I8              reduce using rule 137 (empty -> .)
    U8              reduce using rule 137 (empty -> .)
    I16             reduce using rule 137 (empty -> .)
    U16             reduce using rule 137 (empty -> .)
    I32             reduce using rule 137 (empty -> .)
    U32             reduce using rule 137 (empty -> .)
    I64             reduce using rule 137 (empty -> .)
    U64             reduce using rule 137 (empty -> .)
    F16             reduce using rule 137 (empty -> .)
    F32             reduce using rule 137 (empty -> .)
    F64             reduce using rule 137 (empty -> .)
    LANGRBRACKET    reduce using rule 137 (empty -> .)

    expression                     shift and go to state 152
    assign_expr                    shift and go to state 58
    binary_expr                    shift and go to state 59
    unary_expr                     shift and go to state 60
    unary_operation_opt            shift and go to state 61
    empty                          shift and go to state 150

state 85

    (105) binary_expr -> expression MINUS . expression
    (100) expression -> . assign_expr
    (101) expression -> . binary_expr
    (102) expression -> . unary_expr
    (103) assign_expr -> . expression ASSIGN expression
    (104) binary_expr -> . expression PLUS expression
    (105) binary_expr -> . expression MINUS expression
    (106) binary_expr -> . expression MUL expression
    (107) binary_expr -> . expression DIV expression
    (108) unary_expr -> . unary_operation_opt primary_expr
    (109) unary_operation_opt -> . NOT
    (110) unary_operation_opt -> . empty
    (137) empty -> .

    NOT             shift and go to state 62
    INT             reduce using rule 137 (empty -> .)
    FLOAT           reduce using rule 137 (empty -> .)
    DOUBLE          reduce using rule 137 (empty -> .)
    ID              reduce using rule 137 (empty -> .)
    LPAREN          reduce using rule 137 (empty -> .)
    VOID            reduce using rule 137 (empty -> .)
    BOOL            reduce using rule 137 (empty -> .)
    I8              reduce using rule 137 (empty -> .)
    U8              reduce using rule 137 (empty -> .)
    I16             reduce using rule 137 (empty -> .)
    U16             reduce using rule 137 (empty -> .)
    I32             reduce using rule 137 (empty -> .)
    U32             reduce using rule 137 (empty -> .)
    I64             reduce using rule 137 (empty -> .)
    U64             reduce using rule 137 (empty -> .)
    F16             reduce using rule 137 (empty -> .)
    F32             reduce using rule 137 (empty -> .)
    F64             reduce using rule 137 (empty -> .)
    LANGRBRACKET    reduce using rule 137 (empty -> .)

    expression                     shift and go to state 153
    assign_expr                    shift and go to state 58
    binary_expr                    shift and go to state 59
    unary_expr                     shift and go to state 60
    unary_operation_opt            shift and go to state 61
    empty                          shift and go to state 150

state 86

    (106) binary_expr -> expression MUL . expression
    (100) expression -> . assign_expr
    (101) expression -> . binary_expr
    (102) expression -> . unary_expr
    (103) assign_expr -> . expression ASSIGN expression
    (104) binary_expr -> . expression PLUS expression
    (105) binary_expr -> . expression MINUS expression
    (106) binary_expr -> . expression MUL expression
    (107) binary_expr -> . expression DIV expression
    (108) unary_expr -> . unary_operation_opt primary_expr
    (109) unary_operation_opt -> . NOT
    (110) unary_operation_opt -> . empty
    (137) empty -> .

    NOT             shift and go to state 62
    INT             reduce using rule 137 (empty -> .)
    FLOAT           reduce using rule 137 (empty -> .)
    DOUBLE          reduce using rule 137 (empty -> .)
    ID              reduce using rule 137 (empty -> .)
    LPAREN          reduce using rule 137 (empty -> .)
    VOID            reduce using rule 137 (empty -> .)
    BOOL            reduce using rule 137 (empty -> .)
    I8              reduce using rule 137 (empty -> .)
    U8              reduce using rule 137 (empty -> .)
    I16             reduce using rule 137 (empty -> .)
    U16             reduce using rule 137 (empty -> .)
    I32             reduce using rule 137 (empty -> .)
    U32             reduce using rule 137 (empty -> .)
    I64             reduce using rule 137 (empty -> .)
    U64             reduce using rule 137 (empty -> .)
    F16             reduce using rule 137 (empty -> .)
    F32             reduce using rule 137 (empty -> .)
    F64             reduce using rule 137 (empty -> .)
    LANGRBRACKET    reduce using rule 137 (empty -> .)

    expression                     shift and go to state 154
    assign_expr                    shift and go to state 58
    binary_expr                    shift and go to state 59
    unary_expr                     shift and go to state 60
    unary_operation_opt            shift and go to state 61
    empty                          shift and go to state 150

state 87

    (107) binary_expr -> expression DIV . expression
    (100) expression -> . assign_expr
    (101) expression -> . binary_expr
    (102) expression -> . unary_expr
    (103) assign_expr -> . expression ASSIGN expression
    (104) binary_expr -> . expression PLUS expression
    (105) binary_expr -> . expression MINUS expression
    (106) binary_expr -> . expression MUL expression
    (107) binary_expr -> . expression DIV expression
    (108) unary_expr -> . unary_operation_opt primary_expr
    (109) unary_operation_opt -> . NOT
    (110) unary_operation_opt -> . empty
    (137) empty -> .

    NOT             shift and go to state 62
    INT             reduce using rule 137 (empty -> .)
    FLOAT           reduce using rule 137 (empty -> .)
    DOUBLE          reduce using rule 137 (empty -> .)
    ID              reduce using rule 137 (empty -> .)
    LPAREN          reduce using rule 137 (empty -> .)
    VOID            reduce using rule 137 (empty -> .)
    BOOL            reduce using rule 137 (empty -> .)
    I8              reduce using rule 137 (empty -> .)
    U8              reduce using rule 137 (empty -> .)
    I16             reduce using rule 137 (empty -> .)
    U16             reduce using rule 137 (empty -> .)
    I32             reduce using rule 137 (empty -> .)
    U32             reduce using rule 137 (empty -> .)
    I64             reduce using rule 137 (empty -> .)
    U64             reduce using rule 137 (empty -> .)
    F16             reduce using rule 137 (empty -> .)
    F32             reduce using rule 137 (empty -> .)
    F64             reduce using rule 137 (empty -> .)
    LANGRBRACKET    reduce using rule 137 (empty -> .)

    expression                     shift and go to state 155
    assign_expr                    shift and go to state 58
    binary_expr                    shift and go to state 59
    unary_expr                     shift and go to state 60
    unary_operation_opt            shift and go to state 61
    empty                          shift and go to state 150

state 88

    (97) jump_statement -> BREAK SEMICOLON .

    LBRACE          reduce using rule 97 (jump_statement -> BREAK SEMICOLON .)
    IF              reduce using rule 97 (jump_statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 97 (jump_statement -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 97 (jump_statement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 97 (jump_statement -> BREAK SEMICOLON .)
    LET             reduce using rule 97 (jump_statement -> BREAK SEMICOLON .)
    CONST           reduce using rule 97 (jump_statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 97 (jump_statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 97 (jump_statement -> BREAK SEMICOLON .)
    NOT             reduce using rule 97 (jump_statement -> BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 97 (jump_statement -> BREAK SEMICOLON .)
    INT             reduce using rule 97 (jump_statement -> BREAK SEMICOLON .)
    FLOAT           reduce using rule 97 (jump_statement -> BREAK SEMICOLON .)
    DOUBLE          reduce using rule 97 (jump_statement -> BREAK SEMICOLON .)
    ID              reduce using rule 97 (jump_statement -> BREAK SEMICOLON .)
    LPAREN          reduce using rule 97 (jump_statement -> BREAK SEMICOLON .)
    VOID            reduce using rule 97 (jump_statement -> BREAK SEMICOLON .)
    BOOL            reduce using rule 97 (jump_statement -> BREAK SEMICOLON .)
    I8              reduce using rule 97 (jump_statement -> BREAK SEMICOLON .)
    U8              reduce using rule 97 (jump_statement -> BREAK SEMICOLON .)
    I16             reduce using rule 97 (jump_statement -> BREAK SEMICOLON .)
    U16             reduce using rule 97 (jump_statement -> BREAK SEMICOLON .)
    I32             reduce using rule 97 (jump_statement -> BREAK SEMICOLON .)
    U32             reduce using rule 97 (jump_statement -> BREAK SEMICOLON .)
    I64             reduce using rule 97 (jump_statement -> BREAK SEMICOLON .)
    U64             reduce using rule 97 (jump_statement -> BREAK SEMICOLON .)
    F16             reduce using rule 97 (jump_statement -> BREAK SEMICOLON .)
    F32             reduce using rule 97 (jump_statement -> BREAK SEMICOLON .)
    F64             reduce using rule 97 (jump_statement -> BREAK SEMICOLON .)
    LANGRBRACKET    reduce using rule 97 (jump_statement -> BREAK SEMICOLON .)
    RBRACE          reduce using rule 97 (jump_statement -> BREAK SEMICOLON .)
    ELSE            reduce using rule 97 (jump_statement -> BREAK SEMICOLON .)


state 89

    (98) jump_statement -> CONTINUE SEMICOLON .

    LBRACE          reduce using rule 98 (jump_statement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 98 (jump_statement -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 98 (jump_statement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 98 (jump_statement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 98 (jump_statement -> CONTINUE SEMICOLON .)
    LET             reduce using rule 98 (jump_statement -> CONTINUE SEMICOLON .)
    CONST           reduce using rule 98 (jump_statement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 98 (jump_statement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 98 (jump_statement -> CONTINUE SEMICOLON .)
    NOT             reduce using rule 98 (jump_statement -> CONTINUE SEMICOLON .)
    SEMICOLON       reduce using rule 98 (jump_statement -> CONTINUE SEMICOLON .)
    INT             reduce using rule 98 (jump_statement -> CONTINUE SEMICOLON .)
    FLOAT           reduce using rule 98 (jump_statement -> CONTINUE SEMICOLON .)
    DOUBLE          reduce using rule 98 (jump_statement -> CONTINUE SEMICOLON .)
    ID              reduce using rule 98 (jump_statement -> CONTINUE SEMICOLON .)
    LPAREN          reduce using rule 98 (jump_statement -> CONTINUE SEMICOLON .)
    VOID            reduce using rule 98 (jump_statement -> CONTINUE SEMICOLON .)
    BOOL            reduce using rule 98 (jump_statement -> CONTINUE SEMICOLON .)
    I8              reduce using rule 98 (jump_statement -> CONTINUE SEMICOLON .)
    U8              reduce using rule 98 (jump_statement -> CONTINUE SEMICOLON .)
    I16             reduce using rule 98 (jump_statement -> CONTINUE SEMICOLON .)
    U16             reduce using rule 98 (jump_statement -> CONTINUE SEMICOLON .)
    I32             reduce using rule 98 (jump_statement -> CONTINUE SEMICOLON .)
    U32             reduce using rule 98 (jump_statement -> CONTINUE SEMICOLON .)
    I64             reduce using rule 98 (jump_statement -> CONTINUE SEMICOLON .)
    U64             reduce using rule 98 (jump_statement -> CONTINUE SEMICOLON .)
    F16             reduce using rule 98 (jump_statement -> CONTINUE SEMICOLON .)
    F32             reduce using rule 98 (jump_statement -> CONTINUE SEMICOLON .)
    F64             reduce using rule 98 (jump_statement -> CONTINUE SEMICOLON .)
    LANGRBRACKET    reduce using rule 98 (jump_statement -> CONTINUE SEMICOLON .)
    RBRACE          reduce using rule 98 (jump_statement -> CONTINUE SEMICOLON .)
    ELSE            reduce using rule 98 (jump_statement -> CONTINUE SEMICOLON .)


state 90

    (99) jump_statement -> RETURN expression_opt . SEMICOLON

    SEMICOLON       shift and go to state 156


state 91

    (87) expression_opt -> empty .
    (110) unary_operation_opt -> empty .

    SEMICOLON       reduce using rule 87 (expression_opt -> empty .)
    INT             reduce using rule 110 (unary_operation_opt -> empty .)
    FLOAT           reduce using rule 110 (unary_operation_opt -> empty .)
    DOUBLE          reduce using rule 110 (unary_operation_opt -> empty .)
    ID              reduce using rule 110 (unary_operation_opt -> empty .)
    LPAREN          reduce using rule 110 (unary_operation_opt -> empty .)
    VOID            reduce using rule 110 (unary_operation_opt -> empty .)
    BOOL            reduce using rule 110 (unary_operation_opt -> empty .)
    I8              reduce using rule 110 (unary_operation_opt -> empty .)
    U8              reduce using rule 110 (unary_operation_opt -> empty .)
    I16             reduce using rule 110 (unary_operation_opt -> empty .)
    U16             reduce using rule 110 (unary_operation_opt -> empty .)
    I32             reduce using rule 110 (unary_operation_opt -> empty .)
    U32             reduce using rule 110 (unary_operation_opt -> empty .)
    I64             reduce using rule 110 (unary_operation_opt -> empty .)
    U64             reduce using rule 110 (unary_operation_opt -> empty .)
    F16             reduce using rule 110 (unary_operation_opt -> empty .)
    F32             reduce using rule 110 (unary_operation_opt -> empty .)
    F64             reduce using rule 110 (unary_operation_opt -> empty .)
    LANGRBRACKET    reduce using rule 110 (unary_operation_opt -> empty .)


state 92

    (93) while_clause -> WHILE LPAREN . expression RPAREN statement
    (100) expression -> . assign_expr
    (101) expression -> . binary_expr
    (102) expression -> . unary_expr
    (103) assign_expr -> . expression ASSIGN expression
    (104) binary_expr -> . expression PLUS expression
    (105) binary_expr -> . expression MINUS expression
    (106) binary_expr -> . expression MUL expression
    (107) binary_expr -> . expression DIV expression
    (108) unary_expr -> . unary_operation_opt primary_expr
    (109) unary_operation_opt -> . NOT
    (110) unary_operation_opt -> . empty
    (137) empty -> .

    NOT             shift and go to state 62
    INT             reduce using rule 137 (empty -> .)
    FLOAT           reduce using rule 137 (empty -> .)
    DOUBLE          reduce using rule 137 (empty -> .)
    ID              reduce using rule 137 (empty -> .)
    LPAREN          reduce using rule 137 (empty -> .)
    VOID            reduce using rule 137 (empty -> .)
    BOOL            reduce using rule 137 (empty -> .)
    I8              reduce using rule 137 (empty -> .)
    U8              reduce using rule 137 (empty -> .)
    I16             reduce using rule 137 (empty -> .)
    U16             reduce using rule 137 (empty -> .)
    I32             reduce using rule 137 (empty -> .)
    U32             reduce using rule 137 (empty -> .)
    I64             reduce using rule 137 (empty -> .)
    U64             reduce using rule 137 (empty -> .)
    F16             reduce using rule 137 (empty -> .)
    F32             reduce using rule 137 (empty -> .)
    F64             reduce using rule 137 (empty -> .)
    LANGRBRACKET    reduce using rule 137 (empty -> .)

    expression                     shift and go to state 157
    assign_expr                    shift and go to state 58
    binary_expr                    shift and go to state 59
    unary_expr                     shift and go to state 60
    unary_operation_opt            shift and go to state 61
    empty                          shift and go to state 150

state 93

    (94) for_clause -> FOR LPAREN . for_init_statement expression_opt SEMICOLON expression RPAREN statement
    (95) for_init_statement -> . expression_statement
    (96) for_init_statement -> . decl_statement
    (85) expression_statement -> . expression_opt SEMICOLON
    (80) decl_statement -> . variable_decl SEMICOLON
    (81) decl_statement -> . constant_decl SEMICOLON
    (86) expression_opt -> . expression
    (87) expression_opt -> . empty
    (13) variable_decl -> . LET declarator declarator_nest
    (16) constant_decl -> . CONST declarator declarator_nest
    (100) expression -> . assign_expr
    (101) expression -> . binary_expr
    (102) expression -> . unary_expr
    (137) empty -> .
    (103) assign_expr -> . expression ASSIGN expression
    (104) binary_expr -> . expression PLUS expression
    (105) binary_expr -> . expression MINUS expression
    (106) binary_expr -> . expression MUL expression
    (107) binary_expr -> . expression DIV expression
    (108) unary_expr -> . unary_operation_opt primary_expr
    (109) unary_operation_opt -> . NOT
    (110) unary_operation_opt -> . empty

    LET             shift and go to state 13
    CONST           shift and go to state 14
    SEMICOLON       reduce using rule 137 (empty -> .)
    INT             reduce using rule 137 (empty -> .)
    FLOAT           reduce using rule 137 (empty -> .)
    DOUBLE          reduce using rule 137 (empty -> .)
    ID              reduce using rule 137 (empty -> .)
    LPAREN          reduce using rule 137 (empty -> .)
    VOID            reduce using rule 137 (empty -> .)
    BOOL            reduce using rule 137 (empty -> .)
    I8              reduce using rule 137 (empty -> .)
    U8              reduce using rule 137 (empty -> .)
    I16             reduce using rule 137 (empty -> .)
    U16             reduce using rule 137 (empty -> .)
    I32             reduce using rule 137 (empty -> .)
    U32             reduce using rule 137 (empty -> .)
    I64             reduce using rule 137 (empty -> .)
    U64             reduce using rule 137 (empty -> .)
    F16             reduce using rule 137 (empty -> .)
    F32             reduce using rule 137 (empty -> .)
    F64             reduce using rule 137 (empty -> .)
    LANGRBRACKET    reduce using rule 137 (empty -> .)
    NOT             shift and go to state 62

    for_init_statement             shift and go to state 158
    expression_opt                 shift and go to state 48
    expression                     shift and go to state 50
    expression_statement           shift and go to state 159
    decl_statement                 shift and go to state 160
    variable_decl                  shift and go to state 46
    constant_decl                  shift and go to state 47
    empty                          shift and go to state 91
    assign_expr                    shift and go to state 58
    binary_expr                    shift and go to state 59
    unary_expr                     shift and go to state 60
    unary_operation_opt            shift and go to state 61

state 94

    (108) unary_expr -> unary_operation_opt primary_expr .
    (123) index_expr -> primary_expr . LBRACKET expression RBRACKET
    (128) call_expr -> primary_expr . generics_specialization_list_opt LPAREN parameter_list_opt RPAREN
    (129) generics_specialization_list_opt -> . generics_specialization_list
    (130) generics_specialization_list_opt -> . empty
    (131) generics_specialization_list -> . LANGRBRACKET type_spec type_spec_comma_nest RANGRBRACKET
    (137) empty -> .

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for LANGRBRACKET resolved as shift
  ! reduce/reduce conflict for LPAREN resolved using rule 108 (unary_expr -> unary_operation_opt primary_expr .)
    ASSIGN          reduce using rule 108 (unary_expr -> unary_operation_opt primary_expr .)
    PLUS            reduce using rule 108 (unary_expr -> unary_operation_opt primary_expr .)
    MINUS           reduce using rule 108 (unary_expr -> unary_operation_opt primary_expr .)
    MUL             reduce using rule 108 (unary_expr -> unary_operation_opt primary_expr .)
    DIV             reduce using rule 108 (unary_expr -> unary_operation_opt primary_expr .)
    SEMICOLON       reduce using rule 108 (unary_expr -> unary_operation_opt primary_expr .)
    RPAREN          reduce using rule 108 (unary_expr -> unary_operation_opt primary_expr .)
    LPAREN          reduce using rule 108 (unary_expr -> unary_operation_opt primary_expr .)
    COMMA           reduce using rule 108 (unary_expr -> unary_operation_opt primary_expr .)
    ID              reduce using rule 108 (unary_expr -> unary_operation_opt primary_expr .)
    FUNC            reduce using rule 108 (unary_expr -> unary_operation_opt primary_expr .)
    RBRACE          reduce using rule 108 (unary_expr -> unary_operation_opt primary_expr .)
    RBRACKET        reduce using rule 108 (unary_expr -> unary_operation_opt primary_expr .)
    LBRACKET        shift and go to state 161
    LANGRBRACKET    shift and go to state 165

  ! LBRACKET        [ reduce using rule 108 (unary_expr -> unary_operation_opt primary_expr .) ]
  ! LANGRBRACKET    [ reduce using rule 108 (unary_expr -> unary_operation_opt primary_expr .) ]
  ! LPAREN          [ reduce using rule 137 (empty -> .) ]

    generics_specialization_list_opt shift and go to state 162
    generics_specialization_list   shift and go to state 163
    empty                          shift and go to state 164

state 95

    (111) primary_expr -> operand .

    LBRACKET        reduce using rule 111 (primary_expr -> operand .)
    LANGRBRACKET    reduce using rule 111 (primary_expr -> operand .)
    LPAREN          reduce using rule 111 (primary_expr -> operand .)
    ASSIGN          reduce using rule 111 (primary_expr -> operand .)
    PLUS            reduce using rule 111 (primary_expr -> operand .)
    MINUS           reduce using rule 111 (primary_expr -> operand .)
    MUL             reduce using rule 111 (primary_expr -> operand .)
    DIV             reduce using rule 111 (primary_expr -> operand .)
    SEMICOLON       reduce using rule 111 (primary_expr -> operand .)
    RPAREN          reduce using rule 111 (primary_expr -> operand .)
    COMMA           reduce using rule 111 (primary_expr -> operand .)
    ID              reduce using rule 111 (primary_expr -> operand .)
    FUNC            reduce using rule 111 (primary_expr -> operand .)
    RBRACE          reduce using rule 111 (primary_expr -> operand .)
    RBRACKET        reduce using rule 111 (primary_expr -> operand .)


state 96

    (112) primary_expr -> member_expr .

    LBRACKET        reduce using rule 112 (primary_expr -> member_expr .)
    LANGRBRACKET    reduce using rule 112 (primary_expr -> member_expr .)
    LPAREN          reduce using rule 112 (primary_expr -> member_expr .)
    ASSIGN          reduce using rule 112 (primary_expr -> member_expr .)
    PLUS            reduce using rule 112 (primary_expr -> member_expr .)
    MINUS           reduce using rule 112 (primary_expr -> member_expr .)
    MUL             reduce using rule 112 (primary_expr -> member_expr .)
    DIV             reduce using rule 112 (primary_expr -> member_expr .)
    SEMICOLON       reduce using rule 112 (primary_expr -> member_expr .)
    RPAREN          reduce using rule 112 (primary_expr -> member_expr .)
    COMMA           reduce using rule 112 (primary_expr -> member_expr .)
    ID              reduce using rule 112 (primary_expr -> member_expr .)
    FUNC            reduce using rule 112 (primary_expr -> member_expr .)
    RBRACE          reduce using rule 112 (primary_expr -> member_expr .)
    RBRACKET        reduce using rule 112 (primary_expr -> member_expr .)


state 97

    (113) primary_expr -> index_expr .

    LBRACKET        reduce using rule 113 (primary_expr -> index_expr .)
    LANGRBRACKET    reduce using rule 113 (primary_expr -> index_expr .)
    LPAREN          reduce using rule 113 (primary_expr -> index_expr .)
    ASSIGN          reduce using rule 113 (primary_expr -> index_expr .)
    PLUS            reduce using rule 113 (primary_expr -> index_expr .)
    MINUS           reduce using rule 113 (primary_expr -> index_expr .)
    MUL             reduce using rule 113 (primary_expr -> index_expr .)
    DIV             reduce using rule 113 (primary_expr -> index_expr .)
    SEMICOLON       reduce using rule 113 (primary_expr -> index_expr .)
    RPAREN          reduce using rule 113 (primary_expr -> index_expr .)
    COMMA           reduce using rule 113 (primary_expr -> index_expr .)
    ID              reduce using rule 113 (primary_expr -> index_expr .)
    FUNC            reduce using rule 113 (primary_expr -> index_expr .)
    RBRACE          reduce using rule 113 (primary_expr -> index_expr .)
    RBRACKET        reduce using rule 113 (primary_expr -> index_expr .)


state 98

    (114) primary_expr -> cast_expr .

    LBRACKET        reduce using rule 114 (primary_expr -> cast_expr .)
    LANGRBRACKET    reduce using rule 114 (primary_expr -> cast_expr .)
    LPAREN          reduce using rule 114 (primary_expr -> cast_expr .)
    ASSIGN          reduce using rule 114 (primary_expr -> cast_expr .)
    PLUS            reduce using rule 114 (primary_expr -> cast_expr .)
    MINUS           reduce using rule 114 (primary_expr -> cast_expr .)
    MUL             reduce using rule 114 (primary_expr -> cast_expr .)
    DIV             reduce using rule 114 (primary_expr -> cast_expr .)
    SEMICOLON       reduce using rule 114 (primary_expr -> cast_expr .)
    RPAREN          reduce using rule 114 (primary_expr -> cast_expr .)
    COMMA           reduce using rule 114 (primary_expr -> cast_expr .)
    ID              reduce using rule 114 (primary_expr -> cast_expr .)
    FUNC            reduce using rule 114 (primary_expr -> cast_expr .)
    RBRACE          reduce using rule 114 (primary_expr -> cast_expr .)
    RBRACKET        reduce using rule 114 (primary_expr -> cast_expr .)


state 99

    (115) primary_expr -> new_expr .

    LBRACKET        reduce using rule 115 (primary_expr -> new_expr .)
    LANGRBRACKET    reduce using rule 115 (primary_expr -> new_expr .)
    LPAREN          reduce using rule 115 (primary_expr -> new_expr .)
    ASSIGN          reduce using rule 115 (primary_expr -> new_expr .)
    PLUS            reduce using rule 115 (primary_expr -> new_expr .)
    MINUS           reduce using rule 115 (primary_expr -> new_expr .)
    MUL             reduce using rule 115 (primary_expr -> new_expr .)
    DIV             reduce using rule 115 (primary_expr -> new_expr .)
    SEMICOLON       reduce using rule 115 (primary_expr -> new_expr .)
    RPAREN          reduce using rule 115 (primary_expr -> new_expr .)
    COMMA           reduce using rule 115 (primary_expr -> new_expr .)
    ID              reduce using rule 115 (primary_expr -> new_expr .)
    FUNC            reduce using rule 115 (primary_expr -> new_expr .)
    RBRACE          reduce using rule 115 (primary_expr -> new_expr .)
    RBRACKET        reduce using rule 115 (primary_expr -> new_expr .)


state 100

    (116) primary_expr -> call_expr .

    LBRACKET        reduce using rule 116 (primary_expr -> call_expr .)
    LANGRBRACKET    reduce using rule 116 (primary_expr -> call_expr .)
    LPAREN          reduce using rule 116 (primary_expr -> call_expr .)
    ASSIGN          reduce using rule 116 (primary_expr -> call_expr .)
    PLUS            reduce using rule 116 (primary_expr -> call_expr .)
    MINUS           reduce using rule 116 (primary_expr -> call_expr .)
    MUL             reduce using rule 116 (primary_expr -> call_expr .)
    DIV             reduce using rule 116 (primary_expr -> call_expr .)
    SEMICOLON       reduce using rule 116 (primary_expr -> call_expr .)
    RPAREN          reduce using rule 116 (primary_expr -> call_expr .)
    COMMA           reduce using rule 116 (primary_expr -> call_expr .)
    ID              reduce using rule 116 (primary_expr -> call_expr .)
    FUNC            reduce using rule 116 (primary_expr -> call_expr .)
    RBRACE          reduce using rule 116 (primary_expr -> call_expr .)
    RBRACKET        reduce using rule 116 (primary_expr -> call_expr .)


state 101

    (117) operand -> INT .

    LBRACKET        reduce using rule 117 (operand -> INT .)
    LANGRBRACKET    reduce using rule 117 (operand -> INT .)
    LPAREN          reduce using rule 117 (operand -> INT .)
    ASSIGN          reduce using rule 117 (operand -> INT .)
    PLUS            reduce using rule 117 (operand -> INT .)
    MINUS           reduce using rule 117 (operand -> INT .)
    MUL             reduce using rule 117 (operand -> INT .)
    DIV             reduce using rule 117 (operand -> INT .)
    SEMICOLON       reduce using rule 117 (operand -> INT .)
    RPAREN          reduce using rule 117 (operand -> INT .)
    COMMA           reduce using rule 117 (operand -> INT .)
    ID              reduce using rule 117 (operand -> INT .)
    FUNC            reduce using rule 117 (operand -> INT .)
    RBRACE          reduce using rule 117 (operand -> INT .)
    RBRACKET        reduce using rule 117 (operand -> INT .)


state 102

    (118) operand -> FLOAT .

    LBRACKET        reduce using rule 118 (operand -> FLOAT .)
    LANGRBRACKET    reduce using rule 118 (operand -> FLOAT .)
    LPAREN          reduce using rule 118 (operand -> FLOAT .)
    ASSIGN          reduce using rule 118 (operand -> FLOAT .)
    PLUS            reduce using rule 118 (operand -> FLOAT .)
    MINUS           reduce using rule 118 (operand -> FLOAT .)
    MUL             reduce using rule 118 (operand -> FLOAT .)
    DIV             reduce using rule 118 (operand -> FLOAT .)
    SEMICOLON       reduce using rule 118 (operand -> FLOAT .)
    RPAREN          reduce using rule 118 (operand -> FLOAT .)
    COMMA           reduce using rule 118 (operand -> FLOAT .)
    ID              reduce using rule 118 (operand -> FLOAT .)
    FUNC            reduce using rule 118 (operand -> FLOAT .)
    RBRACE          reduce using rule 118 (operand -> FLOAT .)
    RBRACKET        reduce using rule 118 (operand -> FLOAT .)


state 103

    (119) operand -> DOUBLE .

    LBRACKET        reduce using rule 119 (operand -> DOUBLE .)
    LANGRBRACKET    reduce using rule 119 (operand -> DOUBLE .)
    LPAREN          reduce using rule 119 (operand -> DOUBLE .)
    ASSIGN          reduce using rule 119 (operand -> DOUBLE .)
    PLUS            reduce using rule 119 (operand -> DOUBLE .)
    MINUS           reduce using rule 119 (operand -> DOUBLE .)
    MUL             reduce using rule 119 (operand -> DOUBLE .)
    DIV             reduce using rule 119 (operand -> DOUBLE .)
    SEMICOLON       reduce using rule 119 (operand -> DOUBLE .)
    RPAREN          reduce using rule 119 (operand -> DOUBLE .)
    COMMA           reduce using rule 119 (operand -> DOUBLE .)
    ID              reduce using rule 119 (operand -> DOUBLE .)
    FUNC            reduce using rule 119 (operand -> DOUBLE .)
    RBRACE          reduce using rule 119 (operand -> DOUBLE .)
    RBRACKET        reduce using rule 119 (operand -> DOUBLE .)


state 104

    (120) operand -> ID .
    (122) member_expr -> ID . DOT ID
    (40) complex_type -> ID .

  ! reduce/reduce conflict for LPAREN resolved using rule 40 (complex_type -> ID .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 40 (complex_type -> ID .)
    LANGRBRACKET    reduce using rule 120 (operand -> ID .)
    ASSIGN          reduce using rule 120 (operand -> ID .)
    PLUS            reduce using rule 120 (operand -> ID .)
    MINUS           reduce using rule 120 (operand -> ID .)
    MUL             reduce using rule 120 (operand -> ID .)
    DIV             reduce using rule 120 (operand -> ID .)
    SEMICOLON       reduce using rule 120 (operand -> ID .)
    RPAREN          reduce using rule 120 (operand -> ID .)
    COMMA           reduce using rule 120 (operand -> ID .)
    ID              reduce using rule 120 (operand -> ID .)
    FUNC            reduce using rule 120 (operand -> ID .)
    RBRACE          reduce using rule 120 (operand -> ID .)
    RBRACKET        reduce using rule 120 (operand -> ID .)
    DOT             shift and go to state 166
    LPAREN          reduce using rule 40 (complex_type -> ID .)
    LBRACKET        reduce using rule 40 (complex_type -> ID .)
    REF             reduce using rule 40 (complex_type -> ID .)

  ! LBRACKET        [ reduce using rule 120 (operand -> ID .) ]
  ! LPAREN          [ reduce using rule 120 (operand -> ID .) ]


state 105

    (121) operand -> LPAREN . expression RPAREN
    (124) cast_expr -> LPAREN . type_spec RPAREN expression
    (100) expression -> . assign_expr
    (101) expression -> . binary_expr
    (102) expression -> . unary_expr
    (22) type_spec -> . simple_type
    (23) type_spec -> . complex_type
    (24) type_spec -> . array_type
    (25) type_spec -> . reference_type
    (26) type_spec -> . function_type
    (103) assign_expr -> . expression ASSIGN expression
    (104) binary_expr -> . expression PLUS expression
    (105) binary_expr -> . expression MINUS expression
    (106) binary_expr -> . expression MUL expression
    (107) binary_expr -> . expression DIV expression
    (108) unary_expr -> . unary_operation_opt primary_expr
    (27) simple_type -> . VOID
    (28) simple_type -> . BOOL
    (29) simple_type -> . I8
    (30) simple_type -> . U8
    (31) simple_type -> . I16
    (32) simple_type -> . U16
    (33) simple_type -> . I32
    (34) simple_type -> . U32
    (35) simple_type -> . I64
    (36) simple_type -> . U64
    (37) simple_type -> . F16
    (38) simple_type -> . F32
    (39) simple_type -> . F64
    (40) complex_type -> . ID
    (41) array_type -> . type_spec LBRACKET int_literal_opt RBRACKET
    (44) reference_type -> . type_spec REF
    (45) function_type -> . function_sign
    (109) unary_operation_opt -> . NOT
    (110) unary_operation_opt -> . empty
    (58) function_sign -> . generics_type_list_opt LPAREN parameter_decl_list_opt RPAREN type_spec_assigntype_opt
    (137) empty -> .
    (48) generics_type_list_opt -> . generics_type_list
    (49) generics_type_list_opt -> . empty
    (67) generics_type_list -> . LANGRBRACKET generics_type generics_type_comma_nest RANGRBRACKET

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for I8 resolved as shift
  ! shift/reduce conflict for U8 resolved as shift
  ! shift/reduce conflict for I16 resolved as shift
  ! shift/reduce conflict for U16 resolved as shift
  ! shift/reduce conflict for I32 resolved as shift
  ! shift/reduce conflict for U32 resolved as shift
  ! shift/reduce conflict for I64 resolved as shift
  ! shift/reduce conflict for U64 resolved as shift
  ! shift/reduce conflict for F16 resolved as shift
  ! shift/reduce conflict for F32 resolved as shift
  ! shift/reduce conflict for F64 resolved as shift
  ! shift/reduce conflict for LANGRBRACKET resolved as shift
    VOID            shift and go to state 112
    BOOL            shift and go to state 113
    I8              shift and go to state 114
    U8              shift and go to state 115
    I16             shift and go to state 116
    U16             shift and go to state 117
    I32             shift and go to state 118
    U32             shift and go to state 119
    I64             shift and go to state 120
    U64             shift and go to state 121
    F16             shift and go to state 122
    F32             shift and go to state 123
    F64             shift and go to state 124
    ID              shift and go to state 129
    NOT             shift and go to state 62
    INT             reduce using rule 137 (empty -> .)
    FLOAT           reduce using rule 137 (empty -> .)
    DOUBLE          reduce using rule 137 (empty -> .)
    LPAREN          reduce using rule 137 (empty -> .)
    LANGRBRACKET    shift and go to state 35

  ! ID              [ reduce using rule 137 (empty -> .) ]
  ! VOID            [ reduce using rule 137 (empty -> .) ]
  ! BOOL            [ reduce using rule 137 (empty -> .) ]
  ! I8              [ reduce using rule 137 (empty -> .) ]
  ! U8              [ reduce using rule 137 (empty -> .) ]
  ! I16             [ reduce using rule 137 (empty -> .) ]
  ! U16             [ reduce using rule 137 (empty -> .) ]
  ! I32             [ reduce using rule 137 (empty -> .) ]
  ! U32             [ reduce using rule 137 (empty -> .) ]
  ! I64             [ reduce using rule 137 (empty -> .) ]
  ! U64             [ reduce using rule 137 (empty -> .) ]
  ! F16             [ reduce using rule 137 (empty -> .) ]
  ! F32             [ reduce using rule 137 (empty -> .) ]
  ! F64             [ reduce using rule 137 (empty -> .) ]
  ! LANGRBRACKET    [ reduce using rule 137 (empty -> .) ]

    expression                     shift and go to state 167
    type_spec                      shift and go to state 168
    assign_expr                    shift and go to state 58
    binary_expr                    shift and go to state 59
    unary_expr                     shift and go to state 60
    simple_type                    shift and go to state 107
    complex_type                   shift and go to state 108
    array_type                     shift and go to state 109
    reference_type                 shift and go to state 110
    function_type                  shift and go to state 111
    unary_operation_opt            shift and go to state 61
    function_sign                  shift and go to state 125
    empty                          shift and go to state 169
    generics_type_list_opt         shift and go to state 71
    generics_type_list             shift and go to state 33

state 106

    (125) new_expr -> type_spec . LPAREN parameter_list_opt RPAREN
    (41) array_type -> type_spec . LBRACKET int_literal_opt RBRACKET
    (44) reference_type -> type_spec . REF

    LPAREN          shift and go to state 170
    LBRACKET        shift and go to state 171
    REF             shift and go to state 172


state 107

    (22) type_spec -> simple_type .

    LPAREN          reduce using rule 22 (type_spec -> simple_type .)
    LBRACKET        reduce using rule 22 (type_spec -> simple_type .)
    REF             reduce using rule 22 (type_spec -> simple_type .)
    ASSIGN          reduce using rule 22 (type_spec -> simple_type .)
    COMMA           reduce using rule 22 (type_spec -> simple_type .)
    RPAREN          reduce using rule 22 (type_spec -> simple_type .)
    SEMICOLON       reduce using rule 22 (type_spec -> simple_type .)
    RANGRBRACKET    reduce using rule 22 (type_spec -> simple_type .)
    LBRACE          reduce using rule 22 (type_spec -> simple_type .)
    ID              reduce using rule 22 (type_spec -> simple_type .)
    FUNC            reduce using rule 22 (type_spec -> simple_type .)
    RBRACE          reduce using rule 22 (type_spec -> simple_type .)


state 108

    (23) type_spec -> complex_type .

    LPAREN          reduce using rule 23 (type_spec -> complex_type .)
    LBRACKET        reduce using rule 23 (type_spec -> complex_type .)
    REF             reduce using rule 23 (type_spec -> complex_type .)
    ASSIGN          reduce using rule 23 (type_spec -> complex_type .)
    COMMA           reduce using rule 23 (type_spec -> complex_type .)
    RPAREN          reduce using rule 23 (type_spec -> complex_type .)
    SEMICOLON       reduce using rule 23 (type_spec -> complex_type .)
    RANGRBRACKET    reduce using rule 23 (type_spec -> complex_type .)
    LBRACE          reduce using rule 23 (type_spec -> complex_type .)
    ID              reduce using rule 23 (type_spec -> complex_type .)
    FUNC            reduce using rule 23 (type_spec -> complex_type .)
    RBRACE          reduce using rule 23 (type_spec -> complex_type .)


state 109

    (24) type_spec -> array_type .

    LPAREN          reduce using rule 24 (type_spec -> array_type .)
    LBRACKET        reduce using rule 24 (type_spec -> array_type .)
    REF             reduce using rule 24 (type_spec -> array_type .)
    ASSIGN          reduce using rule 24 (type_spec -> array_type .)
    COMMA           reduce using rule 24 (type_spec -> array_type .)
    RPAREN          reduce using rule 24 (type_spec -> array_type .)
    SEMICOLON       reduce using rule 24 (type_spec -> array_type .)
    RANGRBRACKET    reduce using rule 24 (type_spec -> array_type .)
    LBRACE          reduce using rule 24 (type_spec -> array_type .)
    ID              reduce using rule 24 (type_spec -> array_type .)
    FUNC            reduce using rule 24 (type_spec -> array_type .)
    RBRACE          reduce using rule 24 (type_spec -> array_type .)


state 110

    (25) type_spec -> reference_type .

    LPAREN          reduce using rule 25 (type_spec -> reference_type .)
    LBRACKET        reduce using rule 25 (type_spec -> reference_type .)
    REF             reduce using rule 25 (type_spec -> reference_type .)
    ASSIGN          reduce using rule 25 (type_spec -> reference_type .)
    COMMA           reduce using rule 25 (type_spec -> reference_type .)
    RPAREN          reduce using rule 25 (type_spec -> reference_type .)
    SEMICOLON       reduce using rule 25 (type_spec -> reference_type .)
    RANGRBRACKET    reduce using rule 25 (type_spec -> reference_type .)
    LBRACE          reduce using rule 25 (type_spec -> reference_type .)
    ID              reduce using rule 25 (type_spec -> reference_type .)
    FUNC            reduce using rule 25 (type_spec -> reference_type .)
    RBRACE          reduce using rule 25 (type_spec -> reference_type .)


state 111

    (26) type_spec -> function_type .

    LPAREN          reduce using rule 26 (type_spec -> function_type .)
    LBRACKET        reduce using rule 26 (type_spec -> function_type .)
    REF             reduce using rule 26 (type_spec -> function_type .)
    ASSIGN          reduce using rule 26 (type_spec -> function_type .)
    COMMA           reduce using rule 26 (type_spec -> function_type .)
    RPAREN          reduce using rule 26 (type_spec -> function_type .)
    SEMICOLON       reduce using rule 26 (type_spec -> function_type .)
    RANGRBRACKET    reduce using rule 26 (type_spec -> function_type .)
    LBRACE          reduce using rule 26 (type_spec -> function_type .)
    ID              reduce using rule 26 (type_spec -> function_type .)
    FUNC            reduce using rule 26 (type_spec -> function_type .)
    RBRACE          reduce using rule 26 (type_spec -> function_type .)


state 112

    (27) simple_type -> VOID .

    LPAREN          reduce using rule 27 (simple_type -> VOID .)
    LBRACKET        reduce using rule 27 (simple_type -> VOID .)
    REF             reduce using rule 27 (simple_type -> VOID .)
    ASSIGN          reduce using rule 27 (simple_type -> VOID .)
    COMMA           reduce using rule 27 (simple_type -> VOID .)
    RPAREN          reduce using rule 27 (simple_type -> VOID .)
    SEMICOLON       reduce using rule 27 (simple_type -> VOID .)
    RANGRBRACKET    reduce using rule 27 (simple_type -> VOID .)
    LBRACE          reduce using rule 27 (simple_type -> VOID .)
    ID              reduce using rule 27 (simple_type -> VOID .)
    FUNC            reduce using rule 27 (simple_type -> VOID .)
    RBRACE          reduce using rule 27 (simple_type -> VOID .)


state 113

    (28) simple_type -> BOOL .

    LPAREN          reduce using rule 28 (simple_type -> BOOL .)
    LBRACKET        reduce using rule 28 (simple_type -> BOOL .)
    REF             reduce using rule 28 (simple_type -> BOOL .)
    ASSIGN          reduce using rule 28 (simple_type -> BOOL .)
    COMMA           reduce using rule 28 (simple_type -> BOOL .)
    RPAREN          reduce using rule 28 (simple_type -> BOOL .)
    SEMICOLON       reduce using rule 28 (simple_type -> BOOL .)
    RANGRBRACKET    reduce using rule 28 (simple_type -> BOOL .)
    LBRACE          reduce using rule 28 (simple_type -> BOOL .)
    ID              reduce using rule 28 (simple_type -> BOOL .)
    FUNC            reduce using rule 28 (simple_type -> BOOL .)
    RBRACE          reduce using rule 28 (simple_type -> BOOL .)


state 114

    (29) simple_type -> I8 .

    LPAREN          reduce using rule 29 (simple_type -> I8 .)
    LBRACKET        reduce using rule 29 (simple_type -> I8 .)
    REF             reduce using rule 29 (simple_type -> I8 .)
    ASSIGN          reduce using rule 29 (simple_type -> I8 .)
    COMMA           reduce using rule 29 (simple_type -> I8 .)
    RPAREN          reduce using rule 29 (simple_type -> I8 .)
    SEMICOLON       reduce using rule 29 (simple_type -> I8 .)
    RANGRBRACKET    reduce using rule 29 (simple_type -> I8 .)
    LBRACE          reduce using rule 29 (simple_type -> I8 .)
    ID              reduce using rule 29 (simple_type -> I8 .)
    FUNC            reduce using rule 29 (simple_type -> I8 .)
    RBRACE          reduce using rule 29 (simple_type -> I8 .)


state 115

    (30) simple_type -> U8 .

    LPAREN          reduce using rule 30 (simple_type -> U8 .)
    LBRACKET        reduce using rule 30 (simple_type -> U8 .)
    REF             reduce using rule 30 (simple_type -> U8 .)
    ASSIGN          reduce using rule 30 (simple_type -> U8 .)
    COMMA           reduce using rule 30 (simple_type -> U8 .)
    RPAREN          reduce using rule 30 (simple_type -> U8 .)
    SEMICOLON       reduce using rule 30 (simple_type -> U8 .)
    RANGRBRACKET    reduce using rule 30 (simple_type -> U8 .)
    LBRACE          reduce using rule 30 (simple_type -> U8 .)
    ID              reduce using rule 30 (simple_type -> U8 .)
    FUNC            reduce using rule 30 (simple_type -> U8 .)
    RBRACE          reduce using rule 30 (simple_type -> U8 .)


state 116

    (31) simple_type -> I16 .

    LPAREN          reduce using rule 31 (simple_type -> I16 .)
    LBRACKET        reduce using rule 31 (simple_type -> I16 .)
    REF             reduce using rule 31 (simple_type -> I16 .)
    ASSIGN          reduce using rule 31 (simple_type -> I16 .)
    COMMA           reduce using rule 31 (simple_type -> I16 .)
    RPAREN          reduce using rule 31 (simple_type -> I16 .)
    SEMICOLON       reduce using rule 31 (simple_type -> I16 .)
    RANGRBRACKET    reduce using rule 31 (simple_type -> I16 .)
    LBRACE          reduce using rule 31 (simple_type -> I16 .)
    ID              reduce using rule 31 (simple_type -> I16 .)
    FUNC            reduce using rule 31 (simple_type -> I16 .)
    RBRACE          reduce using rule 31 (simple_type -> I16 .)


state 117

    (32) simple_type -> U16 .

    LPAREN          reduce using rule 32 (simple_type -> U16 .)
    LBRACKET        reduce using rule 32 (simple_type -> U16 .)
    REF             reduce using rule 32 (simple_type -> U16 .)
    ASSIGN          reduce using rule 32 (simple_type -> U16 .)
    COMMA           reduce using rule 32 (simple_type -> U16 .)
    RPAREN          reduce using rule 32 (simple_type -> U16 .)
    SEMICOLON       reduce using rule 32 (simple_type -> U16 .)
    RANGRBRACKET    reduce using rule 32 (simple_type -> U16 .)
    LBRACE          reduce using rule 32 (simple_type -> U16 .)
    ID              reduce using rule 32 (simple_type -> U16 .)
    FUNC            reduce using rule 32 (simple_type -> U16 .)
    RBRACE          reduce using rule 32 (simple_type -> U16 .)


state 118

    (33) simple_type -> I32 .

    LPAREN          reduce using rule 33 (simple_type -> I32 .)
    LBRACKET        reduce using rule 33 (simple_type -> I32 .)
    REF             reduce using rule 33 (simple_type -> I32 .)
    ASSIGN          reduce using rule 33 (simple_type -> I32 .)
    COMMA           reduce using rule 33 (simple_type -> I32 .)
    RPAREN          reduce using rule 33 (simple_type -> I32 .)
    SEMICOLON       reduce using rule 33 (simple_type -> I32 .)
    RANGRBRACKET    reduce using rule 33 (simple_type -> I32 .)
    LBRACE          reduce using rule 33 (simple_type -> I32 .)
    ID              reduce using rule 33 (simple_type -> I32 .)
    FUNC            reduce using rule 33 (simple_type -> I32 .)
    RBRACE          reduce using rule 33 (simple_type -> I32 .)


state 119

    (34) simple_type -> U32 .

    LPAREN          reduce using rule 34 (simple_type -> U32 .)
    LBRACKET        reduce using rule 34 (simple_type -> U32 .)
    REF             reduce using rule 34 (simple_type -> U32 .)
    ASSIGN          reduce using rule 34 (simple_type -> U32 .)
    COMMA           reduce using rule 34 (simple_type -> U32 .)
    RPAREN          reduce using rule 34 (simple_type -> U32 .)
    SEMICOLON       reduce using rule 34 (simple_type -> U32 .)
    RANGRBRACKET    reduce using rule 34 (simple_type -> U32 .)
    LBRACE          reduce using rule 34 (simple_type -> U32 .)
    ID              reduce using rule 34 (simple_type -> U32 .)
    FUNC            reduce using rule 34 (simple_type -> U32 .)
    RBRACE          reduce using rule 34 (simple_type -> U32 .)


state 120

    (35) simple_type -> I64 .

    LPAREN          reduce using rule 35 (simple_type -> I64 .)
    LBRACKET        reduce using rule 35 (simple_type -> I64 .)
    REF             reduce using rule 35 (simple_type -> I64 .)
    ASSIGN          reduce using rule 35 (simple_type -> I64 .)
    COMMA           reduce using rule 35 (simple_type -> I64 .)
    RPAREN          reduce using rule 35 (simple_type -> I64 .)
    SEMICOLON       reduce using rule 35 (simple_type -> I64 .)
    RANGRBRACKET    reduce using rule 35 (simple_type -> I64 .)
    LBRACE          reduce using rule 35 (simple_type -> I64 .)
    ID              reduce using rule 35 (simple_type -> I64 .)
    FUNC            reduce using rule 35 (simple_type -> I64 .)
    RBRACE          reduce using rule 35 (simple_type -> I64 .)


state 121

    (36) simple_type -> U64 .

    LPAREN          reduce using rule 36 (simple_type -> U64 .)
    LBRACKET        reduce using rule 36 (simple_type -> U64 .)
    REF             reduce using rule 36 (simple_type -> U64 .)
    ASSIGN          reduce using rule 36 (simple_type -> U64 .)
    COMMA           reduce using rule 36 (simple_type -> U64 .)
    RPAREN          reduce using rule 36 (simple_type -> U64 .)
    SEMICOLON       reduce using rule 36 (simple_type -> U64 .)
    RANGRBRACKET    reduce using rule 36 (simple_type -> U64 .)
    LBRACE          reduce using rule 36 (simple_type -> U64 .)
    ID              reduce using rule 36 (simple_type -> U64 .)
    FUNC            reduce using rule 36 (simple_type -> U64 .)
    RBRACE          reduce using rule 36 (simple_type -> U64 .)


state 122

    (37) simple_type -> F16 .

    LPAREN          reduce using rule 37 (simple_type -> F16 .)
    LBRACKET        reduce using rule 37 (simple_type -> F16 .)
    REF             reduce using rule 37 (simple_type -> F16 .)
    ASSIGN          reduce using rule 37 (simple_type -> F16 .)
    COMMA           reduce using rule 37 (simple_type -> F16 .)
    RPAREN          reduce using rule 37 (simple_type -> F16 .)
    SEMICOLON       reduce using rule 37 (simple_type -> F16 .)
    RANGRBRACKET    reduce using rule 37 (simple_type -> F16 .)
    LBRACE          reduce using rule 37 (simple_type -> F16 .)
    ID              reduce using rule 37 (simple_type -> F16 .)
    FUNC            reduce using rule 37 (simple_type -> F16 .)
    RBRACE          reduce using rule 37 (simple_type -> F16 .)


state 123

    (38) simple_type -> F32 .

    LPAREN          reduce using rule 38 (simple_type -> F32 .)
    LBRACKET        reduce using rule 38 (simple_type -> F32 .)
    REF             reduce using rule 38 (simple_type -> F32 .)
    ASSIGN          reduce using rule 38 (simple_type -> F32 .)
    COMMA           reduce using rule 38 (simple_type -> F32 .)
    RPAREN          reduce using rule 38 (simple_type -> F32 .)
    SEMICOLON       reduce using rule 38 (simple_type -> F32 .)
    RANGRBRACKET    reduce using rule 38 (simple_type -> F32 .)
    LBRACE          reduce using rule 38 (simple_type -> F32 .)
    ID              reduce using rule 38 (simple_type -> F32 .)
    FUNC            reduce using rule 38 (simple_type -> F32 .)
    RBRACE          reduce using rule 38 (simple_type -> F32 .)


state 124

    (39) simple_type -> F64 .

    LPAREN          reduce using rule 39 (simple_type -> F64 .)
    LBRACKET        reduce using rule 39 (simple_type -> F64 .)
    REF             reduce using rule 39 (simple_type -> F64 .)
    ASSIGN          reduce using rule 39 (simple_type -> F64 .)
    COMMA           reduce using rule 39 (simple_type -> F64 .)
    RPAREN          reduce using rule 39 (simple_type -> F64 .)
    SEMICOLON       reduce using rule 39 (simple_type -> F64 .)
    RANGRBRACKET    reduce using rule 39 (simple_type -> F64 .)
    LBRACE          reduce using rule 39 (simple_type -> F64 .)
    ID              reduce using rule 39 (simple_type -> F64 .)
    FUNC            reduce using rule 39 (simple_type -> F64 .)
    RBRACE          reduce using rule 39 (simple_type -> F64 .)


state 125

    (45) function_type -> function_sign .

    LPAREN          reduce using rule 45 (function_type -> function_sign .)
    LBRACKET        reduce using rule 45 (function_type -> function_sign .)
    REF             reduce using rule 45 (function_type -> function_sign .)
    ASSIGN          reduce using rule 45 (function_type -> function_sign .)
    COMMA           reduce using rule 45 (function_type -> function_sign .)
    RPAREN          reduce using rule 45 (function_type -> function_sign .)
    SEMICOLON       reduce using rule 45 (function_type -> function_sign .)
    RANGRBRACKET    reduce using rule 45 (function_type -> function_sign .)
    LBRACE          reduce using rule 45 (function_type -> function_sign .)
    ID              reduce using rule 45 (function_type -> function_sign .)
    FUNC            reduce using rule 45 (function_type -> function_sign .)
    RBRACE          reduce using rule 45 (function_type -> function_sign .)


state 126

    (14) declarator_nest -> COMMA declarator . declarator_nest
    (14) declarator_nest -> . COMMA declarator declarator_nest
    (15) declarator_nest -> . empty
    (137) empty -> .

    COMMA           shift and go to state 64
    SEMICOLON       reduce using rule 137 (empty -> .)

    declarator_nest                shift and go to state 173
    empty                          shift and go to state 65

state 127

    (17) declarator -> ID type_spec_colon_opt ASSIGN . expression
    (100) expression -> . assign_expr
    (101) expression -> . binary_expr
    (102) expression -> . unary_expr
    (103) assign_expr -> . expression ASSIGN expression
    (104) binary_expr -> . expression PLUS expression
    (105) binary_expr -> . expression MINUS expression
    (106) binary_expr -> . expression MUL expression
    (107) binary_expr -> . expression DIV expression
    (108) unary_expr -> . unary_operation_opt primary_expr
    (109) unary_operation_opt -> . NOT
    (110) unary_operation_opt -> . empty
    (137) empty -> .

    NOT             shift and go to state 62
    INT             reduce using rule 137 (empty -> .)
    FLOAT           reduce using rule 137 (empty -> .)
    DOUBLE          reduce using rule 137 (empty -> .)
    ID              reduce using rule 137 (empty -> .)
    LPAREN          reduce using rule 137 (empty -> .)
    VOID            reduce using rule 137 (empty -> .)
    BOOL            reduce using rule 137 (empty -> .)
    I8              reduce using rule 137 (empty -> .)
    U8              reduce using rule 137 (empty -> .)
    I16             reduce using rule 137 (empty -> .)
    U16             reduce using rule 137 (empty -> .)
    I32             reduce using rule 137 (empty -> .)
    U32             reduce using rule 137 (empty -> .)
    I64             reduce using rule 137 (empty -> .)
    U64             reduce using rule 137 (empty -> .)
    F16             reduce using rule 137 (empty -> .)
    F32             reduce using rule 137 (empty -> .)
    F64             reduce using rule 137 (empty -> .)
    LANGRBRACKET    reduce using rule 137 (empty -> .)

    expression                     shift and go to state 174
    assign_expr                    shift and go to state 58
    binary_expr                    shift and go to state 59
    unary_expr                     shift and go to state 60
    unary_operation_opt            shift and go to state 61
    empty                          shift and go to state 150

state 128

    (18) type_spec_colon_opt -> COLON type_spec .
    (41) array_type -> type_spec . LBRACKET int_literal_opt RBRACKET
    (44) reference_type -> type_spec . REF

    ASSIGN          reduce using rule 18 (type_spec_colon_opt -> COLON type_spec .)
    COMMA           reduce using rule 18 (type_spec_colon_opt -> COLON type_spec .)
    RPAREN          reduce using rule 18 (type_spec_colon_opt -> COLON type_spec .)
    LBRACKET        shift and go to state 171
    REF             shift and go to state 172


state 129

    (40) complex_type -> ID .

    LBRACKET        reduce using rule 40 (complex_type -> ID .)
    REF             reduce using rule 40 (complex_type -> ID .)
    ASSIGN          reduce using rule 40 (complex_type -> ID .)
    COMMA           reduce using rule 40 (complex_type -> ID .)
    RPAREN          reduce using rule 40 (complex_type -> ID .)
    SEMICOLON       reduce using rule 40 (complex_type -> ID .)
    RANGRBRACKET    reduce using rule 40 (complex_type -> ID .)
    LBRACE          reduce using rule 40 (complex_type -> ID .)
    ID              reduce using rule 40 (complex_type -> ID .)
    FUNC            reduce using rule 40 (complex_type -> ID .)
    RBRACE          reduce using rule 40 (complex_type -> ID .)
    LPAREN          reduce using rule 40 (complex_type -> ID .)


state 130

    (58) function_sign -> generics_type_list_opt LPAREN . parameter_decl_list_opt RPAREN type_spec_assigntype_opt
    (59) parameter_decl_list_opt -> . parameter_dcel_list
    (60) parameter_decl_list_opt -> . empty
    (63) parameter_dcel_list -> . parameter_decl parameter_decl_comma_nest
    (137) empty -> .
    (66) parameter_decl -> . ID type_spec_colon_opt

    RPAREN          reduce using rule 137 (empty -> .)
    ID              shift and go to state 179

    parameter_decl_list_opt        shift and go to state 175
    parameter_dcel_list            shift and go to state 176
    empty                          shift and go to state 177
    parameter_decl                 shift and go to state 178

state 131

    (12) type_alias_decl -> TYPE ID ASSIGN type_spec .
    (41) array_type -> type_spec . LBRACKET int_literal_opt RBRACKET
    (44) reference_type -> type_spec . REF

    SEMICOLON       reduce using rule 12 (type_alias_decl -> TYPE ID ASSIGN type_spec .)
    LBRACKET        shift and go to state 171
    REF             shift and go to state 172


state 132

    (46) struct_decl -> STRUCT generics_type_list_opt LBRACE member_decl_nest . RBRACE

    RBRACE          shift and go to state 180


state 133

    (50) member_decl_nest -> member_decl . member_decl_nest
    (50) member_decl_nest -> . member_decl member_decl_nest
    (51) member_decl_nest -> . empty
    (54) member_decl -> . declarator
    (55) member_decl -> . function_def
    (137) empty -> .
    (17) declarator -> . ID type_spec_colon_opt ASSIGN expression
    (21) function_def -> . function_decl block_statement
    (20) function_decl -> . FUNC ID function_sign

    RBRACE          reduce using rule 137 (empty -> .)
    ID              shift and go to state 28
    FUNC            shift and go to state 15

    member_decl                    shift and go to state 133
    member_decl_nest               shift and go to state 181
    empty                          shift and go to state 134
    declarator                     shift and go to state 135
    function_def                   shift and go to state 136
    function_decl                  shift and go to state 137

state 134

    (51) member_decl_nest -> empty .

    RBRACE          reduce using rule 51 (member_decl_nest -> empty .)


state 135

    (54) member_decl -> declarator .

    ID              reduce using rule 54 (member_decl -> declarator .)
    FUNC            reduce using rule 54 (member_decl -> declarator .)
    RBRACE          reduce using rule 54 (member_decl -> declarator .)


state 136

    (55) member_decl -> function_def .

    ID              reduce using rule 55 (member_decl -> function_def .)
    FUNC            reduce using rule 55 (member_decl -> function_def .)
    RBRACE          reduce using rule 55 (member_decl -> function_def .)


state 137

    (21) function_def -> function_decl . block_statement
    (82) block_statement -> . LBRACE statement_nest RBRACE

    LBRACE          shift and go to state 26

    block_statement                shift and go to state 25

state 138

    (67) generics_type_list -> LANGRBRACKET generics_type generics_type_comma_nest . RANGRBRACKET

    RANGRBRACKET    shift and go to state 182


state 139

    (68) generics_type_comma_nest -> COMMA . generics_type generics_type_comma_nest
    (70) generics_type -> . ID generics_type_range_colon_opt

    ID              shift and go to state 75

    generics_type                  shift and go to state 183

state 140

    (69) generics_type_comma_nest -> empty .

    RANGRBRACKET    reduce using rule 69 (generics_type_comma_nest -> empty .)


state 141

    (70) generics_type -> ID generics_type_range_colon_opt .

    COMMA           reduce using rule 70 (generics_type -> ID generics_type_range_colon_opt .)
    RANGRBRACKET    reduce using rule 70 (generics_type -> ID generics_type_range_colon_opt .)


state 142

    (71) generics_type_range_colon_opt -> COLON . generics_type_range
    (73) generics_type_range -> . complex_type
    (40) complex_type -> . ID

    ID              shift and go to state 129

    generics_type_range            shift and go to state 184
    complex_type                   shift and go to state 185

state 143

    (72) generics_type_range_colon_opt -> empty .

    COMMA           reduce using rule 72 (generics_type_range_colon_opt -> empty .)
    RANGRBRACKET    reduce using rule 72 (generics_type_range_colon_opt -> empty .)


state 144

    (47) interface_decl -> INTERFACE generics_type_list_opt LBRACE interface_member_decl_nest . RBRACE

    RBRACE          shift and go to state 186


state 145

    (52) interface_member_decl_nest -> interface_member_decl . interface_member_decl_nest
    (52) interface_member_decl_nest -> . interface_member_decl interface_member_decl_nest
    (53) interface_member_decl_nest -> . empty
    (56) interface_member_decl -> . declarator
    (57) interface_member_decl -> . function_decl
    (137) empty -> .
    (17) declarator -> . ID type_spec_colon_opt ASSIGN expression
    (20) function_decl -> . FUNC ID function_sign

    RBRACE          reduce using rule 137 (empty -> .)
    ID              shift and go to state 28
    FUNC            shift and go to state 15

    interface_member_decl          shift and go to state 145
    interface_member_decl_nest     shift and go to state 187
    empty                          shift and go to state 146
    declarator                     shift and go to state 147
    function_decl                  shift and go to state 148

state 146

    (53) interface_member_decl_nest -> empty .

    RBRACE          reduce using rule 53 (interface_member_decl_nest -> empty .)


state 147

    (56) interface_member_decl -> declarator .

    ID              reduce using rule 56 (interface_member_decl -> declarator .)
    FUNC            reduce using rule 56 (interface_member_decl -> declarator .)
    RBRACE          reduce using rule 56 (interface_member_decl -> declarator .)


state 148

    (57) interface_member_decl -> function_decl .

    ID              reduce using rule 57 (interface_member_decl -> function_decl .)
    FUNC            reduce using rule 57 (interface_member_decl -> function_decl .)
    RBRACE          reduce using rule 57 (interface_member_decl -> function_decl .)


state 149

    (88) if_statement -> IF LPAREN expression . RPAREN statement statement_else_opt
    (103) assign_expr -> expression . ASSIGN expression
    (104) binary_expr -> expression . PLUS expression
    (105) binary_expr -> expression . MINUS expression
    (106) binary_expr -> expression . MUL expression
    (107) binary_expr -> expression . DIV expression

    RPAREN          shift and go to state 188
    ASSIGN          shift and go to state 83
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MUL             shift and go to state 86
    DIV             shift and go to state 87


state 150

    (110) unary_operation_opt -> empty .

    INT             reduce using rule 110 (unary_operation_opt -> empty .)
    FLOAT           reduce using rule 110 (unary_operation_opt -> empty .)
    DOUBLE          reduce using rule 110 (unary_operation_opt -> empty .)
    ID              reduce using rule 110 (unary_operation_opt -> empty .)
    LPAREN          reduce using rule 110 (unary_operation_opt -> empty .)
    VOID            reduce using rule 110 (unary_operation_opt -> empty .)
    BOOL            reduce using rule 110 (unary_operation_opt -> empty .)
    I8              reduce using rule 110 (unary_operation_opt -> empty .)
    U8              reduce using rule 110 (unary_operation_opt -> empty .)
    I16             reduce using rule 110 (unary_operation_opt -> empty .)
    U16             reduce using rule 110 (unary_operation_opt -> empty .)
    I32             reduce using rule 110 (unary_operation_opt -> empty .)
    U32             reduce using rule 110 (unary_operation_opt -> empty .)
    I64             reduce using rule 110 (unary_operation_opt -> empty .)
    U64             reduce using rule 110 (unary_operation_opt -> empty .)
    F16             reduce using rule 110 (unary_operation_opt -> empty .)
    F32             reduce using rule 110 (unary_operation_opt -> empty .)
    F64             reduce using rule 110 (unary_operation_opt -> empty .)
    LANGRBRACKET    reduce using rule 110 (unary_operation_opt -> empty .)


state 151

    (103) assign_expr -> expression ASSIGN expression .
    (103) assign_expr -> expression . ASSIGN expression
    (104) binary_expr -> expression . PLUS expression
    (105) binary_expr -> expression . MINUS expression
    (106) binary_expr -> expression . MUL expression
    (107) binary_expr -> expression . DIV expression

  ! shift/reduce conflict for ASSIGN resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
    SEMICOLON       reduce using rule 103 (assign_expr -> expression ASSIGN expression .)
    RPAREN          reduce using rule 103 (assign_expr -> expression ASSIGN expression .)
    LBRACKET        reduce using rule 103 (assign_expr -> expression ASSIGN expression .)
    LANGRBRACKET    reduce using rule 103 (assign_expr -> expression ASSIGN expression .)
    LPAREN          reduce using rule 103 (assign_expr -> expression ASSIGN expression .)
    COMMA           reduce using rule 103 (assign_expr -> expression ASSIGN expression .)
    ID              reduce using rule 103 (assign_expr -> expression ASSIGN expression .)
    FUNC            reduce using rule 103 (assign_expr -> expression ASSIGN expression .)
    RBRACE          reduce using rule 103 (assign_expr -> expression ASSIGN expression .)
    RBRACKET        reduce using rule 103 (assign_expr -> expression ASSIGN expression .)
    ASSIGN          shift and go to state 83
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MUL             shift and go to state 86
    DIV             shift and go to state 87

  ! ASSIGN          [ reduce using rule 103 (assign_expr -> expression ASSIGN expression .) ]
  ! PLUS            [ reduce using rule 103 (assign_expr -> expression ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 103 (assign_expr -> expression ASSIGN expression .) ]
  ! MUL             [ reduce using rule 103 (assign_expr -> expression ASSIGN expression .) ]
  ! DIV             [ reduce using rule 103 (assign_expr -> expression ASSIGN expression .) ]


state 152

    (104) binary_expr -> expression PLUS expression .
    (103) assign_expr -> expression . ASSIGN expression
    (104) binary_expr -> expression . PLUS expression
    (105) binary_expr -> expression . MINUS expression
    (106) binary_expr -> expression . MUL expression
    (107) binary_expr -> expression . DIV expression

  ! shift/reduce conflict for ASSIGN resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
    SEMICOLON       reduce using rule 104 (binary_expr -> expression PLUS expression .)
    RPAREN          reduce using rule 104 (binary_expr -> expression PLUS expression .)
    LBRACKET        reduce using rule 104 (binary_expr -> expression PLUS expression .)
    LANGRBRACKET    reduce using rule 104 (binary_expr -> expression PLUS expression .)
    LPAREN          reduce using rule 104 (binary_expr -> expression PLUS expression .)
    COMMA           reduce using rule 104 (binary_expr -> expression PLUS expression .)
    ID              reduce using rule 104 (binary_expr -> expression PLUS expression .)
    FUNC            reduce using rule 104 (binary_expr -> expression PLUS expression .)
    RBRACE          reduce using rule 104 (binary_expr -> expression PLUS expression .)
    RBRACKET        reduce using rule 104 (binary_expr -> expression PLUS expression .)
    ASSIGN          shift and go to state 83
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MUL             shift and go to state 86
    DIV             shift and go to state 87

  ! ASSIGN          [ reduce using rule 104 (binary_expr -> expression PLUS expression .) ]
  ! PLUS            [ reduce using rule 104 (binary_expr -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 104 (binary_expr -> expression PLUS expression .) ]
  ! MUL             [ reduce using rule 104 (binary_expr -> expression PLUS expression .) ]
  ! DIV             [ reduce using rule 104 (binary_expr -> expression PLUS expression .) ]


state 153

    (105) binary_expr -> expression MINUS expression .
    (103) assign_expr -> expression . ASSIGN expression
    (104) binary_expr -> expression . PLUS expression
    (105) binary_expr -> expression . MINUS expression
    (106) binary_expr -> expression . MUL expression
    (107) binary_expr -> expression . DIV expression

  ! shift/reduce conflict for ASSIGN resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
    SEMICOLON       reduce using rule 105 (binary_expr -> expression MINUS expression .)
    RPAREN          reduce using rule 105 (binary_expr -> expression MINUS expression .)
    LBRACKET        reduce using rule 105 (binary_expr -> expression MINUS expression .)
    LANGRBRACKET    reduce using rule 105 (binary_expr -> expression MINUS expression .)
    LPAREN          reduce using rule 105 (binary_expr -> expression MINUS expression .)
    COMMA           reduce using rule 105 (binary_expr -> expression MINUS expression .)
    ID              reduce using rule 105 (binary_expr -> expression MINUS expression .)
    FUNC            reduce using rule 105 (binary_expr -> expression MINUS expression .)
    RBRACE          reduce using rule 105 (binary_expr -> expression MINUS expression .)
    RBRACKET        reduce using rule 105 (binary_expr -> expression MINUS expression .)
    ASSIGN          shift and go to state 83
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MUL             shift and go to state 86
    DIV             shift and go to state 87

  ! ASSIGN          [ reduce using rule 105 (binary_expr -> expression MINUS expression .) ]
  ! PLUS            [ reduce using rule 105 (binary_expr -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 105 (binary_expr -> expression MINUS expression .) ]
  ! MUL             [ reduce using rule 105 (binary_expr -> expression MINUS expression .) ]
  ! DIV             [ reduce using rule 105 (binary_expr -> expression MINUS expression .) ]


state 154

    (106) binary_expr -> expression MUL expression .
    (103) assign_expr -> expression . ASSIGN expression
    (104) binary_expr -> expression . PLUS expression
    (105) binary_expr -> expression . MINUS expression
    (106) binary_expr -> expression . MUL expression
    (107) binary_expr -> expression . DIV expression

  ! shift/reduce conflict for ASSIGN resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
    SEMICOLON       reduce using rule 106 (binary_expr -> expression MUL expression .)
    RPAREN          reduce using rule 106 (binary_expr -> expression MUL expression .)
    LBRACKET        reduce using rule 106 (binary_expr -> expression MUL expression .)
    LANGRBRACKET    reduce using rule 106 (binary_expr -> expression MUL expression .)
    LPAREN          reduce using rule 106 (binary_expr -> expression MUL expression .)
    COMMA           reduce using rule 106 (binary_expr -> expression MUL expression .)
    ID              reduce using rule 106 (binary_expr -> expression MUL expression .)
    FUNC            reduce using rule 106 (binary_expr -> expression MUL expression .)
    RBRACE          reduce using rule 106 (binary_expr -> expression MUL expression .)
    RBRACKET        reduce using rule 106 (binary_expr -> expression MUL expression .)
    ASSIGN          shift and go to state 83
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MUL             shift and go to state 86
    DIV             shift and go to state 87

  ! ASSIGN          [ reduce using rule 106 (binary_expr -> expression MUL expression .) ]
  ! PLUS            [ reduce using rule 106 (binary_expr -> expression MUL expression .) ]
  ! MINUS           [ reduce using rule 106 (binary_expr -> expression MUL expression .) ]
  ! MUL             [ reduce using rule 106 (binary_expr -> expression MUL expression .) ]
  ! DIV             [ reduce using rule 106 (binary_expr -> expression MUL expression .) ]


state 155

    (107) binary_expr -> expression DIV expression .
    (103) assign_expr -> expression . ASSIGN expression
    (104) binary_expr -> expression . PLUS expression
    (105) binary_expr -> expression . MINUS expression
    (106) binary_expr -> expression . MUL expression
    (107) binary_expr -> expression . DIV expression

  ! shift/reduce conflict for ASSIGN resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
    SEMICOLON       reduce using rule 107 (binary_expr -> expression DIV expression .)
    RPAREN          reduce using rule 107 (binary_expr -> expression DIV expression .)
    LBRACKET        reduce using rule 107 (binary_expr -> expression DIV expression .)
    LANGRBRACKET    reduce using rule 107 (binary_expr -> expression DIV expression .)
    LPAREN          reduce using rule 107 (binary_expr -> expression DIV expression .)
    COMMA           reduce using rule 107 (binary_expr -> expression DIV expression .)
    ID              reduce using rule 107 (binary_expr -> expression DIV expression .)
    FUNC            reduce using rule 107 (binary_expr -> expression DIV expression .)
    RBRACE          reduce using rule 107 (binary_expr -> expression DIV expression .)
    RBRACKET        reduce using rule 107 (binary_expr -> expression DIV expression .)
    ASSIGN          shift and go to state 83
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MUL             shift and go to state 86
    DIV             shift and go to state 87

  ! ASSIGN          [ reduce using rule 107 (binary_expr -> expression DIV expression .) ]
  ! PLUS            [ reduce using rule 107 (binary_expr -> expression DIV expression .) ]
  ! MINUS           [ reduce using rule 107 (binary_expr -> expression DIV expression .) ]
  ! MUL             [ reduce using rule 107 (binary_expr -> expression DIV expression .) ]
  ! DIV             [ reduce using rule 107 (binary_expr -> expression DIV expression .) ]


state 156

    (99) jump_statement -> RETURN expression_opt SEMICOLON .

    LBRACE          reduce using rule 99 (jump_statement -> RETURN expression_opt SEMICOLON .)
    IF              reduce using rule 99 (jump_statement -> RETURN expression_opt SEMICOLON .)
    BREAK           reduce using rule 99 (jump_statement -> RETURN expression_opt SEMICOLON .)
    CONTINUE        reduce using rule 99 (jump_statement -> RETURN expression_opt SEMICOLON .)
    RETURN          reduce using rule 99 (jump_statement -> RETURN expression_opt SEMICOLON .)
    LET             reduce using rule 99 (jump_statement -> RETURN expression_opt SEMICOLON .)
    CONST           reduce using rule 99 (jump_statement -> RETURN expression_opt SEMICOLON .)
    WHILE           reduce using rule 99 (jump_statement -> RETURN expression_opt SEMICOLON .)
    FOR             reduce using rule 99 (jump_statement -> RETURN expression_opt SEMICOLON .)
    NOT             reduce using rule 99 (jump_statement -> RETURN expression_opt SEMICOLON .)
    SEMICOLON       reduce using rule 99 (jump_statement -> RETURN expression_opt SEMICOLON .)
    INT             reduce using rule 99 (jump_statement -> RETURN expression_opt SEMICOLON .)
    FLOAT           reduce using rule 99 (jump_statement -> RETURN expression_opt SEMICOLON .)
    DOUBLE          reduce using rule 99 (jump_statement -> RETURN expression_opt SEMICOLON .)
    ID              reduce using rule 99 (jump_statement -> RETURN expression_opt SEMICOLON .)
    LPAREN          reduce using rule 99 (jump_statement -> RETURN expression_opt SEMICOLON .)
    VOID            reduce using rule 99 (jump_statement -> RETURN expression_opt SEMICOLON .)
    BOOL            reduce using rule 99 (jump_statement -> RETURN expression_opt SEMICOLON .)
    I8              reduce using rule 99 (jump_statement -> RETURN expression_opt SEMICOLON .)
    U8              reduce using rule 99 (jump_statement -> RETURN expression_opt SEMICOLON .)
    I16             reduce using rule 99 (jump_statement -> RETURN expression_opt SEMICOLON .)
    U16             reduce using rule 99 (jump_statement -> RETURN expression_opt SEMICOLON .)
    I32             reduce using rule 99 (jump_statement -> RETURN expression_opt SEMICOLON .)
    U32             reduce using rule 99 (jump_statement -> RETURN expression_opt SEMICOLON .)
    I64             reduce using rule 99 (jump_statement -> RETURN expression_opt SEMICOLON .)
    U64             reduce using rule 99 (jump_statement -> RETURN expression_opt SEMICOLON .)
    F16             reduce using rule 99 (jump_statement -> RETURN expression_opt SEMICOLON .)
    F32             reduce using rule 99 (jump_statement -> RETURN expression_opt SEMICOLON .)
    F64             reduce using rule 99 (jump_statement -> RETURN expression_opt SEMICOLON .)
    LANGRBRACKET    reduce using rule 99 (jump_statement -> RETURN expression_opt SEMICOLON .)
    RBRACE          reduce using rule 99 (jump_statement -> RETURN expression_opt SEMICOLON .)
    ELSE            reduce using rule 99 (jump_statement -> RETURN expression_opt SEMICOLON .)


state 157

    (93) while_clause -> WHILE LPAREN expression . RPAREN statement
    (103) assign_expr -> expression . ASSIGN expression
    (104) binary_expr -> expression . PLUS expression
    (105) binary_expr -> expression . MINUS expression
    (106) binary_expr -> expression . MUL expression
    (107) binary_expr -> expression . DIV expression

    RPAREN          shift and go to state 189
    ASSIGN          shift and go to state 83
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MUL             shift and go to state 86
    DIV             shift and go to state 87


state 158

    (94) for_clause -> FOR LPAREN for_init_statement . expression_opt SEMICOLON expression RPAREN statement
    (86) expression_opt -> . expression
    (87) expression_opt -> . empty
    (100) expression -> . assign_expr
    (101) expression -> . binary_expr
    (102) expression -> . unary_expr
    (137) empty -> .
    (103) assign_expr -> . expression ASSIGN expression
    (104) binary_expr -> . expression PLUS expression
    (105) binary_expr -> . expression MINUS expression
    (106) binary_expr -> . expression MUL expression
    (107) binary_expr -> . expression DIV expression
    (108) unary_expr -> . unary_operation_opt primary_expr
    (109) unary_operation_opt -> . NOT
    (110) unary_operation_opt -> . empty

    SEMICOLON       reduce using rule 137 (empty -> .)
    INT             reduce using rule 137 (empty -> .)
    FLOAT           reduce using rule 137 (empty -> .)
    DOUBLE          reduce using rule 137 (empty -> .)
    ID              reduce using rule 137 (empty -> .)
    LPAREN          reduce using rule 137 (empty -> .)
    VOID            reduce using rule 137 (empty -> .)
    BOOL            reduce using rule 137 (empty -> .)
    I8              reduce using rule 137 (empty -> .)
    U8              reduce using rule 137 (empty -> .)
    I16             reduce using rule 137 (empty -> .)
    U16             reduce using rule 137 (empty -> .)
    I32             reduce using rule 137 (empty -> .)
    U32             reduce using rule 137 (empty -> .)
    I64             reduce using rule 137 (empty -> .)
    U64             reduce using rule 137 (empty -> .)
    F16             reduce using rule 137 (empty -> .)
    F32             reduce using rule 137 (empty -> .)
    F64             reduce using rule 137 (empty -> .)
    LANGRBRACKET    reduce using rule 137 (empty -> .)
    NOT             shift and go to state 62

    expression_opt                 shift and go to state 190
    expression                     shift and go to state 50
    empty                          shift and go to state 91
    assign_expr                    shift and go to state 58
    binary_expr                    shift and go to state 59
    unary_expr                     shift and go to state 60
    unary_operation_opt            shift and go to state 61

state 159

    (95) for_init_statement -> expression_statement .

    NOT             reduce using rule 95 (for_init_statement -> expression_statement .)
    SEMICOLON       reduce using rule 95 (for_init_statement -> expression_statement .)
    INT             reduce using rule 95 (for_init_statement -> expression_statement .)
    FLOAT           reduce using rule 95 (for_init_statement -> expression_statement .)
    DOUBLE          reduce using rule 95 (for_init_statement -> expression_statement .)
    ID              reduce using rule 95 (for_init_statement -> expression_statement .)
    LPAREN          reduce using rule 95 (for_init_statement -> expression_statement .)
    VOID            reduce using rule 95 (for_init_statement -> expression_statement .)
    BOOL            reduce using rule 95 (for_init_statement -> expression_statement .)
    I8              reduce using rule 95 (for_init_statement -> expression_statement .)
    U8              reduce using rule 95 (for_init_statement -> expression_statement .)
    I16             reduce using rule 95 (for_init_statement -> expression_statement .)
    U16             reduce using rule 95 (for_init_statement -> expression_statement .)
    I32             reduce using rule 95 (for_init_statement -> expression_statement .)
    U32             reduce using rule 95 (for_init_statement -> expression_statement .)
    I64             reduce using rule 95 (for_init_statement -> expression_statement .)
    U64             reduce using rule 95 (for_init_statement -> expression_statement .)
    F16             reduce using rule 95 (for_init_statement -> expression_statement .)
    F32             reduce using rule 95 (for_init_statement -> expression_statement .)
    F64             reduce using rule 95 (for_init_statement -> expression_statement .)
    LANGRBRACKET    reduce using rule 95 (for_init_statement -> expression_statement .)


state 160

    (96) for_init_statement -> decl_statement .

    NOT             reduce using rule 96 (for_init_statement -> decl_statement .)
    SEMICOLON       reduce using rule 96 (for_init_statement -> decl_statement .)
    INT             reduce using rule 96 (for_init_statement -> decl_statement .)
    FLOAT           reduce using rule 96 (for_init_statement -> decl_statement .)
    DOUBLE          reduce using rule 96 (for_init_statement -> decl_statement .)
    ID              reduce using rule 96 (for_init_statement -> decl_statement .)
    LPAREN          reduce using rule 96 (for_init_statement -> decl_statement .)
    VOID            reduce using rule 96 (for_init_statement -> decl_statement .)
    BOOL            reduce using rule 96 (for_init_statement -> decl_statement .)
    I8              reduce using rule 96 (for_init_statement -> decl_statement .)
    U8              reduce using rule 96 (for_init_statement -> decl_statement .)
    I16             reduce using rule 96 (for_init_statement -> decl_statement .)
    U16             reduce using rule 96 (for_init_statement -> decl_statement .)
    I32             reduce using rule 96 (for_init_statement -> decl_statement .)
    U32             reduce using rule 96 (for_init_statement -> decl_statement .)
    I64             reduce using rule 96 (for_init_statement -> decl_statement .)
    U64             reduce using rule 96 (for_init_statement -> decl_statement .)
    F16             reduce using rule 96 (for_init_statement -> decl_statement .)
    F32             reduce using rule 96 (for_init_statement -> decl_statement .)
    F64             reduce using rule 96 (for_init_statement -> decl_statement .)
    LANGRBRACKET    reduce using rule 96 (for_init_statement -> decl_statement .)


state 161

    (123) index_expr -> primary_expr LBRACKET . expression RBRACKET
    (100) expression -> . assign_expr
    (101) expression -> . binary_expr
    (102) expression -> . unary_expr
    (103) assign_expr -> . expression ASSIGN expression
    (104) binary_expr -> . expression PLUS expression
    (105) binary_expr -> . expression MINUS expression
    (106) binary_expr -> . expression MUL expression
    (107) binary_expr -> . expression DIV expression
    (108) unary_expr -> . unary_operation_opt primary_expr
    (109) unary_operation_opt -> . NOT
    (110) unary_operation_opt -> . empty
    (137) empty -> .

    NOT             shift and go to state 62
    INT             reduce using rule 137 (empty -> .)
    FLOAT           reduce using rule 137 (empty -> .)
    DOUBLE          reduce using rule 137 (empty -> .)
    ID              reduce using rule 137 (empty -> .)
    LPAREN          reduce using rule 137 (empty -> .)
    VOID            reduce using rule 137 (empty -> .)
    BOOL            reduce using rule 137 (empty -> .)
    I8              reduce using rule 137 (empty -> .)
    U8              reduce using rule 137 (empty -> .)
    I16             reduce using rule 137 (empty -> .)
    U16             reduce using rule 137 (empty -> .)
    I32             reduce using rule 137 (empty -> .)
    U32             reduce using rule 137 (empty -> .)
    I64             reduce using rule 137 (empty -> .)
    U64             reduce using rule 137 (empty -> .)
    F16             reduce using rule 137 (empty -> .)
    F32             reduce using rule 137 (empty -> .)
    F64             reduce using rule 137 (empty -> .)
    LANGRBRACKET    reduce using rule 137 (empty -> .)

    expression                     shift and go to state 191
    assign_expr                    shift and go to state 58
    binary_expr                    shift and go to state 59
    unary_expr                     shift and go to state 60
    unary_operation_opt            shift and go to state 61
    empty                          shift and go to state 150

state 162

    (128) call_expr -> primary_expr generics_specialization_list_opt . LPAREN parameter_list_opt RPAREN

    LPAREN          shift and go to state 192


state 163

    (129) generics_specialization_list_opt -> generics_specialization_list .

    LPAREN          reduce using rule 129 (generics_specialization_list_opt -> generics_specialization_list .)


state 164

    (130) generics_specialization_list_opt -> empty .

    LPAREN          reduce using rule 130 (generics_specialization_list_opt -> empty .)


state 165

    (131) generics_specialization_list -> LANGRBRACKET . type_spec type_spec_comma_nest RANGRBRACKET
    (22) type_spec -> . simple_type
    (23) type_spec -> . complex_type
    (24) type_spec -> . array_type
    (25) type_spec -> . reference_type
    (26) type_spec -> . function_type
    (27) simple_type -> . VOID
    (28) simple_type -> . BOOL
    (29) simple_type -> . I8
    (30) simple_type -> . U8
    (31) simple_type -> . I16
    (32) simple_type -> . U16
    (33) simple_type -> . I32
    (34) simple_type -> . U32
    (35) simple_type -> . I64
    (36) simple_type -> . U64
    (37) simple_type -> . F16
    (38) simple_type -> . F32
    (39) simple_type -> . F64
    (40) complex_type -> . ID
    (41) array_type -> . type_spec LBRACKET int_literal_opt RBRACKET
    (44) reference_type -> . type_spec REF
    (45) function_type -> . function_sign
    (58) function_sign -> . generics_type_list_opt LPAREN parameter_decl_list_opt RPAREN type_spec_assigntype_opt
    (48) generics_type_list_opt -> . generics_type_list
    (49) generics_type_list_opt -> . empty
    (67) generics_type_list -> . LANGRBRACKET generics_type generics_type_comma_nest RANGRBRACKET
    (137) empty -> .

    VOID            shift and go to state 112
    BOOL            shift and go to state 113
    I8              shift and go to state 114
    U8              shift and go to state 115
    I16             shift and go to state 116
    U16             shift and go to state 117
    I32             shift and go to state 118
    U32             shift and go to state 119
    I64             shift and go to state 120
    U64             shift and go to state 121
    F16             shift and go to state 122
    F32             shift and go to state 123
    F64             shift and go to state 124
    ID              shift and go to state 129
    LANGRBRACKET    shift and go to state 35
    LPAREN          reduce using rule 137 (empty -> .)

    type_spec                      shift and go to state 193
    simple_type                    shift and go to state 107
    complex_type                   shift and go to state 108
    array_type                     shift and go to state 109
    reference_type                 shift and go to state 110
    function_type                  shift and go to state 111
    function_sign                  shift and go to state 125
    generics_type_list_opt         shift and go to state 71
    generics_type_list             shift and go to state 33
    empty                          shift and go to state 34

state 166

    (122) member_expr -> ID DOT . ID

    ID              shift and go to state 194


state 167

    (121) operand -> LPAREN expression . RPAREN
    (103) assign_expr -> expression . ASSIGN expression
    (104) binary_expr -> expression . PLUS expression
    (105) binary_expr -> expression . MINUS expression
    (106) binary_expr -> expression . MUL expression
    (107) binary_expr -> expression . DIV expression

    RPAREN          shift and go to state 195
    ASSIGN          shift and go to state 83
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MUL             shift and go to state 86
    DIV             shift and go to state 87


state 168

    (124) cast_expr -> LPAREN type_spec . RPAREN expression
    (41) array_type -> type_spec . LBRACKET int_literal_opt RBRACKET
    (44) reference_type -> type_spec . REF

    RPAREN          shift and go to state 196
    LBRACKET        shift and go to state 171
    REF             shift and go to state 172


state 169

    (110) unary_operation_opt -> empty .
    (49) generics_type_list_opt -> empty .

  ! reduce/reduce conflict for LPAREN resolved using rule 49 (generics_type_list_opt -> empty .)
    INT             reduce using rule 110 (unary_operation_opt -> empty .)
    FLOAT           reduce using rule 110 (unary_operation_opt -> empty .)
    DOUBLE          reduce using rule 110 (unary_operation_opt -> empty .)
    ID              reduce using rule 110 (unary_operation_opt -> empty .)
    VOID            reduce using rule 110 (unary_operation_opt -> empty .)
    BOOL            reduce using rule 110 (unary_operation_opt -> empty .)
    I8              reduce using rule 110 (unary_operation_opt -> empty .)
    U8              reduce using rule 110 (unary_operation_opt -> empty .)
    I16             reduce using rule 110 (unary_operation_opt -> empty .)
    U16             reduce using rule 110 (unary_operation_opt -> empty .)
    I32             reduce using rule 110 (unary_operation_opt -> empty .)
    U32             reduce using rule 110 (unary_operation_opt -> empty .)
    I64             reduce using rule 110 (unary_operation_opt -> empty .)
    U64             reduce using rule 110 (unary_operation_opt -> empty .)
    F16             reduce using rule 110 (unary_operation_opt -> empty .)
    F32             reduce using rule 110 (unary_operation_opt -> empty .)
    F64             reduce using rule 110 (unary_operation_opt -> empty .)
    LANGRBRACKET    reduce using rule 110 (unary_operation_opt -> empty .)
    LPAREN          reduce using rule 49 (generics_type_list_opt -> empty .)

  ! LPAREN          [ reduce using rule 110 (unary_operation_opt -> empty .) ]


state 170

    (125) new_expr -> type_spec LPAREN . parameter_list_opt RPAREN
    (126) parameter_list_opt -> . parameter_list
    (127) parameter_list_opt -> . empty
    (134) parameter_list -> . expression expression_comma_nest
    (137) empty -> .
    (100) expression -> . assign_expr
    (101) expression -> . binary_expr
    (102) expression -> . unary_expr
    (103) assign_expr -> . expression ASSIGN expression
    (104) binary_expr -> . expression PLUS expression
    (105) binary_expr -> . expression MINUS expression
    (106) binary_expr -> . expression MUL expression
    (107) binary_expr -> . expression DIV expression
    (108) unary_expr -> . unary_operation_opt primary_expr
    (109) unary_operation_opt -> . NOT
    (110) unary_operation_opt -> . empty

    RPAREN          reduce using rule 137 (empty -> .)
    INT             reduce using rule 137 (empty -> .)
    FLOAT           reduce using rule 137 (empty -> .)
    DOUBLE          reduce using rule 137 (empty -> .)
    ID              reduce using rule 137 (empty -> .)
    LPAREN          reduce using rule 137 (empty -> .)
    VOID            reduce using rule 137 (empty -> .)
    BOOL            reduce using rule 137 (empty -> .)
    I8              reduce using rule 137 (empty -> .)
    U8              reduce using rule 137 (empty -> .)
    I16             reduce using rule 137 (empty -> .)
    U16             reduce using rule 137 (empty -> .)
    I32             reduce using rule 137 (empty -> .)
    U32             reduce using rule 137 (empty -> .)
    I64             reduce using rule 137 (empty -> .)
    U64             reduce using rule 137 (empty -> .)
    F16             reduce using rule 137 (empty -> .)
    F32             reduce using rule 137 (empty -> .)
    F64             reduce using rule 137 (empty -> .)
    LANGRBRACKET    reduce using rule 137 (empty -> .)
    NOT             shift and go to state 62

    parameter_list_opt             shift and go to state 197
    parameter_list                 shift and go to state 198
    empty                          shift and go to state 199
    expression                     shift and go to state 200
    assign_expr                    shift and go to state 58
    binary_expr                    shift and go to state 59
    unary_expr                     shift and go to state 60
    unary_operation_opt            shift and go to state 61

state 171

    (41) array_type -> type_spec LBRACKET . int_literal_opt RBRACKET
    (42) int_literal_opt -> . INT
    (43) int_literal_opt -> . empty
    (137) empty -> .

    INT             shift and go to state 202
    RBRACKET        reduce using rule 137 (empty -> .)

    int_literal_opt                shift and go to state 201
    empty                          shift and go to state 203

state 172

    (44) reference_type -> type_spec REF .

    LPAREN          reduce using rule 44 (reference_type -> type_spec REF .)
    LBRACKET        reduce using rule 44 (reference_type -> type_spec REF .)
    REF             reduce using rule 44 (reference_type -> type_spec REF .)
    ASSIGN          reduce using rule 44 (reference_type -> type_spec REF .)
    COMMA           reduce using rule 44 (reference_type -> type_spec REF .)
    RPAREN          reduce using rule 44 (reference_type -> type_spec REF .)
    SEMICOLON       reduce using rule 44 (reference_type -> type_spec REF .)
    RANGRBRACKET    reduce using rule 44 (reference_type -> type_spec REF .)
    LBRACE          reduce using rule 44 (reference_type -> type_spec REF .)
    ID              reduce using rule 44 (reference_type -> type_spec REF .)
    FUNC            reduce using rule 44 (reference_type -> type_spec REF .)
    RBRACE          reduce using rule 44 (reference_type -> type_spec REF .)


state 173

    (14) declarator_nest -> COMMA declarator declarator_nest .

    SEMICOLON       reduce using rule 14 (declarator_nest -> COMMA declarator declarator_nest .)


state 174

    (17) declarator -> ID type_spec_colon_opt ASSIGN expression .
    (103) assign_expr -> expression . ASSIGN expression
    (104) binary_expr -> expression . PLUS expression
    (105) binary_expr -> expression . MINUS expression
    (106) binary_expr -> expression . MUL expression
    (107) binary_expr -> expression . DIV expression

    COMMA           reduce using rule 17 (declarator -> ID type_spec_colon_opt ASSIGN expression .)
    SEMICOLON       reduce using rule 17 (declarator -> ID type_spec_colon_opt ASSIGN expression .)
    ID              reduce using rule 17 (declarator -> ID type_spec_colon_opt ASSIGN expression .)
    FUNC            reduce using rule 17 (declarator -> ID type_spec_colon_opt ASSIGN expression .)
    RBRACE          reduce using rule 17 (declarator -> ID type_spec_colon_opt ASSIGN expression .)
    ASSIGN          shift and go to state 83
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MUL             shift and go to state 86
    DIV             shift and go to state 87


state 175

    (58) function_sign -> generics_type_list_opt LPAREN parameter_decl_list_opt . RPAREN type_spec_assigntype_opt

    RPAREN          shift and go to state 204


state 176

    (59) parameter_decl_list_opt -> parameter_dcel_list .

    RPAREN          reduce using rule 59 (parameter_decl_list_opt -> parameter_dcel_list .)


state 177

    (60) parameter_decl_list_opt -> empty .

    RPAREN          reduce using rule 60 (parameter_decl_list_opt -> empty .)


state 178

    (63) parameter_dcel_list -> parameter_decl . parameter_decl_comma_nest
    (64) parameter_decl_comma_nest -> . COMMA parameter_decl parameter_decl_comma_nest
    (65) parameter_decl_comma_nest -> . empty
    (137) empty -> .

    COMMA           shift and go to state 206
    RPAREN          reduce using rule 137 (empty -> .)

    parameter_decl_comma_nest      shift and go to state 205
    empty                          shift and go to state 207

state 179

    (66) parameter_decl -> ID . type_spec_colon_opt
    (18) type_spec_colon_opt -> . COLON type_spec
    (19) type_spec_colon_opt -> . empty
    (137) empty -> .

    COLON           shift and go to state 67
    COMMA           reduce using rule 137 (empty -> .)
    RPAREN          reduce using rule 137 (empty -> .)

    type_spec_colon_opt            shift and go to state 208
    empty                          shift and go to state 68

state 180

    (46) struct_decl -> STRUCT generics_type_list_opt LBRACE member_decl_nest RBRACE .

    SEMICOLON       reduce using rule 46 (struct_decl -> STRUCT generics_type_list_opt LBRACE member_decl_nest RBRACE .)


state 181

    (50) member_decl_nest -> member_decl member_decl_nest .

    RBRACE          reduce using rule 50 (member_decl_nest -> member_decl member_decl_nest .)


state 182

    (67) generics_type_list -> LANGRBRACKET generics_type generics_type_comma_nest RANGRBRACKET .

    LBRACE          reduce using rule 67 (generics_type_list -> LANGRBRACKET generics_type generics_type_comma_nest RANGRBRACKET .)
    LPAREN          reduce using rule 67 (generics_type_list -> LANGRBRACKET generics_type generics_type_comma_nest RANGRBRACKET .)


state 183

    (68) generics_type_comma_nest -> COMMA generics_type . generics_type_comma_nest
    (68) generics_type_comma_nest -> . COMMA generics_type generics_type_comma_nest
    (69) generics_type_comma_nest -> . empty
    (137) empty -> .

    COMMA           shift and go to state 139
    RANGRBRACKET    reduce using rule 137 (empty -> .)

    generics_type_comma_nest       shift and go to state 209
    empty                          shift and go to state 140

state 184

    (71) generics_type_range_colon_opt -> COLON generics_type_range .

    COMMA           reduce using rule 71 (generics_type_range_colon_opt -> COLON generics_type_range .)
    RANGRBRACKET    reduce using rule 71 (generics_type_range_colon_opt -> COLON generics_type_range .)


state 185

    (73) generics_type_range -> complex_type .

    COMMA           reduce using rule 73 (generics_type_range -> complex_type .)
    RANGRBRACKET    reduce using rule 73 (generics_type_range -> complex_type .)


state 186

    (47) interface_decl -> INTERFACE generics_type_list_opt LBRACE interface_member_decl_nest RBRACE .

    SEMICOLON       reduce using rule 47 (interface_decl -> INTERFACE generics_type_list_opt LBRACE interface_member_decl_nest RBRACE .)


state 187

    (52) interface_member_decl_nest -> interface_member_decl interface_member_decl_nest .

    RBRACE          reduce using rule 52 (interface_member_decl_nest -> interface_member_decl interface_member_decl_nest .)


state 188

    (88) if_statement -> IF LPAREN expression RPAREN . statement statement_else_opt
    (74) statement -> . decl_statement
    (75) statement -> . block_statement
    (76) statement -> . expression_statement
    (77) statement -> . if_statement
    (78) statement -> . iteration_statement
    (79) statement -> . jump_statement
    (80) decl_statement -> . variable_decl SEMICOLON
    (81) decl_statement -> . constant_decl SEMICOLON
    (82) block_statement -> . LBRACE statement_nest RBRACE
    (85) expression_statement -> . expression_opt SEMICOLON
    (88) if_statement -> . IF LPAREN expression RPAREN statement statement_else_opt
    (91) iteration_statement -> . while_clause
    (92) iteration_statement -> . for_clause
    (97) jump_statement -> . BREAK SEMICOLON
    (98) jump_statement -> . CONTINUE SEMICOLON
    (99) jump_statement -> . RETURN expression_opt SEMICOLON
    (13) variable_decl -> . LET declarator declarator_nest
    (16) constant_decl -> . CONST declarator declarator_nest
    (86) expression_opt -> . expression
    (87) expression_opt -> . empty
    (93) while_clause -> . WHILE LPAREN expression RPAREN statement
    (94) for_clause -> . FOR LPAREN for_init_statement expression_opt SEMICOLON expression RPAREN statement
    (100) expression -> . assign_expr
    (101) expression -> . binary_expr
    (102) expression -> . unary_expr
    (137) empty -> .
    (103) assign_expr -> . expression ASSIGN expression
    (104) binary_expr -> . expression PLUS expression
    (105) binary_expr -> . expression MINUS expression
    (106) binary_expr -> . expression MUL expression
    (107) binary_expr -> . expression DIV expression
    (108) unary_expr -> . unary_operation_opt primary_expr
    (109) unary_operation_opt -> . NOT
    (110) unary_operation_opt -> . empty

    LBRACE          shift and go to state 26
    IF              shift and go to state 49
    BREAK           shift and go to state 53
    CONTINUE        shift and go to state 54
    RETURN          shift and go to state 55
    LET             shift and go to state 13
    CONST           shift and go to state 14
    WHILE           shift and go to state 56
    FOR             shift and go to state 57
    SEMICOLON       reduce using rule 137 (empty -> .)
    INT             reduce using rule 137 (empty -> .)
    FLOAT           reduce using rule 137 (empty -> .)
    DOUBLE          reduce using rule 137 (empty -> .)
    ID              reduce using rule 137 (empty -> .)
    LPAREN          reduce using rule 137 (empty -> .)
    VOID            reduce using rule 137 (empty -> .)
    BOOL            reduce using rule 137 (empty -> .)
    I8              reduce using rule 137 (empty -> .)
    U8              reduce using rule 137 (empty -> .)
    I16             reduce using rule 137 (empty -> .)
    U16             reduce using rule 137 (empty -> .)
    I32             reduce using rule 137 (empty -> .)
    U32             reduce using rule 137 (empty -> .)
    I64             reduce using rule 137 (empty -> .)
    U64             reduce using rule 137 (empty -> .)
    F16             reduce using rule 137 (empty -> .)
    F32             reduce using rule 137 (empty -> .)
    F64             reduce using rule 137 (empty -> .)
    LANGRBRACKET    reduce using rule 137 (empty -> .)
    NOT             shift and go to state 62

    expression                     shift and go to state 50
    statement                      shift and go to state 210
    decl_statement                 shift and go to state 40
    block_statement                shift and go to state 41
    expression_statement           shift and go to state 42
    if_statement                   shift and go to state 43
    iteration_statement            shift and go to state 44
    jump_statement                 shift and go to state 45
    variable_decl                  shift and go to state 46
    constant_decl                  shift and go to state 47
    expression_opt                 shift and go to state 48
    while_clause                   shift and go to state 51
    for_clause                     shift and go to state 52
    empty                          shift and go to state 91
    assign_expr                    shift and go to state 58
    binary_expr                    shift and go to state 59
    unary_expr                     shift and go to state 60
    unary_operation_opt            shift and go to state 61

state 189

    (93) while_clause -> WHILE LPAREN expression RPAREN . statement
    (74) statement -> . decl_statement
    (75) statement -> . block_statement
    (76) statement -> . expression_statement
    (77) statement -> . if_statement
    (78) statement -> . iteration_statement
    (79) statement -> . jump_statement
    (80) decl_statement -> . variable_decl SEMICOLON
    (81) decl_statement -> . constant_decl SEMICOLON
    (82) block_statement -> . LBRACE statement_nest RBRACE
    (85) expression_statement -> . expression_opt SEMICOLON
    (88) if_statement -> . IF LPAREN expression RPAREN statement statement_else_opt
    (91) iteration_statement -> . while_clause
    (92) iteration_statement -> . for_clause
    (97) jump_statement -> . BREAK SEMICOLON
    (98) jump_statement -> . CONTINUE SEMICOLON
    (99) jump_statement -> . RETURN expression_opt SEMICOLON
    (13) variable_decl -> . LET declarator declarator_nest
    (16) constant_decl -> . CONST declarator declarator_nest
    (86) expression_opt -> . expression
    (87) expression_opt -> . empty
    (93) while_clause -> . WHILE LPAREN expression RPAREN statement
    (94) for_clause -> . FOR LPAREN for_init_statement expression_opt SEMICOLON expression RPAREN statement
    (100) expression -> . assign_expr
    (101) expression -> . binary_expr
    (102) expression -> . unary_expr
    (137) empty -> .
    (103) assign_expr -> . expression ASSIGN expression
    (104) binary_expr -> . expression PLUS expression
    (105) binary_expr -> . expression MINUS expression
    (106) binary_expr -> . expression MUL expression
    (107) binary_expr -> . expression DIV expression
    (108) unary_expr -> . unary_operation_opt primary_expr
    (109) unary_operation_opt -> . NOT
    (110) unary_operation_opt -> . empty

    LBRACE          shift and go to state 26
    IF              shift and go to state 49
    BREAK           shift and go to state 53
    CONTINUE        shift and go to state 54
    RETURN          shift and go to state 55
    LET             shift and go to state 13
    CONST           shift and go to state 14
    WHILE           shift and go to state 56
    FOR             shift and go to state 57
    SEMICOLON       reduce using rule 137 (empty -> .)
    INT             reduce using rule 137 (empty -> .)
    FLOAT           reduce using rule 137 (empty -> .)
    DOUBLE          reduce using rule 137 (empty -> .)
    ID              reduce using rule 137 (empty -> .)
    LPAREN          reduce using rule 137 (empty -> .)
    VOID            reduce using rule 137 (empty -> .)
    BOOL            reduce using rule 137 (empty -> .)
    I8              reduce using rule 137 (empty -> .)
    U8              reduce using rule 137 (empty -> .)
    I16             reduce using rule 137 (empty -> .)
    U16             reduce using rule 137 (empty -> .)
    I32             reduce using rule 137 (empty -> .)
    U32             reduce using rule 137 (empty -> .)
    I64             reduce using rule 137 (empty -> .)
    U64             reduce using rule 137 (empty -> .)
    F16             reduce using rule 137 (empty -> .)
    F32             reduce using rule 137 (empty -> .)
    F64             reduce using rule 137 (empty -> .)
    LANGRBRACKET    reduce using rule 137 (empty -> .)
    NOT             shift and go to state 62

    expression                     shift and go to state 50
    statement                      shift and go to state 211
    decl_statement                 shift and go to state 40
    block_statement                shift and go to state 41
    expression_statement           shift and go to state 42
    if_statement                   shift and go to state 43
    iteration_statement            shift and go to state 44
    jump_statement                 shift and go to state 45
    variable_decl                  shift and go to state 46
    constant_decl                  shift and go to state 47
    expression_opt                 shift and go to state 48
    while_clause                   shift and go to state 51
    for_clause                     shift and go to state 52
    empty                          shift and go to state 91
    assign_expr                    shift and go to state 58
    binary_expr                    shift and go to state 59
    unary_expr                     shift and go to state 60
    unary_operation_opt            shift and go to state 61

state 190

    (94) for_clause -> FOR LPAREN for_init_statement expression_opt . SEMICOLON expression RPAREN statement

    SEMICOLON       shift and go to state 212


state 191

    (123) index_expr -> primary_expr LBRACKET expression . RBRACKET
    (103) assign_expr -> expression . ASSIGN expression
    (104) binary_expr -> expression . PLUS expression
    (105) binary_expr -> expression . MINUS expression
    (106) binary_expr -> expression . MUL expression
    (107) binary_expr -> expression . DIV expression

    RBRACKET        shift and go to state 213
    ASSIGN          shift and go to state 83
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MUL             shift and go to state 86
    DIV             shift and go to state 87


state 192

    (128) call_expr -> primary_expr generics_specialization_list_opt LPAREN . parameter_list_opt RPAREN
    (126) parameter_list_opt -> . parameter_list
    (127) parameter_list_opt -> . empty
    (134) parameter_list -> . expression expression_comma_nest
    (137) empty -> .
    (100) expression -> . assign_expr
    (101) expression -> . binary_expr
    (102) expression -> . unary_expr
    (103) assign_expr -> . expression ASSIGN expression
    (104) binary_expr -> . expression PLUS expression
    (105) binary_expr -> . expression MINUS expression
    (106) binary_expr -> . expression MUL expression
    (107) binary_expr -> . expression DIV expression
    (108) unary_expr -> . unary_operation_opt primary_expr
    (109) unary_operation_opt -> . NOT
    (110) unary_operation_opt -> . empty

    RPAREN          reduce using rule 137 (empty -> .)
    INT             reduce using rule 137 (empty -> .)
    FLOAT           reduce using rule 137 (empty -> .)
    DOUBLE          reduce using rule 137 (empty -> .)
    ID              reduce using rule 137 (empty -> .)
    LPAREN          reduce using rule 137 (empty -> .)
    VOID            reduce using rule 137 (empty -> .)
    BOOL            reduce using rule 137 (empty -> .)
    I8              reduce using rule 137 (empty -> .)
    U8              reduce using rule 137 (empty -> .)
    I16             reduce using rule 137 (empty -> .)
    U16             reduce using rule 137 (empty -> .)
    I32             reduce using rule 137 (empty -> .)
    U32             reduce using rule 137 (empty -> .)
    I64             reduce using rule 137 (empty -> .)
    U64             reduce using rule 137 (empty -> .)
    F16             reduce using rule 137 (empty -> .)
    F32             reduce using rule 137 (empty -> .)
    F64             reduce using rule 137 (empty -> .)
    LANGRBRACKET    reduce using rule 137 (empty -> .)
    NOT             shift and go to state 62

    parameter_list_opt             shift and go to state 214
    parameter_list                 shift and go to state 198
    empty                          shift and go to state 199
    expression                     shift and go to state 200
    assign_expr                    shift and go to state 58
    binary_expr                    shift and go to state 59
    unary_expr                     shift and go to state 60
    unary_operation_opt            shift and go to state 61

state 193

    (131) generics_specialization_list -> LANGRBRACKET type_spec . type_spec_comma_nest RANGRBRACKET
    (41) array_type -> type_spec . LBRACKET int_literal_opt RBRACKET
    (44) reference_type -> type_spec . REF
    (132) type_spec_comma_nest -> . COMMA type_spec type_spec_comma_nest
    (133) type_spec_comma_nest -> . empty
    (137) empty -> .

    LBRACKET        shift and go to state 171
    REF             shift and go to state 172
    COMMA           shift and go to state 216
    RANGRBRACKET    reduce using rule 137 (empty -> .)

    type_spec_comma_nest           shift and go to state 215
    empty                          shift and go to state 217

state 194

    (122) member_expr -> ID DOT ID .

    LBRACKET        reduce using rule 122 (member_expr -> ID DOT ID .)
    LANGRBRACKET    reduce using rule 122 (member_expr -> ID DOT ID .)
    LPAREN          reduce using rule 122 (member_expr -> ID DOT ID .)
    ASSIGN          reduce using rule 122 (member_expr -> ID DOT ID .)
    PLUS            reduce using rule 122 (member_expr -> ID DOT ID .)
    MINUS           reduce using rule 122 (member_expr -> ID DOT ID .)
    MUL             reduce using rule 122 (member_expr -> ID DOT ID .)
    DIV             reduce using rule 122 (member_expr -> ID DOT ID .)
    SEMICOLON       reduce using rule 122 (member_expr -> ID DOT ID .)
    RPAREN          reduce using rule 122 (member_expr -> ID DOT ID .)
    COMMA           reduce using rule 122 (member_expr -> ID DOT ID .)
    ID              reduce using rule 122 (member_expr -> ID DOT ID .)
    FUNC            reduce using rule 122 (member_expr -> ID DOT ID .)
    RBRACE          reduce using rule 122 (member_expr -> ID DOT ID .)
    RBRACKET        reduce using rule 122 (member_expr -> ID DOT ID .)


state 195

    (121) operand -> LPAREN expression RPAREN .

    LBRACKET        reduce using rule 121 (operand -> LPAREN expression RPAREN .)
    LANGRBRACKET    reduce using rule 121 (operand -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 121 (operand -> LPAREN expression RPAREN .)
    ASSIGN          reduce using rule 121 (operand -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 121 (operand -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 121 (operand -> LPAREN expression RPAREN .)
    MUL             reduce using rule 121 (operand -> LPAREN expression RPAREN .)
    DIV             reduce using rule 121 (operand -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 121 (operand -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 121 (operand -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 121 (operand -> LPAREN expression RPAREN .)
    ID              reduce using rule 121 (operand -> LPAREN expression RPAREN .)
    FUNC            reduce using rule 121 (operand -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 121 (operand -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 121 (operand -> LPAREN expression RPAREN .)


state 196

    (124) cast_expr -> LPAREN type_spec RPAREN . expression
    (100) expression -> . assign_expr
    (101) expression -> . binary_expr
    (102) expression -> . unary_expr
    (103) assign_expr -> . expression ASSIGN expression
    (104) binary_expr -> . expression PLUS expression
    (105) binary_expr -> . expression MINUS expression
    (106) binary_expr -> . expression MUL expression
    (107) binary_expr -> . expression DIV expression
    (108) unary_expr -> . unary_operation_opt primary_expr
    (109) unary_operation_opt -> . NOT
    (110) unary_operation_opt -> . empty
    (137) empty -> .

    NOT             shift and go to state 62
    INT             reduce using rule 137 (empty -> .)
    FLOAT           reduce using rule 137 (empty -> .)
    DOUBLE          reduce using rule 137 (empty -> .)
    ID              reduce using rule 137 (empty -> .)
    LPAREN          reduce using rule 137 (empty -> .)
    VOID            reduce using rule 137 (empty -> .)
    BOOL            reduce using rule 137 (empty -> .)
    I8              reduce using rule 137 (empty -> .)
    U8              reduce using rule 137 (empty -> .)
    I16             reduce using rule 137 (empty -> .)
    U16             reduce using rule 137 (empty -> .)
    I32             reduce using rule 137 (empty -> .)
    U32             reduce using rule 137 (empty -> .)
    I64             reduce using rule 137 (empty -> .)
    U64             reduce using rule 137 (empty -> .)
    F16             reduce using rule 137 (empty -> .)
    F32             reduce using rule 137 (empty -> .)
    F64             reduce using rule 137 (empty -> .)
    LANGRBRACKET    reduce using rule 137 (empty -> .)

    expression                     shift and go to state 218
    assign_expr                    shift and go to state 58
    binary_expr                    shift and go to state 59
    unary_expr                     shift and go to state 60
    unary_operation_opt            shift and go to state 61
    empty                          shift and go to state 150

state 197

    (125) new_expr -> type_spec LPAREN parameter_list_opt . RPAREN

    RPAREN          shift and go to state 219


state 198

    (126) parameter_list_opt -> parameter_list .

    RPAREN          reduce using rule 126 (parameter_list_opt -> parameter_list .)


state 199

    (127) parameter_list_opt -> empty .
    (110) unary_operation_opt -> empty .

    RPAREN          reduce using rule 127 (parameter_list_opt -> empty .)
    INT             reduce using rule 110 (unary_operation_opt -> empty .)
    FLOAT           reduce using rule 110 (unary_operation_opt -> empty .)
    DOUBLE          reduce using rule 110 (unary_operation_opt -> empty .)
    ID              reduce using rule 110 (unary_operation_opt -> empty .)
    LPAREN          reduce using rule 110 (unary_operation_opt -> empty .)
    VOID            reduce using rule 110 (unary_operation_opt -> empty .)
    BOOL            reduce using rule 110 (unary_operation_opt -> empty .)
    I8              reduce using rule 110 (unary_operation_opt -> empty .)
    U8              reduce using rule 110 (unary_operation_opt -> empty .)
    I16             reduce using rule 110 (unary_operation_opt -> empty .)
    U16             reduce using rule 110 (unary_operation_opt -> empty .)
    I32             reduce using rule 110 (unary_operation_opt -> empty .)
    U32             reduce using rule 110 (unary_operation_opt -> empty .)
    I64             reduce using rule 110 (unary_operation_opt -> empty .)
    U64             reduce using rule 110 (unary_operation_opt -> empty .)
    F16             reduce using rule 110 (unary_operation_opt -> empty .)
    F32             reduce using rule 110 (unary_operation_opt -> empty .)
    F64             reduce using rule 110 (unary_operation_opt -> empty .)
    LANGRBRACKET    reduce using rule 110 (unary_operation_opt -> empty .)


state 200

    (134) parameter_list -> expression . expression_comma_nest
    (103) assign_expr -> expression . ASSIGN expression
    (104) binary_expr -> expression . PLUS expression
    (105) binary_expr -> expression . MINUS expression
    (106) binary_expr -> expression . MUL expression
    (107) binary_expr -> expression . DIV expression
    (135) expression_comma_nest -> . COMMA expression expression_comma_nest
    (136) expression_comma_nest -> . empty
    (137) empty -> .

    ASSIGN          shift and go to state 83
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MUL             shift and go to state 86
    DIV             shift and go to state 87
    COMMA           shift and go to state 221
    RPAREN          reduce using rule 137 (empty -> .)

    expression_comma_nest          shift and go to state 220
    empty                          shift and go to state 222

state 201

    (41) array_type -> type_spec LBRACKET int_literal_opt . RBRACKET

    RBRACKET        shift and go to state 223


state 202

    (42) int_literal_opt -> INT .

    RBRACKET        reduce using rule 42 (int_literal_opt -> INT .)


state 203

    (43) int_literal_opt -> empty .

    RBRACKET        reduce using rule 43 (int_literal_opt -> empty .)


state 204

    (58) function_sign -> generics_type_list_opt LPAREN parameter_decl_list_opt RPAREN . type_spec_assigntype_opt
    (61) type_spec_assigntype_opt -> . ASSIGNTYPE type_spec
    (62) type_spec_assigntype_opt -> . empty
    (137) empty -> .

    ASSIGNTYPE      shift and go to state 225
    SEMICOLON       reduce using rule 137 (empty -> .)
    LBRACE          reduce using rule 137 (empty -> .)
    ID              reduce using rule 137 (empty -> .)
    FUNC            reduce using rule 137 (empty -> .)
    RBRACE          reduce using rule 137 (empty -> .)
    LPAREN          reduce using rule 137 (empty -> .)
    LBRACKET        reduce using rule 137 (empty -> .)
    REF             reduce using rule 137 (empty -> .)
    ASSIGN          reduce using rule 137 (empty -> .)
    COMMA           reduce using rule 137 (empty -> .)
    RPAREN          reduce using rule 137 (empty -> .)
    RANGRBRACKET    reduce using rule 137 (empty -> .)

    type_spec_assigntype_opt       shift and go to state 224
    empty                          shift and go to state 226

state 205

    (63) parameter_dcel_list -> parameter_decl parameter_decl_comma_nest .

    RPAREN          reduce using rule 63 (parameter_dcel_list -> parameter_decl parameter_decl_comma_nest .)


state 206

    (64) parameter_decl_comma_nest -> COMMA . parameter_decl parameter_decl_comma_nest
    (66) parameter_decl -> . ID type_spec_colon_opt

    ID              shift and go to state 179

    parameter_decl                 shift and go to state 227

state 207

    (65) parameter_decl_comma_nest -> empty .

    RPAREN          reduce using rule 65 (parameter_decl_comma_nest -> empty .)


state 208

    (66) parameter_decl -> ID type_spec_colon_opt .

    COMMA           reduce using rule 66 (parameter_decl -> ID type_spec_colon_opt .)
    RPAREN          reduce using rule 66 (parameter_decl -> ID type_spec_colon_opt .)


state 209

    (68) generics_type_comma_nest -> COMMA generics_type generics_type_comma_nest .

    RANGRBRACKET    reduce using rule 68 (generics_type_comma_nest -> COMMA generics_type generics_type_comma_nest .)


state 210

    (88) if_statement -> IF LPAREN expression RPAREN statement . statement_else_opt
    (89) statement_else_opt -> . ELSE statement
    (90) statement_else_opt -> . empty
    (137) empty -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 229
    LBRACE          reduce using rule 137 (empty -> .)
    IF              reduce using rule 137 (empty -> .)
    BREAK           reduce using rule 137 (empty -> .)
    CONTINUE        reduce using rule 137 (empty -> .)
    RETURN          reduce using rule 137 (empty -> .)
    LET             reduce using rule 137 (empty -> .)
    CONST           reduce using rule 137 (empty -> .)
    WHILE           reduce using rule 137 (empty -> .)
    FOR             reduce using rule 137 (empty -> .)
    NOT             reduce using rule 137 (empty -> .)
    SEMICOLON       reduce using rule 137 (empty -> .)
    INT             reduce using rule 137 (empty -> .)
    FLOAT           reduce using rule 137 (empty -> .)
    DOUBLE          reduce using rule 137 (empty -> .)
    ID              reduce using rule 137 (empty -> .)
    LPAREN          reduce using rule 137 (empty -> .)
    VOID            reduce using rule 137 (empty -> .)
    BOOL            reduce using rule 137 (empty -> .)
    I8              reduce using rule 137 (empty -> .)
    U8              reduce using rule 137 (empty -> .)
    I16             reduce using rule 137 (empty -> .)
    U16             reduce using rule 137 (empty -> .)
    I32             reduce using rule 137 (empty -> .)
    U32             reduce using rule 137 (empty -> .)
    I64             reduce using rule 137 (empty -> .)
    U64             reduce using rule 137 (empty -> .)
    F16             reduce using rule 137 (empty -> .)
    F32             reduce using rule 137 (empty -> .)
    F64             reduce using rule 137 (empty -> .)
    LANGRBRACKET    reduce using rule 137 (empty -> .)
    RBRACE          reduce using rule 137 (empty -> .)

  ! ELSE            [ reduce using rule 137 (empty -> .) ]

    statement_else_opt             shift and go to state 228
    empty                          shift and go to state 230

state 211

    (93) while_clause -> WHILE LPAREN expression RPAREN statement .

    LBRACE          reduce using rule 93 (while_clause -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 93 (while_clause -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 93 (while_clause -> WHILE LPAREN expression RPAREN statement .)
    CONTINUE        reduce using rule 93 (while_clause -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 93 (while_clause -> WHILE LPAREN expression RPAREN statement .)
    LET             reduce using rule 93 (while_clause -> WHILE LPAREN expression RPAREN statement .)
    CONST           reduce using rule 93 (while_clause -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 93 (while_clause -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 93 (while_clause -> WHILE LPAREN expression RPAREN statement .)
    NOT             reduce using rule 93 (while_clause -> WHILE LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 93 (while_clause -> WHILE LPAREN expression RPAREN statement .)
    INT             reduce using rule 93 (while_clause -> WHILE LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 93 (while_clause -> WHILE LPAREN expression RPAREN statement .)
    DOUBLE          reduce using rule 93 (while_clause -> WHILE LPAREN expression RPAREN statement .)
    ID              reduce using rule 93 (while_clause -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 93 (while_clause -> WHILE LPAREN expression RPAREN statement .)
    VOID            reduce using rule 93 (while_clause -> WHILE LPAREN expression RPAREN statement .)
    BOOL            reduce using rule 93 (while_clause -> WHILE LPAREN expression RPAREN statement .)
    I8              reduce using rule 93 (while_clause -> WHILE LPAREN expression RPAREN statement .)
    U8              reduce using rule 93 (while_clause -> WHILE LPAREN expression RPAREN statement .)
    I16             reduce using rule 93 (while_clause -> WHILE LPAREN expression RPAREN statement .)
    U16             reduce using rule 93 (while_clause -> WHILE LPAREN expression RPAREN statement .)
    I32             reduce using rule 93 (while_clause -> WHILE LPAREN expression RPAREN statement .)
    U32             reduce using rule 93 (while_clause -> WHILE LPAREN expression RPAREN statement .)
    I64             reduce using rule 93 (while_clause -> WHILE LPAREN expression RPAREN statement .)
    U64             reduce using rule 93 (while_clause -> WHILE LPAREN expression RPAREN statement .)
    F16             reduce using rule 93 (while_clause -> WHILE LPAREN expression RPAREN statement .)
    F32             reduce using rule 93 (while_clause -> WHILE LPAREN expression RPAREN statement .)
    F64             reduce using rule 93 (while_clause -> WHILE LPAREN expression RPAREN statement .)
    LANGRBRACKET    reduce using rule 93 (while_clause -> WHILE LPAREN expression RPAREN statement .)
    RBRACE          reduce using rule 93 (while_clause -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 93 (while_clause -> WHILE LPAREN expression RPAREN statement .)


state 212

    (94) for_clause -> FOR LPAREN for_init_statement expression_opt SEMICOLON . expression RPAREN statement
    (100) expression -> . assign_expr
    (101) expression -> . binary_expr
    (102) expression -> . unary_expr
    (103) assign_expr -> . expression ASSIGN expression
    (104) binary_expr -> . expression PLUS expression
    (105) binary_expr -> . expression MINUS expression
    (106) binary_expr -> . expression MUL expression
    (107) binary_expr -> . expression DIV expression
    (108) unary_expr -> . unary_operation_opt primary_expr
    (109) unary_operation_opt -> . NOT
    (110) unary_operation_opt -> . empty
    (137) empty -> .

    NOT             shift and go to state 62
    INT             reduce using rule 137 (empty -> .)
    FLOAT           reduce using rule 137 (empty -> .)
    DOUBLE          reduce using rule 137 (empty -> .)
    ID              reduce using rule 137 (empty -> .)
    LPAREN          reduce using rule 137 (empty -> .)
    VOID            reduce using rule 137 (empty -> .)
    BOOL            reduce using rule 137 (empty -> .)
    I8              reduce using rule 137 (empty -> .)
    U8              reduce using rule 137 (empty -> .)
    I16             reduce using rule 137 (empty -> .)
    U16             reduce using rule 137 (empty -> .)
    I32             reduce using rule 137 (empty -> .)
    U32             reduce using rule 137 (empty -> .)
    I64             reduce using rule 137 (empty -> .)
    U64             reduce using rule 137 (empty -> .)
    F16             reduce using rule 137 (empty -> .)
    F32             reduce using rule 137 (empty -> .)
    F64             reduce using rule 137 (empty -> .)
    LANGRBRACKET    reduce using rule 137 (empty -> .)

    expression                     shift and go to state 231
    assign_expr                    shift and go to state 58
    binary_expr                    shift and go to state 59
    unary_expr                     shift and go to state 60
    unary_operation_opt            shift and go to state 61
    empty                          shift and go to state 150

state 213

    (123) index_expr -> primary_expr LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 123 (index_expr -> primary_expr LBRACKET expression RBRACKET .)
    LANGRBRACKET    reduce using rule 123 (index_expr -> primary_expr LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 123 (index_expr -> primary_expr LBRACKET expression RBRACKET .)
    ASSIGN          reduce using rule 123 (index_expr -> primary_expr LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 123 (index_expr -> primary_expr LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 123 (index_expr -> primary_expr LBRACKET expression RBRACKET .)
    MUL             reduce using rule 123 (index_expr -> primary_expr LBRACKET expression RBRACKET .)
    DIV             reduce using rule 123 (index_expr -> primary_expr LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 123 (index_expr -> primary_expr LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 123 (index_expr -> primary_expr LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 123 (index_expr -> primary_expr LBRACKET expression RBRACKET .)
    ID              reduce using rule 123 (index_expr -> primary_expr LBRACKET expression RBRACKET .)
    FUNC            reduce using rule 123 (index_expr -> primary_expr LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 123 (index_expr -> primary_expr LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 123 (index_expr -> primary_expr LBRACKET expression RBRACKET .)


state 214

    (128) call_expr -> primary_expr generics_specialization_list_opt LPAREN parameter_list_opt . RPAREN

    RPAREN          shift and go to state 232


state 215

    (131) generics_specialization_list -> LANGRBRACKET type_spec type_spec_comma_nest . RANGRBRACKET

    RANGRBRACKET    shift and go to state 233


state 216

    (132) type_spec_comma_nest -> COMMA . type_spec type_spec_comma_nest
    (22) type_spec -> . simple_type
    (23) type_spec -> . complex_type
    (24) type_spec -> . array_type
    (25) type_spec -> . reference_type
    (26) type_spec -> . function_type
    (27) simple_type -> . VOID
    (28) simple_type -> . BOOL
    (29) simple_type -> . I8
    (30) simple_type -> . U8
    (31) simple_type -> . I16
    (32) simple_type -> . U16
    (33) simple_type -> . I32
    (34) simple_type -> . U32
    (35) simple_type -> . I64
    (36) simple_type -> . U64
    (37) simple_type -> . F16
    (38) simple_type -> . F32
    (39) simple_type -> . F64
    (40) complex_type -> . ID
    (41) array_type -> . type_spec LBRACKET int_literal_opt RBRACKET
    (44) reference_type -> . type_spec REF
    (45) function_type -> . function_sign
    (58) function_sign -> . generics_type_list_opt LPAREN parameter_decl_list_opt RPAREN type_spec_assigntype_opt
    (48) generics_type_list_opt -> . generics_type_list
    (49) generics_type_list_opt -> . empty
    (67) generics_type_list -> . LANGRBRACKET generics_type generics_type_comma_nest RANGRBRACKET
    (137) empty -> .

    VOID            shift and go to state 112
    BOOL            shift and go to state 113
    I8              shift and go to state 114
    U8              shift and go to state 115
    I16             shift and go to state 116
    U16             shift and go to state 117
    I32             shift and go to state 118
    U32             shift and go to state 119
    I64             shift and go to state 120
    U64             shift and go to state 121
    F16             shift and go to state 122
    F32             shift and go to state 123
    F64             shift and go to state 124
    ID              shift and go to state 129
    LANGRBRACKET    shift and go to state 35
    LPAREN          reduce using rule 137 (empty -> .)

    type_spec                      shift and go to state 234
    simple_type                    shift and go to state 107
    complex_type                   shift and go to state 108
    array_type                     shift and go to state 109
    reference_type                 shift and go to state 110
    function_type                  shift and go to state 111
    function_sign                  shift and go to state 125
    generics_type_list_opt         shift and go to state 71
    generics_type_list             shift and go to state 33
    empty                          shift and go to state 34

state 217

    (133) type_spec_comma_nest -> empty .

    RANGRBRACKET    reduce using rule 133 (type_spec_comma_nest -> empty .)


state 218

    (124) cast_expr -> LPAREN type_spec RPAREN expression .
    (103) assign_expr -> expression . ASSIGN expression
    (104) binary_expr -> expression . PLUS expression
    (105) binary_expr -> expression . MINUS expression
    (106) binary_expr -> expression . MUL expression
    (107) binary_expr -> expression . DIV expression

  ! shift/reduce conflict for ASSIGN resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
    LBRACKET        reduce using rule 124 (cast_expr -> LPAREN type_spec RPAREN expression .)
    LANGRBRACKET    reduce using rule 124 (cast_expr -> LPAREN type_spec RPAREN expression .)
    LPAREN          reduce using rule 124 (cast_expr -> LPAREN type_spec RPAREN expression .)
    SEMICOLON       reduce using rule 124 (cast_expr -> LPAREN type_spec RPAREN expression .)
    RPAREN          reduce using rule 124 (cast_expr -> LPAREN type_spec RPAREN expression .)
    COMMA           reduce using rule 124 (cast_expr -> LPAREN type_spec RPAREN expression .)
    ID              reduce using rule 124 (cast_expr -> LPAREN type_spec RPAREN expression .)
    FUNC            reduce using rule 124 (cast_expr -> LPAREN type_spec RPAREN expression .)
    RBRACE          reduce using rule 124 (cast_expr -> LPAREN type_spec RPAREN expression .)
    RBRACKET        reduce using rule 124 (cast_expr -> LPAREN type_spec RPAREN expression .)
    ASSIGN          shift and go to state 83
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MUL             shift and go to state 86
    DIV             shift and go to state 87

  ! ASSIGN          [ reduce using rule 124 (cast_expr -> LPAREN type_spec RPAREN expression .) ]
  ! PLUS            [ reduce using rule 124 (cast_expr -> LPAREN type_spec RPAREN expression .) ]
  ! MINUS           [ reduce using rule 124 (cast_expr -> LPAREN type_spec RPAREN expression .) ]
  ! MUL             [ reduce using rule 124 (cast_expr -> LPAREN type_spec RPAREN expression .) ]
  ! DIV             [ reduce using rule 124 (cast_expr -> LPAREN type_spec RPAREN expression .) ]


state 219

    (125) new_expr -> type_spec LPAREN parameter_list_opt RPAREN .

    LBRACKET        reduce using rule 125 (new_expr -> type_spec LPAREN parameter_list_opt RPAREN .)
    LANGRBRACKET    reduce using rule 125 (new_expr -> type_spec LPAREN parameter_list_opt RPAREN .)
    LPAREN          reduce using rule 125 (new_expr -> type_spec LPAREN parameter_list_opt RPAREN .)
    ASSIGN          reduce using rule 125 (new_expr -> type_spec LPAREN parameter_list_opt RPAREN .)
    PLUS            reduce using rule 125 (new_expr -> type_spec LPAREN parameter_list_opt RPAREN .)
    MINUS           reduce using rule 125 (new_expr -> type_spec LPAREN parameter_list_opt RPAREN .)
    MUL             reduce using rule 125 (new_expr -> type_spec LPAREN parameter_list_opt RPAREN .)
    DIV             reduce using rule 125 (new_expr -> type_spec LPAREN parameter_list_opt RPAREN .)
    SEMICOLON       reduce using rule 125 (new_expr -> type_spec LPAREN parameter_list_opt RPAREN .)
    RPAREN          reduce using rule 125 (new_expr -> type_spec LPAREN parameter_list_opt RPAREN .)
    COMMA           reduce using rule 125 (new_expr -> type_spec LPAREN parameter_list_opt RPAREN .)
    ID              reduce using rule 125 (new_expr -> type_spec LPAREN parameter_list_opt RPAREN .)
    FUNC            reduce using rule 125 (new_expr -> type_spec LPAREN parameter_list_opt RPAREN .)
    RBRACE          reduce using rule 125 (new_expr -> type_spec LPAREN parameter_list_opt RPAREN .)
    RBRACKET        reduce using rule 125 (new_expr -> type_spec LPAREN parameter_list_opt RPAREN .)


state 220

    (134) parameter_list -> expression expression_comma_nest .

    RPAREN          reduce using rule 134 (parameter_list -> expression expression_comma_nest .)


state 221

    (135) expression_comma_nest -> COMMA . expression expression_comma_nest
    (100) expression -> . assign_expr
    (101) expression -> . binary_expr
    (102) expression -> . unary_expr
    (103) assign_expr -> . expression ASSIGN expression
    (104) binary_expr -> . expression PLUS expression
    (105) binary_expr -> . expression MINUS expression
    (106) binary_expr -> . expression MUL expression
    (107) binary_expr -> . expression DIV expression
    (108) unary_expr -> . unary_operation_opt primary_expr
    (109) unary_operation_opt -> . NOT
    (110) unary_operation_opt -> . empty
    (137) empty -> .

    NOT             shift and go to state 62
    INT             reduce using rule 137 (empty -> .)
    FLOAT           reduce using rule 137 (empty -> .)
    DOUBLE          reduce using rule 137 (empty -> .)
    ID              reduce using rule 137 (empty -> .)
    LPAREN          reduce using rule 137 (empty -> .)
    VOID            reduce using rule 137 (empty -> .)
    BOOL            reduce using rule 137 (empty -> .)
    I8              reduce using rule 137 (empty -> .)
    U8              reduce using rule 137 (empty -> .)
    I16             reduce using rule 137 (empty -> .)
    U16             reduce using rule 137 (empty -> .)
    I32             reduce using rule 137 (empty -> .)
    U32             reduce using rule 137 (empty -> .)
    I64             reduce using rule 137 (empty -> .)
    U64             reduce using rule 137 (empty -> .)
    F16             reduce using rule 137 (empty -> .)
    F32             reduce using rule 137 (empty -> .)
    F64             reduce using rule 137 (empty -> .)
    LANGRBRACKET    reduce using rule 137 (empty -> .)

    expression                     shift and go to state 235
    assign_expr                    shift and go to state 58
    binary_expr                    shift and go to state 59
    unary_expr                     shift and go to state 60
    unary_operation_opt            shift and go to state 61
    empty                          shift and go to state 150

state 222

    (136) expression_comma_nest -> empty .

    RPAREN          reduce using rule 136 (expression_comma_nest -> empty .)


state 223

    (41) array_type -> type_spec LBRACKET int_literal_opt RBRACKET .

    LPAREN          reduce using rule 41 (array_type -> type_spec LBRACKET int_literal_opt RBRACKET .)
    LBRACKET        reduce using rule 41 (array_type -> type_spec LBRACKET int_literal_opt RBRACKET .)
    REF             reduce using rule 41 (array_type -> type_spec LBRACKET int_literal_opt RBRACKET .)
    ASSIGN          reduce using rule 41 (array_type -> type_spec LBRACKET int_literal_opt RBRACKET .)
    COMMA           reduce using rule 41 (array_type -> type_spec LBRACKET int_literal_opt RBRACKET .)
    RPAREN          reduce using rule 41 (array_type -> type_spec LBRACKET int_literal_opt RBRACKET .)
    SEMICOLON       reduce using rule 41 (array_type -> type_spec LBRACKET int_literal_opt RBRACKET .)
    RANGRBRACKET    reduce using rule 41 (array_type -> type_spec LBRACKET int_literal_opt RBRACKET .)
    LBRACE          reduce using rule 41 (array_type -> type_spec LBRACKET int_literal_opt RBRACKET .)
    ID              reduce using rule 41 (array_type -> type_spec LBRACKET int_literal_opt RBRACKET .)
    FUNC            reduce using rule 41 (array_type -> type_spec LBRACKET int_literal_opt RBRACKET .)
    RBRACE          reduce using rule 41 (array_type -> type_spec LBRACKET int_literal_opt RBRACKET .)


state 224

    (58) function_sign -> generics_type_list_opt LPAREN parameter_decl_list_opt RPAREN type_spec_assigntype_opt .

    SEMICOLON       reduce using rule 58 (function_sign -> generics_type_list_opt LPAREN parameter_decl_list_opt RPAREN type_spec_assigntype_opt .)
    LBRACE          reduce using rule 58 (function_sign -> generics_type_list_opt LPAREN parameter_decl_list_opt RPAREN type_spec_assigntype_opt .)
    ID              reduce using rule 58 (function_sign -> generics_type_list_opt LPAREN parameter_decl_list_opt RPAREN type_spec_assigntype_opt .)
    FUNC            reduce using rule 58 (function_sign -> generics_type_list_opt LPAREN parameter_decl_list_opt RPAREN type_spec_assigntype_opt .)
    RBRACE          reduce using rule 58 (function_sign -> generics_type_list_opt LPAREN parameter_decl_list_opt RPAREN type_spec_assigntype_opt .)
    LPAREN          reduce using rule 58 (function_sign -> generics_type_list_opt LPAREN parameter_decl_list_opt RPAREN type_spec_assigntype_opt .)
    LBRACKET        reduce using rule 58 (function_sign -> generics_type_list_opt LPAREN parameter_decl_list_opt RPAREN type_spec_assigntype_opt .)
    REF             reduce using rule 58 (function_sign -> generics_type_list_opt LPAREN parameter_decl_list_opt RPAREN type_spec_assigntype_opt .)
    ASSIGN          reduce using rule 58 (function_sign -> generics_type_list_opt LPAREN parameter_decl_list_opt RPAREN type_spec_assigntype_opt .)
    COMMA           reduce using rule 58 (function_sign -> generics_type_list_opt LPAREN parameter_decl_list_opt RPAREN type_spec_assigntype_opt .)
    RPAREN          reduce using rule 58 (function_sign -> generics_type_list_opt LPAREN parameter_decl_list_opt RPAREN type_spec_assigntype_opt .)
    RANGRBRACKET    reduce using rule 58 (function_sign -> generics_type_list_opt LPAREN parameter_decl_list_opt RPAREN type_spec_assigntype_opt .)


state 225

    (61) type_spec_assigntype_opt -> ASSIGNTYPE . type_spec
    (22) type_spec -> . simple_type
    (23) type_spec -> . complex_type
    (24) type_spec -> . array_type
    (25) type_spec -> . reference_type
    (26) type_spec -> . function_type
    (27) simple_type -> . VOID
    (28) simple_type -> . BOOL
    (29) simple_type -> . I8
    (30) simple_type -> . U8
    (31) simple_type -> . I16
    (32) simple_type -> . U16
    (33) simple_type -> . I32
    (34) simple_type -> . U32
    (35) simple_type -> . I64
    (36) simple_type -> . U64
    (37) simple_type -> . F16
    (38) simple_type -> . F32
    (39) simple_type -> . F64
    (40) complex_type -> . ID
    (41) array_type -> . type_spec LBRACKET int_literal_opt RBRACKET
    (44) reference_type -> . type_spec REF
    (45) function_type -> . function_sign
    (58) function_sign -> . generics_type_list_opt LPAREN parameter_decl_list_opt RPAREN type_spec_assigntype_opt
    (48) generics_type_list_opt -> . generics_type_list
    (49) generics_type_list_opt -> . empty
    (67) generics_type_list -> . LANGRBRACKET generics_type generics_type_comma_nest RANGRBRACKET
    (137) empty -> .

    VOID            shift and go to state 112
    BOOL            shift and go to state 113
    I8              shift and go to state 114
    U8              shift and go to state 115
    I16             shift and go to state 116
    U16             shift and go to state 117
    I32             shift and go to state 118
    U32             shift and go to state 119
    I64             shift and go to state 120
    U64             shift and go to state 121
    F16             shift and go to state 122
    F32             shift and go to state 123
    F64             shift and go to state 124
    ID              shift and go to state 129
    LANGRBRACKET    shift and go to state 35
    LPAREN          reduce using rule 137 (empty -> .)

    type_spec                      shift and go to state 236
    simple_type                    shift and go to state 107
    complex_type                   shift and go to state 108
    array_type                     shift and go to state 109
    reference_type                 shift and go to state 110
    function_type                  shift and go to state 111
    function_sign                  shift and go to state 125
    generics_type_list_opt         shift and go to state 71
    generics_type_list             shift and go to state 33
    empty                          shift and go to state 34

state 226

    (62) type_spec_assigntype_opt -> empty .

    SEMICOLON       reduce using rule 62 (type_spec_assigntype_opt -> empty .)
    LBRACE          reduce using rule 62 (type_spec_assigntype_opt -> empty .)
    ID              reduce using rule 62 (type_spec_assigntype_opt -> empty .)
    FUNC            reduce using rule 62 (type_spec_assigntype_opt -> empty .)
    RBRACE          reduce using rule 62 (type_spec_assigntype_opt -> empty .)
    LPAREN          reduce using rule 62 (type_spec_assigntype_opt -> empty .)
    LBRACKET        reduce using rule 62 (type_spec_assigntype_opt -> empty .)
    REF             reduce using rule 62 (type_spec_assigntype_opt -> empty .)
    ASSIGN          reduce using rule 62 (type_spec_assigntype_opt -> empty .)
    COMMA           reduce using rule 62 (type_spec_assigntype_opt -> empty .)
    RPAREN          reduce using rule 62 (type_spec_assigntype_opt -> empty .)
    RANGRBRACKET    reduce using rule 62 (type_spec_assigntype_opt -> empty .)


state 227

    (64) parameter_decl_comma_nest -> COMMA parameter_decl . parameter_decl_comma_nest
    (64) parameter_decl_comma_nest -> . COMMA parameter_decl parameter_decl_comma_nest
    (65) parameter_decl_comma_nest -> . empty
    (137) empty -> .

    COMMA           shift and go to state 206
    RPAREN          reduce using rule 137 (empty -> .)

    parameter_decl_comma_nest      shift and go to state 237
    empty                          shift and go to state 207

state 228

    (88) if_statement -> IF LPAREN expression RPAREN statement statement_else_opt .

    LBRACE          reduce using rule 88 (if_statement -> IF LPAREN expression RPAREN statement statement_else_opt .)
    IF              reduce using rule 88 (if_statement -> IF LPAREN expression RPAREN statement statement_else_opt .)
    BREAK           reduce using rule 88 (if_statement -> IF LPAREN expression RPAREN statement statement_else_opt .)
    CONTINUE        reduce using rule 88 (if_statement -> IF LPAREN expression RPAREN statement statement_else_opt .)
    RETURN          reduce using rule 88 (if_statement -> IF LPAREN expression RPAREN statement statement_else_opt .)
    LET             reduce using rule 88 (if_statement -> IF LPAREN expression RPAREN statement statement_else_opt .)
    CONST           reduce using rule 88 (if_statement -> IF LPAREN expression RPAREN statement statement_else_opt .)
    WHILE           reduce using rule 88 (if_statement -> IF LPAREN expression RPAREN statement statement_else_opt .)
    FOR             reduce using rule 88 (if_statement -> IF LPAREN expression RPAREN statement statement_else_opt .)
    NOT             reduce using rule 88 (if_statement -> IF LPAREN expression RPAREN statement statement_else_opt .)
    SEMICOLON       reduce using rule 88 (if_statement -> IF LPAREN expression RPAREN statement statement_else_opt .)
    INT             reduce using rule 88 (if_statement -> IF LPAREN expression RPAREN statement statement_else_opt .)
    FLOAT           reduce using rule 88 (if_statement -> IF LPAREN expression RPAREN statement statement_else_opt .)
    DOUBLE          reduce using rule 88 (if_statement -> IF LPAREN expression RPAREN statement statement_else_opt .)
    ID              reduce using rule 88 (if_statement -> IF LPAREN expression RPAREN statement statement_else_opt .)
    LPAREN          reduce using rule 88 (if_statement -> IF LPAREN expression RPAREN statement statement_else_opt .)
    VOID            reduce using rule 88 (if_statement -> IF LPAREN expression RPAREN statement statement_else_opt .)
    BOOL            reduce using rule 88 (if_statement -> IF LPAREN expression RPAREN statement statement_else_opt .)
    I8              reduce using rule 88 (if_statement -> IF LPAREN expression RPAREN statement statement_else_opt .)
    U8              reduce using rule 88 (if_statement -> IF LPAREN expression RPAREN statement statement_else_opt .)
    I16             reduce using rule 88 (if_statement -> IF LPAREN expression RPAREN statement statement_else_opt .)
    U16             reduce using rule 88 (if_statement -> IF LPAREN expression RPAREN statement statement_else_opt .)
    I32             reduce using rule 88 (if_statement -> IF LPAREN expression RPAREN statement statement_else_opt .)
    U32             reduce using rule 88 (if_statement -> IF LPAREN expression RPAREN statement statement_else_opt .)
    I64             reduce using rule 88 (if_statement -> IF LPAREN expression RPAREN statement statement_else_opt .)
    U64             reduce using rule 88 (if_statement -> IF LPAREN expression RPAREN statement statement_else_opt .)
    F16             reduce using rule 88 (if_statement -> IF LPAREN expression RPAREN statement statement_else_opt .)
    F32             reduce using rule 88 (if_statement -> IF LPAREN expression RPAREN statement statement_else_opt .)
    F64             reduce using rule 88 (if_statement -> IF LPAREN expression RPAREN statement statement_else_opt .)
    LANGRBRACKET    reduce using rule 88 (if_statement -> IF LPAREN expression RPAREN statement statement_else_opt .)
    RBRACE          reduce using rule 88 (if_statement -> IF LPAREN expression RPAREN statement statement_else_opt .)
    ELSE            reduce using rule 88 (if_statement -> IF LPAREN expression RPAREN statement statement_else_opt .)


state 229

    (89) statement_else_opt -> ELSE . statement
    (74) statement -> . decl_statement
    (75) statement -> . block_statement
    (76) statement -> . expression_statement
    (77) statement -> . if_statement
    (78) statement -> . iteration_statement
    (79) statement -> . jump_statement
    (80) decl_statement -> . variable_decl SEMICOLON
    (81) decl_statement -> . constant_decl SEMICOLON
    (82) block_statement -> . LBRACE statement_nest RBRACE
    (85) expression_statement -> . expression_opt SEMICOLON
    (88) if_statement -> . IF LPAREN expression RPAREN statement statement_else_opt
    (91) iteration_statement -> . while_clause
    (92) iteration_statement -> . for_clause
    (97) jump_statement -> . BREAK SEMICOLON
    (98) jump_statement -> . CONTINUE SEMICOLON
    (99) jump_statement -> . RETURN expression_opt SEMICOLON
    (13) variable_decl -> . LET declarator declarator_nest
    (16) constant_decl -> . CONST declarator declarator_nest
    (86) expression_opt -> . expression
    (87) expression_opt -> . empty
    (93) while_clause -> . WHILE LPAREN expression RPAREN statement
    (94) for_clause -> . FOR LPAREN for_init_statement expression_opt SEMICOLON expression RPAREN statement
    (100) expression -> . assign_expr
    (101) expression -> . binary_expr
    (102) expression -> . unary_expr
    (137) empty -> .
    (103) assign_expr -> . expression ASSIGN expression
    (104) binary_expr -> . expression PLUS expression
    (105) binary_expr -> . expression MINUS expression
    (106) binary_expr -> . expression MUL expression
    (107) binary_expr -> . expression DIV expression
    (108) unary_expr -> . unary_operation_opt primary_expr
    (109) unary_operation_opt -> . NOT
    (110) unary_operation_opt -> . empty

    LBRACE          shift and go to state 26
    IF              shift and go to state 49
    BREAK           shift and go to state 53
    CONTINUE        shift and go to state 54
    RETURN          shift and go to state 55
    LET             shift and go to state 13
    CONST           shift and go to state 14
    WHILE           shift and go to state 56
    FOR             shift and go to state 57
    SEMICOLON       reduce using rule 137 (empty -> .)
    INT             reduce using rule 137 (empty -> .)
    FLOAT           reduce using rule 137 (empty -> .)
    DOUBLE          reduce using rule 137 (empty -> .)
    ID              reduce using rule 137 (empty -> .)
    LPAREN          reduce using rule 137 (empty -> .)
    VOID            reduce using rule 137 (empty -> .)
    BOOL            reduce using rule 137 (empty -> .)
    I8              reduce using rule 137 (empty -> .)
    U8              reduce using rule 137 (empty -> .)
    I16             reduce using rule 137 (empty -> .)
    U16             reduce using rule 137 (empty -> .)
    I32             reduce using rule 137 (empty -> .)
    U32             reduce using rule 137 (empty -> .)
    I64             reduce using rule 137 (empty -> .)
    U64             reduce using rule 137 (empty -> .)
    F16             reduce using rule 137 (empty -> .)
    F32             reduce using rule 137 (empty -> .)
    F64             reduce using rule 137 (empty -> .)
    LANGRBRACKET    reduce using rule 137 (empty -> .)
    NOT             shift and go to state 62

    statement                      shift and go to state 238
    decl_statement                 shift and go to state 40
    block_statement                shift and go to state 41
    expression_statement           shift and go to state 42
    if_statement                   shift and go to state 43
    iteration_statement            shift and go to state 44
    jump_statement                 shift and go to state 45
    variable_decl                  shift and go to state 46
    constant_decl                  shift and go to state 47
    expression_opt                 shift and go to state 48
    expression                     shift and go to state 50
    while_clause                   shift and go to state 51
    for_clause                     shift and go to state 52
    empty                          shift and go to state 91
    assign_expr                    shift and go to state 58
    binary_expr                    shift and go to state 59
    unary_expr                     shift and go to state 60
    unary_operation_opt            shift and go to state 61

state 230

    (90) statement_else_opt -> empty .

    ELSE            reduce using rule 90 (statement_else_opt -> empty .)
    LBRACE          reduce using rule 90 (statement_else_opt -> empty .)
    IF              reduce using rule 90 (statement_else_opt -> empty .)
    BREAK           reduce using rule 90 (statement_else_opt -> empty .)
    CONTINUE        reduce using rule 90 (statement_else_opt -> empty .)
    RETURN          reduce using rule 90 (statement_else_opt -> empty .)
    LET             reduce using rule 90 (statement_else_opt -> empty .)
    CONST           reduce using rule 90 (statement_else_opt -> empty .)
    WHILE           reduce using rule 90 (statement_else_opt -> empty .)
    FOR             reduce using rule 90 (statement_else_opt -> empty .)
    NOT             reduce using rule 90 (statement_else_opt -> empty .)
    SEMICOLON       reduce using rule 90 (statement_else_opt -> empty .)
    INT             reduce using rule 90 (statement_else_opt -> empty .)
    FLOAT           reduce using rule 90 (statement_else_opt -> empty .)
    DOUBLE          reduce using rule 90 (statement_else_opt -> empty .)
    ID              reduce using rule 90 (statement_else_opt -> empty .)
    LPAREN          reduce using rule 90 (statement_else_opt -> empty .)
    VOID            reduce using rule 90 (statement_else_opt -> empty .)
    BOOL            reduce using rule 90 (statement_else_opt -> empty .)
    I8              reduce using rule 90 (statement_else_opt -> empty .)
    U8              reduce using rule 90 (statement_else_opt -> empty .)
    I16             reduce using rule 90 (statement_else_opt -> empty .)
    U16             reduce using rule 90 (statement_else_opt -> empty .)
    I32             reduce using rule 90 (statement_else_opt -> empty .)
    U32             reduce using rule 90 (statement_else_opt -> empty .)
    I64             reduce using rule 90 (statement_else_opt -> empty .)
    U64             reduce using rule 90 (statement_else_opt -> empty .)
    F16             reduce using rule 90 (statement_else_opt -> empty .)
    F32             reduce using rule 90 (statement_else_opt -> empty .)
    F64             reduce using rule 90 (statement_else_opt -> empty .)
    LANGRBRACKET    reduce using rule 90 (statement_else_opt -> empty .)
    RBRACE          reduce using rule 90 (statement_else_opt -> empty .)


state 231

    (94) for_clause -> FOR LPAREN for_init_statement expression_opt SEMICOLON expression . RPAREN statement
    (103) assign_expr -> expression . ASSIGN expression
    (104) binary_expr -> expression . PLUS expression
    (105) binary_expr -> expression . MINUS expression
    (106) binary_expr -> expression . MUL expression
    (107) binary_expr -> expression . DIV expression

    RPAREN          shift and go to state 239
    ASSIGN          shift and go to state 83
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MUL             shift and go to state 86
    DIV             shift and go to state 87


state 232

    (128) call_expr -> primary_expr generics_specialization_list_opt LPAREN parameter_list_opt RPAREN .

    LBRACKET        reduce using rule 128 (call_expr -> primary_expr generics_specialization_list_opt LPAREN parameter_list_opt RPAREN .)
    LANGRBRACKET    reduce using rule 128 (call_expr -> primary_expr generics_specialization_list_opt LPAREN parameter_list_opt RPAREN .)
    LPAREN          reduce using rule 128 (call_expr -> primary_expr generics_specialization_list_opt LPAREN parameter_list_opt RPAREN .)
    ASSIGN          reduce using rule 128 (call_expr -> primary_expr generics_specialization_list_opt LPAREN parameter_list_opt RPAREN .)
    PLUS            reduce using rule 128 (call_expr -> primary_expr generics_specialization_list_opt LPAREN parameter_list_opt RPAREN .)
    MINUS           reduce using rule 128 (call_expr -> primary_expr generics_specialization_list_opt LPAREN parameter_list_opt RPAREN .)
    MUL             reduce using rule 128 (call_expr -> primary_expr generics_specialization_list_opt LPAREN parameter_list_opt RPAREN .)
    DIV             reduce using rule 128 (call_expr -> primary_expr generics_specialization_list_opt LPAREN parameter_list_opt RPAREN .)
    SEMICOLON       reduce using rule 128 (call_expr -> primary_expr generics_specialization_list_opt LPAREN parameter_list_opt RPAREN .)
    RPAREN          reduce using rule 128 (call_expr -> primary_expr generics_specialization_list_opt LPAREN parameter_list_opt RPAREN .)
    COMMA           reduce using rule 128 (call_expr -> primary_expr generics_specialization_list_opt LPAREN parameter_list_opt RPAREN .)
    ID              reduce using rule 128 (call_expr -> primary_expr generics_specialization_list_opt LPAREN parameter_list_opt RPAREN .)
    FUNC            reduce using rule 128 (call_expr -> primary_expr generics_specialization_list_opt LPAREN parameter_list_opt RPAREN .)
    RBRACE          reduce using rule 128 (call_expr -> primary_expr generics_specialization_list_opt LPAREN parameter_list_opt RPAREN .)
    RBRACKET        reduce using rule 128 (call_expr -> primary_expr generics_specialization_list_opt LPAREN parameter_list_opt RPAREN .)


state 233

    (131) generics_specialization_list -> LANGRBRACKET type_spec type_spec_comma_nest RANGRBRACKET .

    LPAREN          reduce using rule 131 (generics_specialization_list -> LANGRBRACKET type_spec type_spec_comma_nest RANGRBRACKET .)


state 234

    (132) type_spec_comma_nest -> COMMA type_spec . type_spec_comma_nest
    (41) array_type -> type_spec . LBRACKET int_literal_opt RBRACKET
    (44) reference_type -> type_spec . REF
    (132) type_spec_comma_nest -> . COMMA type_spec type_spec_comma_nest
    (133) type_spec_comma_nest -> . empty
    (137) empty -> .

    LBRACKET        shift and go to state 171
    REF             shift and go to state 172
    COMMA           shift and go to state 216
    RANGRBRACKET    reduce using rule 137 (empty -> .)

    type_spec_comma_nest           shift and go to state 240
    empty                          shift and go to state 217

state 235

    (135) expression_comma_nest -> COMMA expression . expression_comma_nest
    (103) assign_expr -> expression . ASSIGN expression
    (104) binary_expr -> expression . PLUS expression
    (105) binary_expr -> expression . MINUS expression
    (106) binary_expr -> expression . MUL expression
    (107) binary_expr -> expression . DIV expression
    (135) expression_comma_nest -> . COMMA expression expression_comma_nest
    (136) expression_comma_nest -> . empty
    (137) empty -> .

    ASSIGN          shift and go to state 83
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    MUL             shift and go to state 86
    DIV             shift and go to state 87
    COMMA           shift and go to state 221
    RPAREN          reduce using rule 137 (empty -> .)

    expression_comma_nest          shift and go to state 241
    empty                          shift and go to state 222

state 236

    (61) type_spec_assigntype_opt -> ASSIGNTYPE type_spec .
    (41) array_type -> type_spec . LBRACKET int_literal_opt RBRACKET
    (44) reference_type -> type_spec . REF

  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for REF resolved as shift
    SEMICOLON       reduce using rule 61 (type_spec_assigntype_opt -> ASSIGNTYPE type_spec .)
    LBRACE          reduce using rule 61 (type_spec_assigntype_opt -> ASSIGNTYPE type_spec .)
    ID              reduce using rule 61 (type_spec_assigntype_opt -> ASSIGNTYPE type_spec .)
    FUNC            reduce using rule 61 (type_spec_assigntype_opt -> ASSIGNTYPE type_spec .)
    RBRACE          reduce using rule 61 (type_spec_assigntype_opt -> ASSIGNTYPE type_spec .)
    LPAREN          reduce using rule 61 (type_spec_assigntype_opt -> ASSIGNTYPE type_spec .)
    ASSIGN          reduce using rule 61 (type_spec_assigntype_opt -> ASSIGNTYPE type_spec .)
    COMMA           reduce using rule 61 (type_spec_assigntype_opt -> ASSIGNTYPE type_spec .)
    RPAREN          reduce using rule 61 (type_spec_assigntype_opt -> ASSIGNTYPE type_spec .)
    RANGRBRACKET    reduce using rule 61 (type_spec_assigntype_opt -> ASSIGNTYPE type_spec .)
    LBRACKET        shift and go to state 171
    REF             shift and go to state 172

  ! LBRACKET        [ reduce using rule 61 (type_spec_assigntype_opt -> ASSIGNTYPE type_spec .) ]
  ! REF             [ reduce using rule 61 (type_spec_assigntype_opt -> ASSIGNTYPE type_spec .) ]


state 237

    (64) parameter_decl_comma_nest -> COMMA parameter_decl parameter_decl_comma_nest .

    RPAREN          reduce using rule 64 (parameter_decl_comma_nest -> COMMA parameter_decl parameter_decl_comma_nest .)


state 238

    (89) statement_else_opt -> ELSE statement .

    ELSE            reduce using rule 89 (statement_else_opt -> ELSE statement .)
    LBRACE          reduce using rule 89 (statement_else_opt -> ELSE statement .)
    IF              reduce using rule 89 (statement_else_opt -> ELSE statement .)
    BREAK           reduce using rule 89 (statement_else_opt -> ELSE statement .)
    CONTINUE        reduce using rule 89 (statement_else_opt -> ELSE statement .)
    RETURN          reduce using rule 89 (statement_else_opt -> ELSE statement .)
    LET             reduce using rule 89 (statement_else_opt -> ELSE statement .)
    CONST           reduce using rule 89 (statement_else_opt -> ELSE statement .)
    WHILE           reduce using rule 89 (statement_else_opt -> ELSE statement .)
    FOR             reduce using rule 89 (statement_else_opt -> ELSE statement .)
    NOT             reduce using rule 89 (statement_else_opt -> ELSE statement .)
    SEMICOLON       reduce using rule 89 (statement_else_opt -> ELSE statement .)
    INT             reduce using rule 89 (statement_else_opt -> ELSE statement .)
    FLOAT           reduce using rule 89 (statement_else_opt -> ELSE statement .)
    DOUBLE          reduce using rule 89 (statement_else_opt -> ELSE statement .)
    ID              reduce using rule 89 (statement_else_opt -> ELSE statement .)
    LPAREN          reduce using rule 89 (statement_else_opt -> ELSE statement .)
    VOID            reduce using rule 89 (statement_else_opt -> ELSE statement .)
    BOOL            reduce using rule 89 (statement_else_opt -> ELSE statement .)
    I8              reduce using rule 89 (statement_else_opt -> ELSE statement .)
    U8              reduce using rule 89 (statement_else_opt -> ELSE statement .)
    I16             reduce using rule 89 (statement_else_opt -> ELSE statement .)
    U16             reduce using rule 89 (statement_else_opt -> ELSE statement .)
    I32             reduce using rule 89 (statement_else_opt -> ELSE statement .)
    U32             reduce using rule 89 (statement_else_opt -> ELSE statement .)
    I64             reduce using rule 89 (statement_else_opt -> ELSE statement .)
    U64             reduce using rule 89 (statement_else_opt -> ELSE statement .)
    F16             reduce using rule 89 (statement_else_opt -> ELSE statement .)
    F32             reduce using rule 89 (statement_else_opt -> ELSE statement .)
    F64             reduce using rule 89 (statement_else_opt -> ELSE statement .)
    LANGRBRACKET    reduce using rule 89 (statement_else_opt -> ELSE statement .)
    RBRACE          reduce using rule 89 (statement_else_opt -> ELSE statement .)


state 239

    (94) for_clause -> FOR LPAREN for_init_statement expression_opt SEMICOLON expression RPAREN . statement
    (74) statement -> . decl_statement
    (75) statement -> . block_statement
    (76) statement -> . expression_statement
    (77) statement -> . if_statement
    (78) statement -> . iteration_statement
    (79) statement -> . jump_statement
    (80) decl_statement -> . variable_decl SEMICOLON
    (81) decl_statement -> . constant_decl SEMICOLON
    (82) block_statement -> . LBRACE statement_nest RBRACE
    (85) expression_statement -> . expression_opt SEMICOLON
    (88) if_statement -> . IF LPAREN expression RPAREN statement statement_else_opt
    (91) iteration_statement -> . while_clause
    (92) iteration_statement -> . for_clause
    (97) jump_statement -> . BREAK SEMICOLON
    (98) jump_statement -> . CONTINUE SEMICOLON
    (99) jump_statement -> . RETURN expression_opt SEMICOLON
    (13) variable_decl -> . LET declarator declarator_nest
    (16) constant_decl -> . CONST declarator declarator_nest
    (86) expression_opt -> . expression
    (87) expression_opt -> . empty
    (93) while_clause -> . WHILE LPAREN expression RPAREN statement
    (94) for_clause -> . FOR LPAREN for_init_statement expression_opt SEMICOLON expression RPAREN statement
    (100) expression -> . assign_expr
    (101) expression -> . binary_expr
    (102) expression -> . unary_expr
    (137) empty -> .
    (103) assign_expr -> . expression ASSIGN expression
    (104) binary_expr -> . expression PLUS expression
    (105) binary_expr -> . expression MINUS expression
    (106) binary_expr -> . expression MUL expression
    (107) binary_expr -> . expression DIV expression
    (108) unary_expr -> . unary_operation_opt primary_expr
    (109) unary_operation_opt -> . NOT
    (110) unary_operation_opt -> . empty

    LBRACE          shift and go to state 26
    IF              shift and go to state 49
    BREAK           shift and go to state 53
    CONTINUE        shift and go to state 54
    RETURN          shift and go to state 55
    LET             shift and go to state 13
    CONST           shift and go to state 14
    WHILE           shift and go to state 56
    FOR             shift and go to state 57
    SEMICOLON       reduce using rule 137 (empty -> .)
    INT             reduce using rule 137 (empty -> .)
    FLOAT           reduce using rule 137 (empty -> .)
    DOUBLE          reduce using rule 137 (empty -> .)
    ID              reduce using rule 137 (empty -> .)
    LPAREN          reduce using rule 137 (empty -> .)
    VOID            reduce using rule 137 (empty -> .)
    BOOL            reduce using rule 137 (empty -> .)
    I8              reduce using rule 137 (empty -> .)
    U8              reduce using rule 137 (empty -> .)
    I16             reduce using rule 137 (empty -> .)
    U16             reduce using rule 137 (empty -> .)
    I32             reduce using rule 137 (empty -> .)
    U32             reduce using rule 137 (empty -> .)
    I64             reduce using rule 137 (empty -> .)
    U64             reduce using rule 137 (empty -> .)
    F16             reduce using rule 137 (empty -> .)
    F32             reduce using rule 137 (empty -> .)
    F64             reduce using rule 137 (empty -> .)
    LANGRBRACKET    reduce using rule 137 (empty -> .)
    NOT             shift and go to state 62

    expression_opt                 shift and go to state 48
    expression                     shift and go to state 50
    statement                      shift and go to state 242
    decl_statement                 shift and go to state 40
    block_statement                shift and go to state 41
    expression_statement           shift and go to state 42
    if_statement                   shift and go to state 43
    iteration_statement            shift and go to state 44
    jump_statement                 shift and go to state 45
    variable_decl                  shift and go to state 46
    constant_decl                  shift and go to state 47
    while_clause                   shift and go to state 51
    for_clause                     shift and go to state 52
    empty                          shift and go to state 91
    assign_expr                    shift and go to state 58
    binary_expr                    shift and go to state 59
    unary_expr                     shift and go to state 60
    unary_operation_opt            shift and go to state 61

state 240

    (132) type_spec_comma_nest -> COMMA type_spec type_spec_comma_nest .

    RANGRBRACKET    reduce using rule 132 (type_spec_comma_nest -> COMMA type_spec type_spec_comma_nest .)


state 241

    (135) expression_comma_nest -> COMMA expression expression_comma_nest .

    RPAREN          reduce using rule 135 (expression_comma_nest -> COMMA expression expression_comma_nest .)


state 242

    (94) for_clause -> FOR LPAREN for_init_statement expression_opt SEMICOLON expression RPAREN statement .

    LBRACE          reduce using rule 94 (for_clause -> FOR LPAREN for_init_statement expression_opt SEMICOLON expression RPAREN statement .)
    IF              reduce using rule 94 (for_clause -> FOR LPAREN for_init_statement expression_opt SEMICOLON expression RPAREN statement .)
    BREAK           reduce using rule 94 (for_clause -> FOR LPAREN for_init_statement expression_opt SEMICOLON expression RPAREN statement .)
    CONTINUE        reduce using rule 94 (for_clause -> FOR LPAREN for_init_statement expression_opt SEMICOLON expression RPAREN statement .)
    RETURN          reduce using rule 94 (for_clause -> FOR LPAREN for_init_statement expression_opt SEMICOLON expression RPAREN statement .)
    LET             reduce using rule 94 (for_clause -> FOR LPAREN for_init_statement expression_opt SEMICOLON expression RPAREN statement .)
    CONST           reduce using rule 94 (for_clause -> FOR LPAREN for_init_statement expression_opt SEMICOLON expression RPAREN statement .)
    WHILE           reduce using rule 94 (for_clause -> FOR LPAREN for_init_statement expression_opt SEMICOLON expression RPAREN statement .)
    FOR             reduce using rule 94 (for_clause -> FOR LPAREN for_init_statement expression_opt SEMICOLON expression RPAREN statement .)
    NOT             reduce using rule 94 (for_clause -> FOR LPAREN for_init_statement expression_opt SEMICOLON expression RPAREN statement .)
    SEMICOLON       reduce using rule 94 (for_clause -> FOR LPAREN for_init_statement expression_opt SEMICOLON expression RPAREN statement .)
    INT             reduce using rule 94 (for_clause -> FOR LPAREN for_init_statement expression_opt SEMICOLON expression RPAREN statement .)
    FLOAT           reduce using rule 94 (for_clause -> FOR LPAREN for_init_statement expression_opt SEMICOLON expression RPAREN statement .)
    DOUBLE          reduce using rule 94 (for_clause -> FOR LPAREN for_init_statement expression_opt SEMICOLON expression RPAREN statement .)
    ID              reduce using rule 94 (for_clause -> FOR LPAREN for_init_statement expression_opt SEMICOLON expression RPAREN statement .)
    LPAREN          reduce using rule 94 (for_clause -> FOR LPAREN for_init_statement expression_opt SEMICOLON expression RPAREN statement .)
    VOID            reduce using rule 94 (for_clause -> FOR LPAREN for_init_statement expression_opt SEMICOLON expression RPAREN statement .)
    BOOL            reduce using rule 94 (for_clause -> FOR LPAREN for_init_statement expression_opt SEMICOLON expression RPAREN statement .)
    I8              reduce using rule 94 (for_clause -> FOR LPAREN for_init_statement expression_opt SEMICOLON expression RPAREN statement .)
    U8              reduce using rule 94 (for_clause -> FOR LPAREN for_init_statement expression_opt SEMICOLON expression RPAREN statement .)
    I16             reduce using rule 94 (for_clause -> FOR LPAREN for_init_statement expression_opt SEMICOLON expression RPAREN statement .)
    U16             reduce using rule 94 (for_clause -> FOR LPAREN for_init_statement expression_opt SEMICOLON expression RPAREN statement .)
    I32             reduce using rule 94 (for_clause -> FOR LPAREN for_init_statement expression_opt SEMICOLON expression RPAREN statement .)
    U32             reduce using rule 94 (for_clause -> FOR LPAREN for_init_statement expression_opt SEMICOLON expression RPAREN statement .)
    I64             reduce using rule 94 (for_clause -> FOR LPAREN for_init_statement expression_opt SEMICOLON expression RPAREN statement .)
    U64             reduce using rule 94 (for_clause -> FOR LPAREN for_init_statement expression_opt SEMICOLON expression RPAREN statement .)
    F16             reduce using rule 94 (for_clause -> FOR LPAREN for_init_statement expression_opt SEMICOLON expression RPAREN statement .)
    F32             reduce using rule 94 (for_clause -> FOR LPAREN for_init_statement expression_opt SEMICOLON expression RPAREN statement .)
    F64             reduce using rule 94 (for_clause -> FOR LPAREN for_init_statement expression_opt SEMICOLON expression RPAREN statement .)
    LANGRBRACKET    reduce using rule 94 (for_clause -> FOR LPAREN for_init_statement expression_opt SEMICOLON expression RPAREN statement .)
    RBRACE          reduce using rule 94 (for_clause -> FOR LPAREN for_init_statement expression_opt SEMICOLON expression RPAREN statement .)
    ELSE            reduce using rule 94 (for_clause -> FOR LPAREN for_init_statement expression_opt SEMICOLON expression RPAREN statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LPAREN in state 61 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 94 resolved as shift
WARNING: shift/reduce conflict for LANGRBRACKET in state 94 resolved as shift
WARNING: shift/reduce conflict for ID in state 105 resolved as shift
WARNING: shift/reduce conflict for VOID in state 105 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 105 resolved as shift
WARNING: shift/reduce conflict for I8 in state 105 resolved as shift
WARNING: shift/reduce conflict for U8 in state 105 resolved as shift
WARNING: shift/reduce conflict for I16 in state 105 resolved as shift
WARNING: shift/reduce conflict for U16 in state 105 resolved as shift
WARNING: shift/reduce conflict for I32 in state 105 resolved as shift
WARNING: shift/reduce conflict for U32 in state 105 resolved as shift
WARNING: shift/reduce conflict for I64 in state 105 resolved as shift
WARNING: shift/reduce conflict for U64 in state 105 resolved as shift
WARNING: shift/reduce conflict for F16 in state 105 resolved as shift
WARNING: shift/reduce conflict for F32 in state 105 resolved as shift
WARNING: shift/reduce conflict for F64 in state 105 resolved as shift
WARNING: shift/reduce conflict for LANGRBRACKET in state 105 resolved as shift
WARNING: shift/reduce conflict for ASSIGN in state 151 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 151 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 151 resolved as shift
WARNING: shift/reduce conflict for MUL in state 151 resolved as shift
WARNING: shift/reduce conflict for DIV in state 151 resolved as shift
WARNING: shift/reduce conflict for ASSIGN in state 152 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 152 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 152 resolved as shift
WARNING: shift/reduce conflict for MUL in state 152 resolved as shift
WARNING: shift/reduce conflict for DIV in state 152 resolved as shift
WARNING: shift/reduce conflict for ASSIGN in state 153 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 153 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 153 resolved as shift
WARNING: shift/reduce conflict for MUL in state 153 resolved as shift
WARNING: shift/reduce conflict for DIV in state 153 resolved as shift
WARNING: shift/reduce conflict for ASSIGN in state 154 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 154 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 154 resolved as shift
WARNING: shift/reduce conflict for MUL in state 154 resolved as shift
WARNING: shift/reduce conflict for DIV in state 154 resolved as shift
WARNING: shift/reduce conflict for ASSIGN in state 155 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 155 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 155 resolved as shift
WARNING: shift/reduce conflict for MUL in state 155 resolved as shift
WARNING: shift/reduce conflict for DIV in state 155 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 210 resolved as shift
WARNING: shift/reduce conflict for ASSIGN in state 218 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 218 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 218 resolved as shift
WARNING: shift/reduce conflict for MUL in state 218 resolved as shift
WARNING: shift/reduce conflict for DIV in state 218 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 236 resolved as shift
WARNING: shift/reduce conflict for REF in state 236 resolved as shift
WARNING: reduce/reduce conflict in state 94 resolved using rule (unary_expr -> unary_operation_opt primary_expr)
WARNING: rejected rule (empty -> <empty>) in state 94
WARNING: reduce/reduce conflict in state 104 resolved using rule (complex_type -> ID)
WARNING: rejected rule (operand -> ID) in state 104
WARNING: reduce/reduce conflict in state 169 resolved using rule (generics_type_list_opt -> empty)
WARNING: rejected rule (unary_operation_opt -> empty) in state 169
