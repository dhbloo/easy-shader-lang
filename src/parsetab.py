
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'startAND ASSIGN ASSIGNTYPE BOOL BREAK COLON COMMA CONST CONTINUE DIV DOT DOUBLE ELSE EQUAL F16 F32 F64 FLOAT FOR FUNC GENERICS GREATER GREATER_EQUAL HEXADECIMAL I16 I32 I64 I8 ID IF IN INT INTERFACE LANGRBRACKET LBRACE LBRACKET LESS LESS_EQUAL LET LOGICAL_AND LOGICAL_NOT LOGICAL_OR LPAREN LSHIFT MINUS MOD MUL NOT NOT_EQUAL OR OUT PLUS RANGRBRACKET RBRACE RBRACKET REF RETURN RPAREN RSHIFT SAMPLER SEMICOLON STRING STRUCT TYPE U16 U32 U64 U8 VOID WHILE XORstart : translation_unittranslation_unit : block_decl translation_unit\n                        | function_def translation_unit\n                        | emptyblock_decl : type_decl SEMICOLON\n                  | variable_decl SEMICOLON\n                  | constant_decl SEMICOLON\n                  | function_decl SEMICOLONtype_decl : type_alias_decl\n                 | struct_decl\n                 | interface_decltype_alias_decl : TYPE ID ASSIGN type_specvariable_decl : LET declarator declarator_nestdeclarator_nest : COMMA declarator declarator_nest\n                       | emptyconstant_decl : CONST declarator declarator_nestdeclarator : ID type_spec_colon_opt ASSIGN expressiontype_spec_colon_opt : COLON type_spec\n                           | emptyfunction_decl : FUNC ID function_signfunction_def : function_decl block_statementtype_spec : simple_type\n                 | complex_type\n                 | array_type\n                 | reference_type\n                 | function_typesimple_type : VOID\n                   | BOOL\n                   | I8\n                   | U8\n                   | I16\n                   | U16\n                   | I32\n                   | U32\n                   | I64\n                   | U64\n                   | F16\n                   | F32\n                   | F64complex_type : IDarray_type : type_spec LBRACKET int_literal_opt RBRACKETint_literal_opt : INT\n                       | emptyreference_type : type_spec REFfunction_type : function_signstruct_decl : STRUCT generics_type_list_opt LBRACE member_decl_nest RBRACEinterface_decl : INTERFACE generics_type_list_opt LBRACE interface_member_decl_nest RBRACEgenerics_type_list_opt : generics_type_list\n                              | emptymember_decl_nest : member_decl member_decl_nest\n                        | emptyinterface_member_decl_nest : interface_member_decl interface_member_decl_nest\n                        | emptymember_decl : declarator\n                   | function_definterface_member_decl : declarator\n                             | function_declfunction_sign : generics_type_list_opt LPAREN parameter_decl_list_opt RPAREN type_spec_assigntype_opt parameter_decl_list_opt : parameter_dcel_list\n                               | emptytype_spec_assigntype_opt : ASSIGNTYPE type_spec\n                                | emptyparameter_dcel_list : parameter_decl parameter_decl_comma_nestparameter_decl_comma_nest : COMMA parameter_decl parameter_decl_comma_nest\n                                 | emptyparameter_decl : ID type_spec_colon_optgenerics_type_list : LANGRBRACKET generics_type generics_type_comma_nest RANGRBRACKETgenerics_type_comma_nest : COMMA generics_type generics_type_comma_nest\n                                | emptygenerics_type : ID generics_type_range_colon_optgenerics_type_range_colon_opt : COLON generics_type_range\n                                     | emptygenerics_type_range : complex_typestatement : decl_statement\n                 | block_statement\n                 | expression_statement\n                 | if_statement\n                 | iteration_statement\n                 | jump_statementdecl_statement : variable_decl SEMICOLON\n                      | constant_decl SEMICOLONblock_statement : LBRACE statement_nest RBRACEstatement_nest : statement statement_nest\n                      | emptyexpression_statement : expression_opt SEMICOLONexpression_opt : expression\n                      | emptyif_statement : IF LPAREN expression RPAREN statement statement_else_optstatement_else_opt : ELSE statement\n                          | emptyiteration_statement : while_clause\n                             | for_clausewhile_clause : WHILE LPAREN expression RPAREN statementfor_clause : FOR LPAREN for_init_statement expression_opt SEMICOLON expression RPAREN statementfor_init_statement : expression_statement\n                          | decl_statementjump_statement : BREAK SEMICOLON\n                      | CONTINUE SEMICOLON\n                      | RETURN expression_opt SEMICOLONexpression : assign_expr\n                  | binary_expr\n                  | unary_exprassign_expr : expression ASSIGN expressionbinary_expr : expression PLUS expression\n                   | expression MINUS expression\n                   | expression MUL expression\n                   | expression DIV expressionunary_expr : unary_operation_opt primary_expr unary_operation_opt : NOT\n                           | emptyprimary_expr : operand\n                    | member_expr\n                    | index_expr\n                    | cast_expr\n                    | new_expr\n                    | call_exproperand : INT\n               | FLOAT\n               | DOUBLE\n               | ID\n               | LPAREN expression RPARENmember_expr : ID DOT IDindex_expr : primary_expr LBRACKET expression RBRACKETcast_expr : LPAREN type_spec RPAREN expressionnew_expr : type_spec LPAREN parameter_list_opt RPARENparameter_list_opt : parameter_list\n                          | emptycall_expr : primary_expr generics_specialization_list_opt LPAREN parameter_list_opt RPARENgenerics_specialization_list_opt : generics_specialization_list\n                                        | emptygenerics_specialization_list : LANGRBRACKET type_spec type_spec_comma_nest RANGRBRACKETtype_spec_comma_nest : COMMA type_spec type_spec_comma_nest\n                            | emptyparameter_list : expression expression_comma_nestexpression_comma_nest : COMMA expression expression_comma_nest\n                             | emptyempty :'
    
_lr_action_items = {'$end':([0,1,2,3,4,5,19,20,21,22,23,24,25,77,],[-137,0,-1,-137,-137,-4,-2,-3,-5,-6,-7,-8,-21,-82,]),'LET':([0,3,4,21,22,23,24,25,26,38,40,41,42,43,44,45,51,52,77,79,80,81,88,89,93,156,188,189,210,211,228,229,230,238,239,242,],[13,13,13,-5,-6,-7,-8,-21,13,13,-74,-75,-76,-77,-78,-79,-91,-92,-82,-80,-81,-85,-97,-98,13,-99,13,13,-137,-93,-88,13,-90,-89,13,-94,]),'CONST':([0,3,4,21,22,23,24,25,26,38,40,41,42,43,44,45,51,52,77,79,80,81,88,89,93,156,188,189,210,211,228,229,230,238,239,242,],[14,14,14,-5,-6,-7,-8,-21,14,14,-74,-75,-76,-77,-78,-79,-91,-92,-82,-80,-81,-85,-97,-98,14,-99,14,14,-137,-93,-88,14,-90,-89,14,-94,]),'FUNC':([0,3,4,21,22,23,24,25,58,59,60,70,73,76,77,94,95,96,97,98,99,100,101,102,103,104,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,129,133,135,136,145,147,148,151,152,153,154,155,172,174,194,195,204,213,218,219,223,224,226,232,236,],[15,15,15,-5,-6,-7,-8,-21,-100,-101,-102,-20,15,15,-82,-108,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-45,-40,15,-54,-55,15,-56,-57,-103,-104,-105,-106,-107,-44,-17,-122,-121,-137,-123,-124,-125,-41,-58,-62,-128,-61,]),'TYPE':([0,3,4,21,22,23,24,25,77,],[16,16,16,-5,-6,-7,-8,-21,-82,]),'STRUCT':([0,3,4,21,22,23,24,25,77,],[17,17,17,-5,-6,-7,-8,-21,-82,]),'INTERFACE':([0,3,4,21,22,23,24,25,77,],[18,18,18,-5,-6,-7,-8,-21,-82,]),'SEMICOLON':([6,7,8,9,10,11,12,26,27,29,38,39,40,41,42,43,44,45,46,47,48,50,51,52,53,54,55,58,59,60,63,65,69,70,77,79,80,81,88,89,90,91,93,94,95,96,97,98,99,100,101,102,103,104,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,129,131,151,152,153,154,155,156,158,159,160,172,173,174,180,186,188,189,190,194,195,204,210,211,213,218,219,223,224,226,228,229,230,232,236,238,239,242,],[21,22,23,24,-9,-10,-11,-137,-137,-137,-137,-87,-74,-75,-76,-77,-78,-79,79,80,81,-86,-91,-92,88,89,-137,-100,-101,-102,-13,-15,-16,-20,-82,-80,-81,-85,-97,-98,156,-87,-137,-108,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-45,-137,-40,-12,-103,-104,-105,-106,-107,-99,-137,-95,-96,-44,-14,-17,-46,-47,-137,-137,212,-122,-121,-137,-137,-93,-123,-124,-125,-41,-58,-62,-88,-137,-90,-128,-61,-89,-137,-94,]),'LBRACE':([9,17,18,26,32,33,34,36,38,40,41,42,43,44,45,51,52,70,77,79,80,81,88,89,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,129,137,156,172,182,188,189,204,210,211,223,224,226,228,229,230,236,238,239,242,],[26,-137,-137,26,73,-48,-49,76,26,-74,-75,-76,-77,-78,-79,-91,-92,-20,-82,-80,-81,-85,-97,-98,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-45,-40,26,-99,-44,-67,26,26,-137,-137,-93,-41,-58,-62,-88,26,-90,-61,-89,26,-94,]),'ID':([13,14,15,16,25,26,35,38,39,40,41,42,43,44,45,51,52,55,58,59,60,61,62,64,67,70,72,73,76,77,79,80,81,82,83,84,85,86,87,88,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,127,129,130,133,135,136,139,142,145,147,148,150,151,152,153,154,155,156,158,159,160,161,165,166,169,170,172,174,188,189,192,194,195,196,199,204,206,210,211,212,213,216,218,219,221,223,224,225,226,228,229,230,232,236,238,239,242,],[28,28,30,31,-21,-137,75,-137,-110,-74,-75,-76,-77,-78,-79,-91,-92,-137,-100,-101,-102,104,-109,28,129,-20,129,28,28,-82,-80,-81,-85,-137,-137,-137,-137,-137,-137,-97,-98,-110,-137,-137,-108,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,129,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-45,-137,-40,179,28,-54,-55,75,129,28,-56,-57,-110,-103,-104,-105,-106,-107,-99,-137,-95,-96,-137,129,194,-110,-137,-44,-17,-137,-137,-137,-122,-121,-137,-110,-137,179,-137,-93,-137,-123,129,-124,-125,-137,-41,-58,129,-62,-88,-137,-90,-128,-61,-89,-137,-94,]),'LANGRBRACKET':([17,18,26,30,38,39,40,41,42,43,44,45,51,52,55,58,59,60,61,62,67,72,77,79,80,81,82,83,84,85,86,87,88,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,127,150,151,152,153,154,155,156,158,159,160,161,165,169,170,188,189,192,194,195,196,199,210,211,212,213,216,218,219,221,225,228,229,230,232,238,239,242,],[35,35,-137,35,-137,-110,-74,-75,-76,-77,-78,-79,-91,-92,-137,-100,-101,-102,35,-109,35,35,-82,-80,-81,-85,-137,-137,-137,-137,-137,-137,-97,-98,-110,-137,-137,165,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,35,-137,-110,-103,-104,-105,-106,-107,-99,-137,-95,-96,-137,35,-110,-137,-137,-137,-137,-122,-121,-137,-110,-137,-93,-137,-123,35,-124,-125,-137,35,-88,-137,-90,-128,-89,-137,-94,]),'RBRACE':([25,26,37,38,39,40,41,42,43,44,45,51,52,58,59,60,70,73,76,77,78,79,80,81,88,89,94,95,96,97,98,99,100,101,102,103,104,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,129,132,133,134,135,136,144,145,146,147,148,151,152,153,154,155,156,172,174,181,187,194,195,204,210,211,213,218,219,223,224,226,228,230,232,236,238,242,],[-21,-137,77,-137,-84,-74,-75,-76,-77,-78,-79,-91,-92,-100,-101,-102,-20,-137,-137,-82,-83,-80,-81,-85,-97,-98,-108,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-45,-40,180,-137,-51,-54,-55,186,-137,-53,-56,-57,-103,-104,-105,-106,-107,-99,-44,-17,-50,-52,-122,-121,-137,-137,-93,-123,-124,-125,-41,-58,-62,-88,-90,-128,-61,-89,-94,]),'INT':([26,38,39,40,41,42,43,44,45,51,52,55,61,62,77,79,80,81,82,83,84,85,86,87,88,89,91,92,93,105,127,150,156,158,159,160,161,169,170,171,188,189,192,196,199,210,211,212,221,228,229,230,238,239,242,],[-137,-137,-110,-74,-75,-76,-77,-78,-79,-91,-92,-137,101,-109,-82,-80,-81,-85,-137,-137,-137,-137,-137,-137,-97,-98,-110,-137,-137,-137,-137,-110,-99,-137,-95,-96,-137,-110,-137,202,-137,-137,-137,-137,-110,-137,-93,-137,-137,-88,-137,-90,-89,-137,-94,]),'FLOAT':([26,38,39,40,41,42,43,44,45,51,52,55,61,62,77,79,80,81,82,83,84,85,86,87,88,89,91,92,93,105,127,150,156,158,159,160,161,169,170,188,189,192,196,199,210,211,212,221,228,229,230,238,239,242,],[-137,-137,-110,-74,-75,-76,-77,-78,-79,-91,-92,-137,102,-109,-82,-80,-81,-85,-137,-137,-137,-137,-137,-137,-97,-98,-110,-137,-137,-137,-137,-110,-99,-137,-95,-96,-137,-110,-137,-137,-137,-137,-137,-110,-137,-93,-137,-137,-88,-137,-90,-89,-137,-94,]),'DOUBLE':([26,38,39,40,41,42,43,44,45,51,52,55,61,62,77,79,80,81,82,83,84,85,86,87,88,89,91,92,93,105,127,150,156,158,159,160,161,169,170,188,189,192,196,199,210,211,212,221,228,229,230,238,239,242,],[-137,-137,-110,-74,-75,-76,-77,-78,-79,-91,-92,-137,103,-109,-82,-80,-81,-85,-137,-137,-137,-137,-137,-137,-97,-98,-110,-137,-137,-137,-137,-110,-99,-137,-95,-96,-137,-110,-137,-137,-137,-137,-137,-110,-137,-93,-137,-137,-88,-137,-90,-89,-137,-94,]),'LPAREN':([26,30,33,34,38,39,40,41,42,43,44,45,49,51,52,55,56,57,58,59,60,61,62,67,71,72,77,79,80,81,82,83,84,85,86,87,88,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,127,129,150,151,152,153,154,155,156,158,159,160,161,162,163,164,165,169,170,172,182,188,189,192,194,195,196,199,204,210,211,212,213,216,218,219,221,223,224,225,226,228,229,230,232,233,236,238,239,242,],[-137,-137,-48,-49,-137,-110,-74,-75,-76,-77,-78,-79,82,-91,-92,-137,92,93,-100,-101,-102,105,-109,-137,130,-137,-82,-80,-81,-85,-137,-137,-137,-137,-137,-137,-97,-98,-110,-137,-137,-108,-111,-112,-113,-114,-115,-116,-117,-118,-119,-40,-137,170,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-45,-137,-40,-110,-103,-104,-105,-106,-107,-99,-137,-95,-96,-137,192,-129,-130,-137,-49,-137,-44,-67,-137,-137,-137,-122,-121,-137,-110,-137,-137,-93,-137,-123,-137,-124,-125,-137,-41,-58,-137,-62,-88,-137,-90,-128,-131,-61,-89,-137,-94,]),'VOID':([26,38,39,40,41,42,43,44,45,51,52,55,61,62,67,72,77,79,80,81,82,83,84,85,86,87,88,89,91,92,93,105,127,150,156,158,159,160,161,165,169,170,188,189,192,196,199,210,211,212,216,221,225,228,229,230,238,239,242,],[-137,-137,-110,-74,-75,-76,-77,-78,-79,-91,-92,-137,112,-109,112,112,-82,-80,-81,-85,-137,-137,-137,-137,-137,-137,-97,-98,-110,-137,-137,112,-137,-110,-99,-137,-95,-96,-137,112,-110,-137,-137,-137,-137,-137,-110,-137,-93,-137,112,-137,112,-88,-137,-90,-89,-137,-94,]),'BOOL':([26,38,39,40,41,42,43,44,45,51,52,55,61,62,67,72,77,79,80,81,82,83,84,85,86,87,88,89,91,92,93,105,127,150,156,158,159,160,161,165,169,170,188,189,192,196,199,210,211,212,216,221,225,228,229,230,238,239,242,],[-137,-137,-110,-74,-75,-76,-77,-78,-79,-91,-92,-137,113,-109,113,113,-82,-80,-81,-85,-137,-137,-137,-137,-137,-137,-97,-98,-110,-137,-137,113,-137,-110,-99,-137,-95,-96,-137,113,-110,-137,-137,-137,-137,-137,-110,-137,-93,-137,113,-137,113,-88,-137,-90,-89,-137,-94,]),'I8':([26,38,39,40,41,42,43,44,45,51,52,55,61,62,67,72,77,79,80,81,82,83,84,85,86,87,88,89,91,92,93,105,127,150,156,158,159,160,161,165,169,170,188,189,192,196,199,210,211,212,216,221,225,228,229,230,238,239,242,],[-137,-137,-110,-74,-75,-76,-77,-78,-79,-91,-92,-137,114,-109,114,114,-82,-80,-81,-85,-137,-137,-137,-137,-137,-137,-97,-98,-110,-137,-137,114,-137,-110,-99,-137,-95,-96,-137,114,-110,-137,-137,-137,-137,-137,-110,-137,-93,-137,114,-137,114,-88,-137,-90,-89,-137,-94,]),'U8':([26,38,39,40,41,42,43,44,45,51,52,55,61,62,67,72,77,79,80,81,82,83,84,85,86,87,88,89,91,92,93,105,127,150,156,158,159,160,161,165,169,170,188,189,192,196,199,210,211,212,216,221,225,228,229,230,238,239,242,],[-137,-137,-110,-74,-75,-76,-77,-78,-79,-91,-92,-137,115,-109,115,115,-82,-80,-81,-85,-137,-137,-137,-137,-137,-137,-97,-98,-110,-137,-137,115,-137,-110,-99,-137,-95,-96,-137,115,-110,-137,-137,-137,-137,-137,-110,-137,-93,-137,115,-137,115,-88,-137,-90,-89,-137,-94,]),'I16':([26,38,39,40,41,42,43,44,45,51,52,55,61,62,67,72,77,79,80,81,82,83,84,85,86,87,88,89,91,92,93,105,127,150,156,158,159,160,161,165,169,170,188,189,192,196,199,210,211,212,216,221,225,228,229,230,238,239,242,],[-137,-137,-110,-74,-75,-76,-77,-78,-79,-91,-92,-137,116,-109,116,116,-82,-80,-81,-85,-137,-137,-137,-137,-137,-137,-97,-98,-110,-137,-137,116,-137,-110,-99,-137,-95,-96,-137,116,-110,-137,-137,-137,-137,-137,-110,-137,-93,-137,116,-137,116,-88,-137,-90,-89,-137,-94,]),'U16':([26,38,39,40,41,42,43,44,45,51,52,55,61,62,67,72,77,79,80,81,82,83,84,85,86,87,88,89,91,92,93,105,127,150,156,158,159,160,161,165,169,170,188,189,192,196,199,210,211,212,216,221,225,228,229,230,238,239,242,],[-137,-137,-110,-74,-75,-76,-77,-78,-79,-91,-92,-137,117,-109,117,117,-82,-80,-81,-85,-137,-137,-137,-137,-137,-137,-97,-98,-110,-137,-137,117,-137,-110,-99,-137,-95,-96,-137,117,-110,-137,-137,-137,-137,-137,-110,-137,-93,-137,117,-137,117,-88,-137,-90,-89,-137,-94,]),'I32':([26,38,39,40,41,42,43,44,45,51,52,55,61,62,67,72,77,79,80,81,82,83,84,85,86,87,88,89,91,92,93,105,127,150,156,158,159,160,161,165,169,170,188,189,192,196,199,210,211,212,216,221,225,228,229,230,238,239,242,],[-137,-137,-110,-74,-75,-76,-77,-78,-79,-91,-92,-137,118,-109,118,118,-82,-80,-81,-85,-137,-137,-137,-137,-137,-137,-97,-98,-110,-137,-137,118,-137,-110,-99,-137,-95,-96,-137,118,-110,-137,-137,-137,-137,-137,-110,-137,-93,-137,118,-137,118,-88,-137,-90,-89,-137,-94,]),'U32':([26,38,39,40,41,42,43,44,45,51,52,55,61,62,67,72,77,79,80,81,82,83,84,85,86,87,88,89,91,92,93,105,127,150,156,158,159,160,161,165,169,170,188,189,192,196,199,210,211,212,216,221,225,228,229,230,238,239,242,],[-137,-137,-110,-74,-75,-76,-77,-78,-79,-91,-92,-137,119,-109,119,119,-82,-80,-81,-85,-137,-137,-137,-137,-137,-137,-97,-98,-110,-137,-137,119,-137,-110,-99,-137,-95,-96,-137,119,-110,-137,-137,-137,-137,-137,-110,-137,-93,-137,119,-137,119,-88,-137,-90,-89,-137,-94,]),'I64':([26,38,39,40,41,42,43,44,45,51,52,55,61,62,67,72,77,79,80,81,82,83,84,85,86,87,88,89,91,92,93,105,127,150,156,158,159,160,161,165,169,170,188,189,192,196,199,210,211,212,216,221,225,228,229,230,238,239,242,],[-137,-137,-110,-74,-75,-76,-77,-78,-79,-91,-92,-137,120,-109,120,120,-82,-80,-81,-85,-137,-137,-137,-137,-137,-137,-97,-98,-110,-137,-137,120,-137,-110,-99,-137,-95,-96,-137,120,-110,-137,-137,-137,-137,-137,-110,-137,-93,-137,120,-137,120,-88,-137,-90,-89,-137,-94,]),'U64':([26,38,39,40,41,42,43,44,45,51,52,55,61,62,67,72,77,79,80,81,82,83,84,85,86,87,88,89,91,92,93,105,127,150,156,158,159,160,161,165,169,170,188,189,192,196,199,210,211,212,216,221,225,228,229,230,238,239,242,],[-137,-137,-110,-74,-75,-76,-77,-78,-79,-91,-92,-137,121,-109,121,121,-82,-80,-81,-85,-137,-137,-137,-137,-137,-137,-97,-98,-110,-137,-137,121,-137,-110,-99,-137,-95,-96,-137,121,-110,-137,-137,-137,-137,-137,-110,-137,-93,-137,121,-137,121,-88,-137,-90,-89,-137,-94,]),'F16':([26,38,39,40,41,42,43,44,45,51,52,55,61,62,67,72,77,79,80,81,82,83,84,85,86,87,88,89,91,92,93,105,127,150,156,158,159,160,161,165,169,170,188,189,192,196,199,210,211,212,216,221,225,228,229,230,238,239,242,],[-137,-137,-110,-74,-75,-76,-77,-78,-79,-91,-92,-137,122,-109,122,122,-82,-80,-81,-85,-137,-137,-137,-137,-137,-137,-97,-98,-110,-137,-137,122,-137,-110,-99,-137,-95,-96,-137,122,-110,-137,-137,-137,-137,-137,-110,-137,-93,-137,122,-137,122,-88,-137,-90,-89,-137,-94,]),'F32':([26,38,39,40,41,42,43,44,45,51,52,55,61,62,67,72,77,79,80,81,82,83,84,85,86,87,88,89,91,92,93,105,127,150,156,158,159,160,161,165,169,170,188,189,192,196,199,210,211,212,216,221,225,228,229,230,238,239,242,],[-137,-137,-110,-74,-75,-76,-77,-78,-79,-91,-92,-137,123,-109,123,123,-82,-80,-81,-85,-137,-137,-137,-137,-137,-137,-97,-98,-110,-137,-137,123,-137,-110,-99,-137,-95,-96,-137,123,-110,-137,-137,-137,-137,-137,-110,-137,-93,-137,123,-137,123,-88,-137,-90,-89,-137,-94,]),'F64':([26,38,39,40,41,42,43,44,45,51,52,55,61,62,67,72,77,79,80,81,82,83,84,85,86,87,88,89,91,92,93,105,127,150,156,158,159,160,161,165,169,170,188,189,192,196,199,210,211,212,216,221,225,228,229,230,238,239,242,],[-137,-137,-110,-74,-75,-76,-77,-78,-79,-91,-92,-137,124,-109,124,124,-82,-80,-81,-85,-137,-137,-137,-137,-137,-137,-97,-98,-110,-137,-137,124,-137,-110,-99,-137,-95,-96,-137,124,-110,-137,-137,-137,-137,-137,-110,-137,-93,-137,124,-137,124,-88,-137,-90,-89,-137,-94,]),'IF':([26,38,40,41,42,43,44,45,51,52,77,79,80,81,88,89,156,188,189,210,211,228,229,230,238,239,242,],[49,49,-74,-75,-76,-77,-78,-79,-91,-92,-82,-80,-81,-85,-97,-98,-99,49,49,-137,-93,-88,49,-90,-89,49,-94,]),'BREAK':([26,38,40,41,42,43,44,45,51,52,77,79,80,81,88,89,156,188,189,210,211,228,229,230,238,239,242,],[53,53,-74,-75,-76,-77,-78,-79,-91,-92,-82,-80,-81,-85,-97,-98,-99,53,53,-137,-93,-88,53,-90,-89,53,-94,]),'CONTINUE':([26,38,40,41,42,43,44,45,51,52,77,79,80,81,88,89,156,188,189,210,211,228,229,230,238,239,242,],[54,54,-74,-75,-76,-77,-78,-79,-91,-92,-82,-80,-81,-85,-97,-98,-99,54,54,-137,-93,-88,54,-90,-89,54,-94,]),'RETURN':([26,38,40,41,42,43,44,45,51,52,77,79,80,81,88,89,156,188,189,210,211,228,229,230,238,239,242,],[55,55,-74,-75,-76,-77,-78,-79,-91,-92,-82,-80,-81,-85,-97,-98,-99,55,55,-137,-93,-88,55,-90,-89,55,-94,]),'WHILE':([26,38,40,41,42,43,44,45,51,52,77,79,80,81,88,89,156,188,189,210,211,228,229,230,238,239,242,],[56,56,-74,-75,-76,-77,-78,-79,-91,-92,-82,-80,-81,-85,-97,-98,-99,56,56,-137,-93,-88,56,-90,-89,56,-94,]),'FOR':([26,38,40,41,42,43,44,45,51,52,77,79,80,81,88,89,156,188,189,210,211,228,229,230,238,239,242,],[57,57,-74,-75,-76,-77,-78,-79,-91,-92,-82,-80,-81,-85,-97,-98,-99,57,57,-137,-93,-88,57,-90,-89,57,-94,]),'NOT':([26,38,40,41,42,43,44,45,51,52,55,77,79,80,81,82,83,84,85,86,87,88,89,92,93,105,127,156,158,159,160,161,170,188,189,192,196,210,211,212,221,228,229,230,238,239,242,],[62,62,-74,-75,-76,-77,-78,-79,-91,-92,62,-82,-80,-81,-85,62,62,62,62,62,62,-97,-98,62,62,62,62,-99,62,-95,-96,62,62,62,62,62,62,-137,-93,62,62,-88,62,-90,-89,62,-94,]),'COMMA':([27,29,58,59,60,68,74,75,94,95,96,97,98,99,100,101,102,103,104,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,129,141,143,151,152,153,154,155,172,174,178,179,183,184,185,193,194,195,200,204,208,213,218,219,223,224,226,227,232,234,235,236,],[64,64,-100,-101,-102,-19,139,-137,-108,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-45,64,-18,-40,-70,-72,-103,-104,-105,-106,-107,-44,-17,206,-137,139,-71,-73,216,-122,-121,221,-137,-66,-123,-124,-125,-41,-58,-62,206,-128,216,221,-61,]),'COLON':([28,75,179,],[67,142,67,]),'ASSIGN':([28,31,50,58,59,60,66,68,94,95,96,97,98,99,100,101,102,103,104,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,128,129,149,151,152,153,154,155,157,167,172,174,191,194,195,200,204,213,218,219,223,224,226,231,232,235,236,],[-137,72,83,-100,-101,-102,127,-19,-108,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-45,-18,-40,83,83,83,83,83,83,83,83,-44,83,83,-122,-121,83,-137,-123,83,-125,-41,-58,-62,83,-128,83,-61,]),'ELSE':([40,41,42,43,44,45,51,52,77,79,80,81,88,89,156,210,211,228,230,238,242,],[-74,-75,-76,-77,-78,-79,-91,-92,-82,-80,-81,-85,-97,-98,-99,229,-93,-88,-90,-89,-94,]),'PLUS':([50,58,59,60,94,95,96,97,98,99,100,101,102,103,104,149,151,152,153,154,155,157,167,174,191,194,195,200,213,218,219,231,232,235,],[84,-100,-101,-102,-108,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,84,84,84,84,84,84,84,84,84,84,-122,-121,84,-123,84,-125,84,-128,84,]),'MINUS':([50,58,59,60,94,95,96,97,98,99,100,101,102,103,104,149,151,152,153,154,155,157,167,174,191,194,195,200,213,218,219,231,232,235,],[85,-100,-101,-102,-108,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,85,85,85,85,85,85,85,85,85,85,-122,-121,85,-123,85,-125,85,-128,85,]),'MUL':([50,58,59,60,94,95,96,97,98,99,100,101,102,103,104,149,151,152,153,154,155,157,167,174,191,194,195,200,213,218,219,231,232,235,],[86,-100,-101,-102,-108,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,86,86,86,86,86,86,86,86,86,86,-122,-121,86,-123,86,-125,86,-128,86,]),'DIV':([50,58,59,60,94,95,96,97,98,99,100,101,102,103,104,149,151,152,153,154,155,157,167,174,191,194,195,200,213,218,219,231,232,235,],[87,-100,-101,-102,-108,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,87,87,87,87,87,87,87,87,87,87,-122,-121,87,-123,87,-125,87,-128,87,]),'RPAREN':([58,59,60,68,94,95,96,97,98,99,100,101,102,103,104,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,128,129,130,149,151,152,153,154,155,157,167,168,170,172,175,176,177,178,179,192,194,195,197,198,199,200,204,205,207,208,213,214,218,219,220,222,223,224,226,227,231,232,235,236,237,241,],[-100,-101,-102,-19,-108,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-45,-18,-40,-137,188,-103,-104,-105,-106,-107,189,195,196,-137,-44,204,-59,-60,-137,-137,-137,-122,-121,219,-126,-127,-137,-137,-63,-65,-66,-123,232,-124,-125,-134,-136,-41,-58,-62,-137,239,-128,-137,-61,-64,-135,]),'LBRACKET':([58,59,60,94,95,96,97,98,99,100,101,102,103,104,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,128,129,131,151,152,153,154,155,168,172,193,194,195,204,213,218,219,223,224,226,232,234,236,],[-100,-101,-102,161,-111,-112,-113,-114,-115,-116,-117,-118,-119,-40,171,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-45,171,-40,171,-103,-104,-105,-106,-107,171,-44,171,-122,-121,-137,-123,-124,-125,-41,-58,-62,-128,171,171,]),'RBRACKET':([58,59,60,94,95,96,97,98,99,100,101,102,103,104,151,152,153,154,155,171,191,194,195,201,202,203,213,218,219,232,],[-100,-101,-102,-108,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-103,-104,-105,-106,-107,-137,213,-122,-121,223,-42,-43,-123,-124,-125,-128,]),'RANGRBRACKET':([74,75,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,129,138,140,141,143,172,183,184,185,193,204,209,215,217,223,224,226,234,236,240,],[-137,-137,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-45,-40,182,-69,-70,-72,-44,-137,-71,-73,-137,-137,-68,233,-133,-41,-58,-62,-137,-61,-132,]),'DOT':([104,],[166,]),'REF':([104,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,128,129,131,168,172,193,204,223,224,226,234,236,],[-40,172,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-45,172,-40,172,172,-44,172,-137,-41,-58,-62,172,172,]),'ASSIGNTYPE':([204,],[225,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'translation_unit':([0,3,4,],[2,19,20,]),'block_decl':([0,3,4,],[3,3,3,]),'function_def':([0,3,4,73,133,],[4,4,4,136,136,]),'empty':([0,3,4,17,18,26,27,28,29,30,38,55,61,67,72,73,74,75,76,82,83,84,85,86,87,92,93,94,105,126,127,130,133,145,158,161,165,170,171,178,179,183,188,189,192,193,196,200,204,210,212,216,221,225,227,229,234,235,239,],[5,5,5,34,34,39,65,68,65,34,39,91,34,34,34,134,140,143,146,150,150,150,150,150,150,150,91,164,169,65,150,177,134,146,91,150,34,199,203,207,68,140,91,91,199,217,150,222,226,230,150,34,150,34,207,91,217,222,91,]),'type_decl':([0,3,4,],[6,6,6,]),'variable_decl':([0,3,4,26,38,93,188,189,229,239,],[7,7,7,46,46,46,46,46,46,46,]),'constant_decl':([0,3,4,26,38,93,188,189,229,239,],[8,8,8,47,47,47,47,47,47,47,]),'function_decl':([0,3,4,73,76,133,145,],[9,9,9,137,148,137,148,]),'type_alias_decl':([0,3,4,],[10,10,10,]),'struct_decl':([0,3,4,],[11,11,11,]),'interface_decl':([0,3,4,],[12,12,12,]),'block_statement':([9,26,38,137,188,189,229,239,],[25,41,41,25,41,41,41,41,]),'declarator':([13,14,64,73,76,133,145,],[27,29,126,135,147,135,147,]),'generics_type_list_opt':([17,18,30,61,67,72,105,165,216,225,],[32,36,71,71,71,71,71,71,71,71,]),'generics_type_list':([17,18,30,61,67,72,105,165,216,225,],[33,33,33,33,33,33,33,33,33,33,]),'statement_nest':([26,38,],[37,78,]),'statement':([26,38,188,189,229,239,],[38,38,210,211,238,242,]),'decl_statement':([26,38,93,188,189,229,239,],[40,40,160,40,40,40,40,]),'expression_statement':([26,38,93,188,189,229,239,],[42,42,159,42,42,42,42,]),'if_statement':([26,38,188,189,229,239,],[43,43,43,43,43,43,]),'iteration_statement':([26,38,188,189,229,239,],[44,44,44,44,44,44,]),'jump_statement':([26,38,188,189,229,239,],[45,45,45,45,45,45,]),'expression_opt':([26,38,55,93,158,188,189,229,239,],[48,48,90,48,190,48,48,48,48,]),'expression':([26,38,55,82,83,84,85,86,87,92,93,105,127,158,161,170,188,189,192,196,212,221,229,239,],[50,50,50,149,151,152,153,154,155,157,50,167,174,50,191,200,50,50,200,218,231,235,50,50,]),'while_clause':([26,38,188,189,229,239,],[51,51,51,51,51,51,]),'for_clause':([26,38,188,189,229,239,],[52,52,52,52,52,52,]),'assign_expr':([26,38,55,82,83,84,85,86,87,92,93,105,127,158,161,170,188,189,192,196,212,221,229,239,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'binary_expr':([26,38,55,82,83,84,85,86,87,92,93,105,127,158,161,170,188,189,192,196,212,221,229,239,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'unary_expr':([26,38,55,82,83,84,85,86,87,92,93,105,127,158,161,170,188,189,192,196,212,221,229,239,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'unary_operation_opt':([26,38,55,82,83,84,85,86,87,92,93,105,127,158,161,170,188,189,192,196,212,221,229,239,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'declarator_nest':([27,29,126,],[63,69,173,]),'type_spec_colon_opt':([28,179,],[66,208,]),'function_sign':([30,61,67,72,105,165,216,225,],[70,125,125,125,125,125,125,125,]),'generics_type':([35,139,],[74,183,]),'primary_expr':([61,],[94,]),'operand':([61,],[95,]),'member_expr':([61,],[96,]),'index_expr':([61,],[97,]),'cast_expr':([61,],[98,]),'new_expr':([61,],[99,]),'call_expr':([61,],[100,]),'type_spec':([61,67,72,105,165,216,225,],[106,128,131,168,193,234,236,]),'simple_type':([61,67,72,105,165,216,225,],[107,107,107,107,107,107,107,]),'complex_type':([61,67,72,105,142,165,216,225,],[108,108,108,108,185,108,108,108,]),'array_type':([61,67,72,105,165,216,225,],[109,109,109,109,109,109,109,]),'reference_type':([61,67,72,105,165,216,225,],[110,110,110,110,110,110,110,]),'function_type':([61,67,72,105,165,216,225,],[111,111,111,111,111,111,111,]),'member_decl_nest':([73,133,],[132,181,]),'member_decl':([73,133,],[133,133,]),'generics_type_comma_nest':([74,183,],[138,209,]),'generics_type_range_colon_opt':([75,],[141,]),'interface_member_decl_nest':([76,145,],[144,187,]),'interface_member_decl':([76,145,],[145,145,]),'for_init_statement':([93,],[158,]),'generics_specialization_list_opt':([94,],[162,]),'generics_specialization_list':([94,],[163,]),'parameter_decl_list_opt':([130,],[175,]),'parameter_dcel_list':([130,],[176,]),'parameter_decl':([130,206,],[178,227,]),'generics_type_range':([142,],[184,]),'parameter_list_opt':([170,192,],[197,214,]),'parameter_list':([170,192,],[198,198,]),'int_literal_opt':([171,],[201,]),'parameter_decl_comma_nest':([178,227,],[205,237,]),'type_spec_comma_nest':([193,234,],[215,240,]),'expression_comma_nest':([200,235,],[220,241,]),'type_spec_assigntype_opt':([204,],[224,]),'statement_else_opt':([210,],[228,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> translation_unit','start',1,'p_expression_translationUnit','parser.py',36),
  ('translation_unit -> block_decl translation_unit','translation_unit',2,'p_translationUnit_nest','parser.py',41),
  ('translation_unit -> function_def translation_unit','translation_unit',2,'p_translationUnit_nest','parser.py',42),
  ('translation_unit -> empty','translation_unit',1,'p_translationUnit_nest','parser.py',43),
  ('block_decl -> type_decl SEMICOLON','block_decl',2,'p_blockDec','parser.py',48),
  ('block_decl -> variable_decl SEMICOLON','block_decl',2,'p_blockDec','parser.py',49),
  ('block_decl -> constant_decl SEMICOLON','block_decl',2,'p_blockDec','parser.py',50),
  ('block_decl -> function_decl SEMICOLON','block_decl',2,'p_blockDec','parser.py',51),
  ('type_decl -> type_alias_decl','type_decl',1,'p_typeDec','parser.py',56),
  ('type_decl -> struct_decl','type_decl',1,'p_typeDec','parser.py',57),
  ('type_decl -> interface_decl','type_decl',1,'p_typeDec','parser.py',58),
  ('type_alias_decl -> TYPE ID ASSIGN type_spec','type_alias_decl',4,'p_typeAliasDecl','parser.py',63),
  ('variable_decl -> LET declarator declarator_nest','variable_decl',3,'p_variableDecl','parser.py',68),
  ('declarator_nest -> COMMA declarator declarator_nest','declarator_nest',3,'p_declarator_nest','parser.py',72),
  ('declarator_nest -> empty','declarator_nest',1,'p_declarator_nest','parser.py',73),
  ('constant_decl -> CONST declarator declarator_nest','constant_decl',3,'p_constantDecl','parser.py',77),
  ('declarator -> ID type_spec_colon_opt ASSIGN expression','declarator',4,'p_declarator','parser.py',81),
  ('type_spec_colon_opt -> COLON type_spec','type_spec_colon_opt',2,'p_typeSpecColon_opt','parser.py',86),
  ('type_spec_colon_opt -> empty','type_spec_colon_opt',1,'p_typeSpecColon_opt','parser.py',87),
  ('function_decl -> FUNC ID function_sign','function_decl',3,'p_functioDecl','parser.py',91),
  ('function_def -> function_decl block_statement','function_def',2,'p_functionDef','parser.py',96),
  ('type_spec -> simple_type','type_spec',1,'p_typeSpec','parser.py',101),
  ('type_spec -> complex_type','type_spec',1,'p_typeSpec','parser.py',102),
  ('type_spec -> array_type','type_spec',1,'p_typeSpec','parser.py',103),
  ('type_spec -> reference_type','type_spec',1,'p_typeSpec','parser.py',104),
  ('type_spec -> function_type','type_spec',1,'p_typeSpec','parser.py',105),
  ('simple_type -> VOID','simple_type',1,'p_simpleType','parser.py',110),
  ('simple_type -> BOOL','simple_type',1,'p_simpleType','parser.py',111),
  ('simple_type -> I8','simple_type',1,'p_simpleType','parser.py',112),
  ('simple_type -> U8','simple_type',1,'p_simpleType','parser.py',113),
  ('simple_type -> I16','simple_type',1,'p_simpleType','parser.py',114),
  ('simple_type -> U16','simple_type',1,'p_simpleType','parser.py',115),
  ('simple_type -> I32','simple_type',1,'p_simpleType','parser.py',116),
  ('simple_type -> U32','simple_type',1,'p_simpleType','parser.py',117),
  ('simple_type -> I64','simple_type',1,'p_simpleType','parser.py',118),
  ('simple_type -> U64','simple_type',1,'p_simpleType','parser.py',119),
  ('simple_type -> F16','simple_type',1,'p_simpleType','parser.py',120),
  ('simple_type -> F32','simple_type',1,'p_simpleType','parser.py',121),
  ('simple_type -> F64','simple_type',1,'p_simpleType','parser.py',122),
  ('complex_type -> ID','complex_type',1,'p_complexType','parser.py',127),
  ('array_type -> type_spec LBRACKET int_literal_opt RBRACKET','array_type',4,'p_arrayType','parser.py',132),
  ('int_literal_opt -> INT','int_literal_opt',1,'p_intLiteral_opt','parser.py',136),
  ('int_literal_opt -> empty','int_literal_opt',1,'p_intLiteral_opt','parser.py',137),
  ('reference_type -> type_spec REF','reference_type',2,'p_referenceType','parser.py',142),
  ('function_type -> function_sign','function_type',1,'p_functionType','parser.py',147),
  ('struct_decl -> STRUCT generics_type_list_opt LBRACE member_decl_nest RBRACE','struct_decl',5,'p_structDecl','parser.py',152),
  ('interface_decl -> INTERFACE generics_type_list_opt LBRACE interface_member_decl_nest RBRACE','interface_decl',5,'p_interfaceDecl','parser.py',157),
  ('generics_type_list_opt -> generics_type_list','generics_type_list_opt',1,'p_genericsTypeList_opt','parser.py',162),
  ('generics_type_list_opt -> empty','generics_type_list_opt',1,'p_genericsTypeList_opt','parser.py',163),
  ('member_decl_nest -> member_decl member_decl_nest','member_decl_nest',2,'p_member_decl_nest','parser.py',167),
  ('member_decl_nest -> empty','member_decl_nest',1,'p_member_decl_nest','parser.py',168),
  ('interface_member_decl_nest -> interface_member_decl interface_member_decl_nest','interface_member_decl_nest',2,'p_interface_member_decl_nest','parser.py',172),
  ('interface_member_decl_nest -> empty','interface_member_decl_nest',1,'p_interface_member_decl_nest','parser.py',173),
  ('member_decl -> declarator','member_decl',1,'p_member_decl','parser.py',177),
  ('member_decl -> function_def','member_decl',1,'p_member_decl','parser.py',178),
  ('interface_member_decl -> declarator','interface_member_decl',1,'p_interface_member_decl','parser.py',182),
  ('interface_member_decl -> function_decl','interface_member_decl',1,'p_interface_member_decl','parser.py',183),
  ('function_sign -> generics_type_list_opt LPAREN parameter_decl_list_opt RPAREN type_spec_assigntype_opt','function_sign',5,'p_function_sign','parser.py',187),
  ('parameter_decl_list_opt -> parameter_dcel_list','parameter_decl_list_opt',1,'p_p_parameterDeclList_opt','parser.py',190),
  ('parameter_decl_list_opt -> empty','parameter_decl_list_opt',1,'p_p_parameterDeclList_opt','parser.py',191),
  ('type_spec_assigntype_opt -> ASSIGNTYPE type_spec','type_spec_assigntype_opt',2,'p_typeSpecAssigntype_opt','parser.py',194),
  ('type_spec_assigntype_opt -> empty','type_spec_assigntype_opt',1,'p_typeSpecAssigntype_opt','parser.py',195),
  ('parameter_dcel_list -> parameter_decl parameter_decl_comma_nest','parameter_dcel_list',2,'p_parameterDeclList','parser.py',199),
  ('parameter_decl_comma_nest -> COMMA parameter_decl parameter_decl_comma_nest','parameter_decl_comma_nest',3,'p_parameterDeclComma_opt','parser.py',203),
  ('parameter_decl_comma_nest -> empty','parameter_decl_comma_nest',1,'p_parameterDeclComma_opt','parser.py',204),
  ('parameter_decl -> ID type_spec_colon_opt','parameter_decl',2,'p_parameterDecl','parser.py',209),
  ('generics_type_list -> LANGRBRACKET generics_type generics_type_comma_nest RANGRBRACKET','generics_type_list',4,'p_genericsTypeList','parser.py',217),
  ('generics_type_comma_nest -> COMMA generics_type generics_type_comma_nest','generics_type_comma_nest',3,'p_genericsTypeComma_nest','parser.py',222),
  ('generics_type_comma_nest -> empty','generics_type_comma_nest',1,'p_genericsTypeComma_nest','parser.py',223),
  ('generics_type -> ID generics_type_range_colon_opt','generics_type',2,'p_generics_type','parser.py',228),
  ('generics_type_range_colon_opt -> COLON generics_type_range','generics_type_range_colon_opt',2,'p_genericsTypeRangeColon_opt','parser.py',233),
  ('generics_type_range_colon_opt -> empty','generics_type_range_colon_opt',1,'p_genericsTypeRangeColon_opt','parser.py',234),
  ('generics_type_range -> complex_type','generics_type_range',1,'p_genericsTypeRange','parser.py',239),
  ('statement -> decl_statement','statement',1,'p_statement','parser.py',248),
  ('statement -> block_statement','statement',1,'p_statement','parser.py',249),
  ('statement -> expression_statement','statement',1,'p_statement','parser.py',250),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',251),
  ('statement -> iteration_statement','statement',1,'p_statement','parser.py',252),
  ('statement -> jump_statement','statement',1,'p_statement','parser.py',253),
  ('decl_statement -> variable_decl SEMICOLON','decl_statement',2,'p_declStatement','parser.py',258),
  ('decl_statement -> constant_decl SEMICOLON','decl_statement',2,'p_declStatement','parser.py',259),
  ('block_statement -> LBRACE statement_nest RBRACE','block_statement',3,'p_blockStatement','parser.py',263),
  ('statement_nest -> statement statement_nest','statement_nest',2,'p_statement_nest','parser.py',268),
  ('statement_nest -> empty','statement_nest',1,'p_statement_nest','parser.py',269),
  ('expression_statement -> expression_opt SEMICOLON','expression_statement',2,'p_expressionStatement','parser.py',275),
  ('expression_opt -> expression','expression_opt',1,'p_expressionOpt','parser.py',278),
  ('expression_opt -> empty','expression_opt',1,'p_expressionOpt','parser.py',279),
  ('if_statement -> IF LPAREN expression RPAREN statement statement_else_opt','if_statement',6,'p_ifStatement','parser.py',283),
  ('statement_else_opt -> ELSE statement','statement_else_opt',2,'p_statementElseOpt','parser.py',287),
  ('statement_else_opt -> empty','statement_else_opt',1,'p_statementElseOpt','parser.py',288),
  ('iteration_statement -> while_clause','iteration_statement',1,'p_iterationStatement','parser.py',294),
  ('iteration_statement -> for_clause','iteration_statement',1,'p_iterationStatement','parser.py',295),
  ('while_clause -> WHILE LPAREN expression RPAREN statement','while_clause',5,'p_whileClause','parser.py',299),
  ('for_clause -> FOR LPAREN for_init_statement expression_opt SEMICOLON expression RPAREN statement','for_clause',8,'p_forClause','parser.py',303),
  ('for_init_statement -> expression_statement','for_init_statement',1,'p_forInitStatement','parser.py',307),
  ('for_init_statement -> decl_statement','for_init_statement',1,'p_forInitStatement','parser.py',308),
  ('jump_statement -> BREAK SEMICOLON','jump_statement',2,'p_jumpStatement','parser.py',312),
  ('jump_statement -> CONTINUE SEMICOLON','jump_statement',2,'p_jumpStatement','parser.py',313),
  ('jump_statement -> RETURN expression_opt SEMICOLON','jump_statement',3,'p_jumpStatement','parser.py',314),
  ('expression -> assign_expr','expression',1,'p_expression','parser.py',322),
  ('expression -> binary_expr','expression',1,'p_expression','parser.py',323),
  ('expression -> unary_expr','expression',1,'p_expression','parser.py',324),
  ('assign_expr -> expression ASSIGN expression','assign_expr',3,'p_assignExpr','parser.py',328),
  ('binary_expr -> expression PLUS expression','binary_expr',3,'p_binaryExpr','parser.py',333),
  ('binary_expr -> expression MINUS expression','binary_expr',3,'p_binaryExpr','parser.py',334),
  ('binary_expr -> expression MUL expression','binary_expr',3,'p_binaryExpr','parser.py',335),
  ('binary_expr -> expression DIV expression','binary_expr',3,'p_binaryExpr','parser.py',336),
  ('unary_expr -> unary_operation_opt primary_expr','unary_expr',2,'p_unaryExpr','parser.py',341),
  ('unary_operation_opt -> NOT','unary_operation_opt',1,'p_unaryOpration_opt','parser.py',346),
  ('unary_operation_opt -> empty','unary_operation_opt',1,'p_unaryOpration_opt','parser.py',347),
  ('primary_expr -> operand','primary_expr',1,'p_primaryExpr','parser.py',351),
  ('primary_expr -> member_expr','primary_expr',1,'p_primaryExpr','parser.py',352),
  ('primary_expr -> index_expr','primary_expr',1,'p_primaryExpr','parser.py',353),
  ('primary_expr -> cast_expr','primary_expr',1,'p_primaryExpr','parser.py',354),
  ('primary_expr -> new_expr','primary_expr',1,'p_primaryExpr','parser.py',355),
  ('primary_expr -> call_expr','primary_expr',1,'p_primaryExpr','parser.py',356),
  ('operand -> INT','operand',1,'p_operand','parser.py',360),
  ('operand -> FLOAT','operand',1,'p_operand','parser.py',361),
  ('operand -> DOUBLE','operand',1,'p_operand','parser.py',362),
  ('operand -> ID','operand',1,'p_operand','parser.py',363),
  ('operand -> LPAREN expression RPAREN','operand',3,'p_operand','parser.py',364),
  ('member_expr -> ID DOT ID','member_expr',3,'p_member_expr','parser.py',368),
  ('index_expr -> primary_expr LBRACKET expression RBRACKET','index_expr',4,'p_index_expr','parser.py',372),
  ('cast_expr -> LPAREN type_spec RPAREN expression','cast_expr',4,'p_cast_expr','parser.py',376),
  ('new_expr -> type_spec LPAREN parameter_list_opt RPAREN','new_expr',4,'p_new_expr','parser.py',380),
  ('parameter_list_opt -> parameter_list','parameter_list_opt',1,'p_parameter_list_opt','parser.py',384),
  ('parameter_list_opt -> empty','parameter_list_opt',1,'p_parameter_list_opt','parser.py',385),
  ('call_expr -> primary_expr generics_specialization_list_opt LPAREN parameter_list_opt RPAREN','call_expr',5,'p_call_expr','parser.py',389),
  ('generics_specialization_list_opt -> generics_specialization_list','generics_specialization_list_opt',1,'p_generics_specialization_list_opt','parser.py',393),
  ('generics_specialization_list_opt -> empty','generics_specialization_list_opt',1,'p_generics_specialization_list_opt','parser.py',394),
  ('generics_specialization_list -> LANGRBRACKET type_spec type_spec_comma_nest RANGRBRACKET','generics_specialization_list',4,'p_generics_specialization_list','parser.py',398),
  ('type_spec_comma_nest -> COMMA type_spec type_spec_comma_nest','type_spec_comma_nest',3,'p_type_spec_comma_nest','parser.py',402),
  ('type_spec_comma_nest -> empty','type_spec_comma_nest',1,'p_type_spec_comma_nest','parser.py',403),
  ('parameter_list -> expression expression_comma_nest','parameter_list',2,'p_parameter_list','parser.py',407),
  ('expression_comma_nest -> COMMA expression expression_comma_nest','expression_comma_nest',3,'p_expression_comma_nest','parser.py',411),
  ('expression_comma_nest -> empty','expression_comma_nest',1,'p_expression_comma_nest','parser.py',412),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',501),
]
